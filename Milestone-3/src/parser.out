Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RANGE

Grammar

Rule 0     S' -> start
Rule 1     start -> SourceFile
Rule 2     Type -> TypeName
Rule 3     Type -> TypeLit
Rule 4     Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
Rule 5     TypeName -> TypeToken
Rule 6     TypeName -> QualifiedIdent
Rule 7     TypeToken -> INT_T
Rule 8     TypeToken -> FLOAT_T
Rule 9     TypeToken -> UINT_T
Rule 10    TypeToken -> COMPLEX_T
Rule 11    TypeToken -> RUNE_T
Rule 12    TypeToken -> BOOL_T
Rule 13    TypeToken -> STRING_T
Rule 14    TypeToken -> TYPE IDENTIFIER
Rule 15    TypeLit -> ArrayType
Rule 16    TypeLit -> StructType
Rule 17    TypeLit -> PointerType
Rule 18    TypeOpt -> Type
Rule 19    TypeOpt -> epsilon
Rule 20    ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
Rule 21    ArrayLength -> I INTEGER
Rule 22    ArrayLength -> I OCTAL
Rule 23    ArrayLength -> I HEX
Rule 24    ArrayLength -> I RUNE
Rule 25    ElementType -> Type
Rule 26    StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
Rule 27    FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON
Rule 28    FieldDeclRep -> epsilon
Rule 29    FieldDecl -> IdentifierList Type
Rule 30    TagOpt -> Tag
Rule 31    TagOpt -> epsilon
Rule 32    Tag -> STRING
Rule 33    PointerType -> MULT BaseType
Rule 34    BaseType -> Type
Rule 35    Signature -> Parameters TypeOpt
Rule 36    ResultOpt -> Result
Rule 37    ResultOpt -> epsilon
Rule 38    Result -> Parameters
Rule 39    Result -> Type
Rule 40    Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS
Rule 41    ParameterListOpt -> ParametersList
Rule 42    ParameterListOpt -> epsilon
Rule 43    ParametersList -> ParameterDecl
Rule 44    ParametersList -> ParameterDeclCommaRep
Rule 45    ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl
Rule 46    ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl
Rule 47    ParameterDecl -> IdentifierList Type
Rule 48    ParameterDecl -> Type
Rule 49    Block -> LEFT_BRACES StatementList RIGHT_BRACES
Rule 50    StatementList -> StatementRep
Rule 51    StatementRep -> StatementRep Statement SEMICOLON
Rule 52    StatementRep -> epsilon
Rule 53    Declaration -> ConstDecl
Rule 54    Declaration -> TypeDecl
Rule 55    Declaration -> VarDecl
Rule 56    TopLevelDecl -> Declaration
Rule 57    TopLevelDecl -> FunctionDecl
Rule 58    ConstDecl -> CONST ConstSpec
Rule 59    ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
Rule 60    ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON
Rule 61    ConstSpecRep -> epsilon
Rule 62    ConstSpec -> IdentifierList Type ASSIGN ExpressionList
Rule 63    TypeExprListOpt -> TypeOpt ASSIGN ExpressionList
Rule 64    TypeExprListOpt -> epsilon
Rule 65    IdentifierList -> IDENTIFIER IdentifierRep
Rule 66    IdentifierRep -> IdentifierRep COMMA IDENTIFIER
Rule 67    IdentifierRep -> epsilon
Rule 68    ExpressionList -> Expression ExpressionRep
Rule 69    ExpressionRep -> ExpressionRep COMMA Expression
Rule 70    ExpressionRep -> epsilon
Rule 71    TypeDecl -> TYPE TypeSpec
Rule 72    TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
Rule 73    TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON
Rule 74    TypeSpecRep -> epsilon
Rule 75    TypeSpec -> TypeDef
Rule 76    AliasDecl -> IDENTIFIER ASSIGN Type
Rule 77    TypeDef -> IDENTIFIER Type
Rule 78    VarDecl -> VAR VarSpec
Rule 79    VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
Rule 80    VarSpecRep -> VarSpecRep VarSpec SEMICOLON
Rule 81    VarSpecRep -> epsilon
Rule 82    VarSpec -> IdentifierList Type ExpressionListOpt
Rule 83    VarSpec -> IdentifierList ASSIGN ExpressionList
Rule 84    ExpressionListOpt -> ASSIGN ExpressionList
Rule 85    ExpressionListOpt -> epsilon
Rule 86    ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression
Rule 87    FunctionDecl -> FUNC FunctionName CreateScope Function EndScope
Rule 88    FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope
Rule 89    CreateFuncScope -> <empty>
Rule 90    CreateScope -> <empty>
Rule 91    EndScope -> <empty>
Rule 92    FunctionName -> IDENTIFIER
Rule 93    Function -> Signature FunctionBody
Rule 94    FunctionBody -> Block
Rule 95    Operand -> Literal
Rule 96    Operand -> OperandName
Rule 97    Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
Rule 98    Literal -> BasicLit
Rule 99    BasicLit -> I INTEGER
Rule 100   BasicLit -> I OCTAL
Rule 101   BasicLit -> I HEX
Rule 102   BasicLit -> F FLOAT
Rule 103   BasicLit -> C IMAGINARY
Rule 104   BasicLit -> I RUNE
Rule 105   BasicLit -> S STRING
Rule 106   I -> <empty>
Rule 107   F -> <empty>
Rule 108   C -> <empty>
Rule 109   S -> <empty>
Rule 110   OperandName -> IDENTIFIER
Rule 111   QualifiedIdent -> IDENTIFIER DOT TypeName
Rule 112   PrimaryExpr -> Operand
Rule 113   PrimaryExpr -> PrimaryExpr Selector
Rule 114   PrimaryExpr -> Conversion
Rule 115   PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
Rule 116   PrimaryExpr -> PrimaryExpr Slice
Rule 117   PrimaryExpr -> PrimaryExpr TypeAssertion
Rule 118   PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
Rule 119   Selector -> DOT IDENTIFIER
Rule 120   Index -> LEFT_BRACKET Expression RIGHT_BRACKET
Rule 121   Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
Rule 122   Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
Rule 123   TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
Rule 124   ExpressionListTypeOpt -> ExpressionList
Rule 125   ExpressionListTypeOpt -> epsilon
Rule 126   Expression -> UnaryExpr
Rule 127   Expression -> Expression BinaryOp Expression
Rule 128   ExpressionOpt -> Expression
Rule 129   ExpressionOpt -> epsilon
Rule 130   UnaryExpr -> PrimaryExpr
Rule 131   UnaryExpr -> UnaryOp UnaryExpr
Rule 132   UnaryExpr -> NOT UnaryExpr
Rule 133   BinaryOp -> LOG_OR
Rule 134   BinaryOp -> LOG_AND
Rule 135   BinaryOp -> RelOp
Rule 136   BinaryOp -> AddMulOp
Rule 137   RelOp -> EQ
Rule 138   RelOp -> NEQ
Rule 139   RelOp -> LT
Rule 140   RelOp -> GT
Rule 141   RelOp -> LEQ
Rule 142   RelOp -> GEQ
Rule 143   AddMulOp -> UnaryOp
Rule 144   AddMulOp -> OR
Rule 145   AddMulOp -> XOR
Rule 146   AddMulOp -> DIV
Rule 147   AddMulOp -> MOD
Rule 148   AddMulOp -> LSHIFT
Rule 149   AddMulOp -> RSHIFT
Rule 150   UnaryOp -> ADD
Rule 151   UnaryOp -> SUB
Rule 152   UnaryOp -> MULT
Rule 153   UnaryOp -> AND
Rule 154   Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
Rule 155   Statement -> Declaration
Rule 156   Statement -> LabeledStmt
Rule 157   Statement -> SimpleStmt
Rule 158   Statement -> ReturnStmt
Rule 159   Statement -> CreateScope Block EndScope
Rule 160   Statement -> ScanStmt
Rule 161   Statement -> BreakStmt
Rule 162   Statement -> ContinueStmt
Rule 163   Statement -> GotoStmt
Rule 164   Statement -> PrintStmt
Rule 165   Statement -> IfStmt
Rule 166   Statement -> SwitchStmt
Rule 167   Statement -> ForStmt
Rule 168   PrintStmt -> PRINT Expression
Rule 169   ScanStmt -> SCAN Expression
Rule 170   SimpleStmt -> epsilon
Rule 171   SimpleStmt -> ExpressionStmt
Rule 172   SimpleStmt -> IncDecStmt
Rule 173   SimpleStmt -> Assignment
Rule 174   SimpleStmt -> ShortVarDecl
Rule 175   LabeledStmt -> Label COLON Statement
Rule 176   Label -> IDENTIFIER
Rule 177   ExpressionStmt -> Expression
Rule 178   IncDecStmt -> Expression INC
Rule 179   IncDecStmt -> Expression DEC
Rule 180   Assignment -> ExpressionList assign_op ExpressionList
Rule 181   assign_op -> AssignOp
Rule 182   AssignOp -> PLUS_ASSIGN
Rule 183   AssignOp -> MINUS_ASSIGN
Rule 184   AssignOp -> MULT_ASSIGN
Rule 185   AssignOp -> DIV_ASSIGN
Rule 186   AssignOp -> MOD_ASSIGN
Rule 187   AssignOp -> AND_ASSIGN
Rule 188   AssignOp -> OR_ASSIGN
Rule 189   AssignOp -> XOR_ASSIGN
Rule 190   AssignOp -> LSHIFT_ASSIGN
Rule 191   AssignOp -> RSHIFT_ASSIGN
Rule 192   AssignOp -> ASSIGN
Rule 193   IfStmt -> IF Expression CreateScope Block EndScope ElseOpt
Rule 194   SimpleStmtOpt -> SimpleStmt SEMICOLON
Rule 195   SimpleStmtOpt -> epsilon
Rule 196   ElseOpt -> ELSE IfStmt
Rule 197   ElseOpt -> ELSE CreateScope Block EndScope
Rule 198   ElseOpt -> epsilon
Rule 199   SwitchStmt -> ExprSwitchStmt
Rule 200   SwitchStmt -> TypeSwitchStmt
Rule 201   ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
Rule 202   StartSwitch -> <empty>
Rule 203   ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause
Rule 204   ExprCaseClauseRep -> epsilon
Rule 205   ExprCaseClause -> ExprSwitchCase COLON StatementList
Rule 206   ExprSwitchCase -> CASE ExpressionList
Rule 207   ExprSwitchCase -> DEFAULT
Rule 208   TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
Rule 209   TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
Rule 210   IdentifierOpt -> IDENTIFIER QUICK_ASSIGN
Rule 211   IdentifierOpt -> epsilon
Rule 212   TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause
Rule 213   TypeCaseClauseOpt -> epsilon
Rule 214   TypeCaseClause -> TypeSwitchCase COLON StatementList
Rule 215   TypeSwitchCase -> CASE TypeList
Rule 216   TypeSwitchCase -> DEFAULT
Rule 217   TypeList -> Type TypeRep
Rule 218   TypeRep -> TypeRep COMMA Type
Rule 219   TypeRep -> epsilon
Rule 220   ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope
Rule 221   ConditionBlockOpt -> epsilon
Rule 222   ConditionBlockOpt -> Condition
Rule 223   ConditionBlockOpt -> ForClause
Rule 224   Condition -> Expression
Rule 225   ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt
Rule 226   ConditionOpt -> epsilon
Rule 227   ConditionOpt -> Condition
Rule 228   ExpressionIdentListOpt -> epsilon
Rule 229   ExpressionIdentListOpt -> ExpressionIdentifier
Rule 230   ExpressionIdentifier -> ExpressionList ASSIGN
Rule 231   ReturnStmt -> RETURN ExpressionListPureOpt
Rule 232   ExpressionListPureOpt -> ExpressionList
Rule 233   ExpressionListPureOpt -> epsilon
Rule 234   BreakStmt -> BREAK LabelOpt
Rule 235   ContinueStmt -> CONTINUE LabelOpt
Rule 236   LabelOpt -> Label
Rule 237   LabelOpt -> epsilon
Rule 238   GotoStmt -> GOTO Label
Rule 239   SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep
Rule 240   ImportDeclRep -> epsilon
Rule 241   ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON
Rule 242   TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON
Rule 243   TopLevelDeclRep -> epsilon
Rule 244   PackageClause -> PACKAGE PackageName
Rule 245   PackageName -> IDENTIFIER
Rule 246   ImportDecl -> IMPORT ImportSpec
Rule 247   ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
Rule 248   ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON
Rule 249   ImportSpecRep -> epsilon
Rule 250   ImportSpec -> PackageNameDotOpt ImportPath
Rule 251   PackageNameDotOpt -> DOT
Rule 252   PackageNameDotOpt -> PackageName
Rule 253   PackageNameDotOpt -> epsilon
Rule 254   ImportPath -> STRING
Rule 255   epsilon -> <empty>

Terminals, with rules where they appear

ADD                  : 150
AND                  : 153
AND_ASSIGN           : 187
ASSIGN               : 62 63 76 83 84 192 230
BOOL_T               : 12
BREAK                : 234
CASE                 : 206 215
COLON                : 121 122 122 175 205 214
COMMA                : 45 46 66 69 218
COMPLEX_T            : 10
CONST                : 58 59
CONTINUE             : 235
DEC                  : 179
DEFAULT              : 207 216
DIV                  : 146
DIV_ASSIGN           : 185
DOT                  : 111 119 123 209 251
ELSE                 : 196 197
EQ                   : 137
FLOAT                : 102
FLOAT_T              : 8
FOR                  : 220
FUNC                 : 87 88
GEQ                  : 142
GOTO                 : 238
GT                   : 140
HEX                  : 23 101
IDENTIFIER           : 14 65 66 76 77 86 92 110 111 119 176 210 245
IF                   : 193
IMAGINARY            : 103
IMPORT               : 246 247
INC                  : 178
INTEGER              : 21 99
INT_T                : 7
LEFT_BRACES          : 26 49 201 208
LEFT_BRACKET         : 20 115 120 121 122
LEFT_PARANTHESIS     : 4 40 59 72 79 97 118 123 154 209 247
LEQ                  : 141
LOG_AND              : 134
LOG_OR               : 133
LSHIFT               : 148
LSHIFT_ASSIGN        : 190
LT                   : 139
MINUS_ASSIGN         : 183
MOD                  : 147
MOD_ASSIGN           : 186
MULT                 : 33 152
MULT_ASSIGN          : 184
NEQ                  : 138
NOT                  : 132
OCTAL                : 22 100
OR                   : 144
OR_ASSIGN            : 188
PACKAGE              : 244
PLUS_ASSIGN          : 182
PRINT                : 168
QUICK_ASSIGN         : 86 210
RANGE                : 
RETURN               : 231
RIGHT_BRACES         : 26 49 201 208
RIGHT_BRACKET        : 20 115 120 121 122
RIGHT_PARANTHESIS    : 4 40 59 72 79 97 118 123 154 209 247
RSHIFT               : 149
RSHIFT_ASSIGN        : 191
RUNE                 : 24 104
RUNE_T               : 11
SCAN                 : 169
SEMICOLON            : 27 51 60 73 80 194 225 225 239 241 242 248
STRING               : 32 105 254
STRING_T             : 13
STRUCT               : 26
SUB                  : 151
SWITCH               : 201 208
TYPE                 : 14 71 72 209
TYPECAST             : 154
UINT_T               : 9
VAR                  : 78 79
XOR                  : 145
XOR_ASSIGN           : 189
error                : 

Nonterminals, with rules where they appear

AddMulOp             : 136
AliasDecl            : 
ArrayLength          : 20
ArrayType            : 15
AssignOp             : 181
Assignment           : 173
BaseType             : 33
BasicLit             : 98
BinaryOp             : 127
Block                : 94 159 193 197 220
BreakStmt            : 161
C                    : 103
Condition            : 222 227
ConditionBlockOpt    : 220
ConditionOpt         : 225
ConstDecl            : 53
ConstSpec            : 58 60
ConstSpecRep         : 59 60
ContinueStmt         : 162
Conversion           : 114
CreateFuncScope      : 26
CreateScope          : 87 88 159 193 197 220
Declaration          : 56 155
ElementType          : 20
ElseOpt              : 193
EndScope             : 26 87 88 159 193 197 220
ExprCaseClause       : 203
ExprCaseClauseRep    : 201 203
ExprSwitchCase       : 205
ExprSwitchStmt       : 199
Expression           : 68 69 86 97 115 120 122 122 127 127 128 154 168 169 177 178 179 193 224
ExpressionIdentListOpt : 
ExpressionIdentifier : 229
ExpressionList       : 62 63 83 84 124 180 180 206 230 232
ExpressionListOpt    : 82
ExpressionListPureOpt : 231
ExpressionListTypeOpt : 118
ExpressionOpt        : 121 121 122 201
ExpressionRep        : 68 69
ExpressionStmt       : 171
F                    : 102
FieldDecl            : 27
FieldDeclRep         : 26 27
ForClause            : 223
ForStmt              : 167
Function             : 87
FunctionBody         : 93
FunctionDecl         : 57
FunctionName         : 87 88
GotoStmt             : 163
I                    : 21 22 23 24 99 100 101 104
IdentifierList       : 29 47 62 82 83
IdentifierOpt        : 209
IdentifierRep        : 65 66
IfStmt               : 165 196
ImportDecl           : 241
ImportDeclRep        : 239 241
ImportPath           : 250
ImportSpec           : 246 248
ImportSpecRep        : 247 248
IncDecStmt           : 172
Index                : 
Label                : 175 236 238
LabelOpt             : 234 235
LabeledStmt          : 156
Literal              : 95
Operand              : 112
OperandName          : 96
PackageClause        : 239
PackageName          : 244 252
PackageNameDotOpt    : 250
ParameterDecl        : 43 45 46 46
ParameterDeclCommaRep : 44 45
ParameterListOpt     : 40
Parameters           : 35 38
ParametersList       : 41
PointerType          : 17
PrimaryExpr          : 113 115 116 117 118 130 209
PrintStmt            : 164
QualifiedIdent       : 6
RelOp                : 135
Result               : 36
ResultOpt            : 
ReturnStmt           : 158
S                    : 105
ScanStmt             : 160
Selector             : 113
ShortVarDecl         : 174
Signature            : 88 93
SimpleStmt           : 157 194 225 225
SimpleStmtOpt        : 208
Slice                : 116
SourceFile           : 1
StartSwitch          : 
Statement            : 51 175
StatementList        : 49 205 214
StatementRep         : 50 51
StructType           : 16
SwitchStmt           : 166
Tag                  : 30
TagOpt               : 
TopLevelDecl         : 242
TopLevelDeclRep      : 239 242
Type                 : 4 18 25 29 34 39 47 48 62 76 77 82 123 154 217 218
TypeAssertion        : 117
TypeCaseClause       : 212
TypeCaseClauseOpt    : 208 212
TypeDecl             : 54
TypeDef              : 75
TypeExprListOpt      : 
TypeList             : 215
TypeLit              : 3
TypeName             : 2 111
TypeOpt              : 35 63
TypeRep              : 217 218
TypeSpec             : 71 73
TypeSpecRep          : 72 73
TypeSwitchCase       : 214
TypeSwitchGuard      : 208
TypeSwitchStmt       : 200
TypeToken            : 5
UnaryExpr            : 126 131 132
UnaryOp              : 131 143
VarDecl              : 55
VarSpec              : 78 80
VarSpecRep           : 79 80
assign_op            : 180
epsilon              : 19 28 31 37 42 52 61 64 67 70 74 81 85 125 129 170 195 198 204 211 213 219 221 226 228 233 237 240 243 249 253
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . SourceFile
    (239) SourceFile -> . PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep
    (244) PackageClause -> . PACKAGE PackageName

    PACKAGE         shift and go to state 4

    start                          shift and go to state 1
    SourceFile                     shift and go to state 2
    PackageClause                  shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> SourceFile .

    $end            reduce using rule 1 (start -> SourceFile .)


state 3

    (239) SourceFile -> PackageClause . SEMICOLON ImportDeclRep TopLevelDeclRep

    SEMICOLON       shift and go to state 5


state 4

    (244) PackageClause -> PACKAGE . PackageName
    (245) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 7

    PackageName                    shift and go to state 6

state 5

    (239) SourceFile -> PackageClause SEMICOLON . ImportDeclRep TopLevelDeclRep
    (240) ImportDeclRep -> . epsilon
    (241) ImportDeclRep -> . ImportDeclRep ImportDecl SEMICOLON
    (255) epsilon -> .

    IMPORT          reduce using rule 255 (epsilon -> .)
    FUNC            reduce using rule 255 (epsilon -> .)
    CONST           reduce using rule 255 (epsilon -> .)
    TYPE            reduce using rule 255 (epsilon -> .)
    VAR             reduce using rule 255 (epsilon -> .)
    $end            reduce using rule 255 (epsilon -> .)

    ImportDeclRep                  shift and go to state 8
    epsilon                        shift and go to state 9

state 6

    (244) PackageClause -> PACKAGE PackageName .

    SEMICOLON       reduce using rule 244 (PackageClause -> PACKAGE PackageName .)


state 7

    (245) PackageName -> IDENTIFIER .

    SEMICOLON       reduce using rule 245 (PackageName -> IDENTIFIER .)
    STRING          reduce using rule 245 (PackageName -> IDENTIFIER .)


state 8

    (239) SourceFile -> PackageClause SEMICOLON ImportDeclRep . TopLevelDeclRep
    (241) ImportDeclRep -> ImportDeclRep . ImportDecl SEMICOLON
    (242) TopLevelDeclRep -> . TopLevelDeclRep TopLevelDecl SEMICOLON
    (243) TopLevelDeclRep -> . epsilon
    (246) ImportDecl -> . IMPORT ImportSpec
    (247) ImportDecl -> . IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
    (255) epsilon -> .

    IMPORT          shift and go to state 13
    FUNC            reduce using rule 255 (epsilon -> .)
    CONST           reduce using rule 255 (epsilon -> .)
    TYPE            reduce using rule 255 (epsilon -> .)
    VAR             reduce using rule 255 (epsilon -> .)
    $end            reduce using rule 255 (epsilon -> .)

    TopLevelDeclRep                shift and go to state 10
    ImportDecl                     shift and go to state 11
    epsilon                        shift and go to state 12

state 9

    (240) ImportDeclRep -> epsilon .

    IMPORT          reduce using rule 240 (ImportDeclRep -> epsilon .)
    FUNC            reduce using rule 240 (ImportDeclRep -> epsilon .)
    CONST           reduce using rule 240 (ImportDeclRep -> epsilon .)
    TYPE            reduce using rule 240 (ImportDeclRep -> epsilon .)
    VAR             reduce using rule 240 (ImportDeclRep -> epsilon .)
    $end            reduce using rule 240 (ImportDeclRep -> epsilon .)


state 10

    (239) SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep .
    (242) TopLevelDeclRep -> TopLevelDeclRep . TopLevelDecl SEMICOLON
    (56) TopLevelDecl -> . Declaration
    (57) TopLevelDecl -> . FunctionDecl
    (53) Declaration -> . ConstDecl
    (54) Declaration -> . TypeDecl
    (55) Declaration -> . VarDecl
    (87) FunctionDecl -> . FUNC FunctionName CreateScope Function EndScope
    (88) FunctionDecl -> . FUNC FunctionName CreateScope Signature EndScope
    (58) ConstDecl -> . CONST ConstSpec
    (59) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (71) TypeDecl -> . TYPE TypeSpec
    (72) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (78) VarDecl -> . VAR VarSpec
    (79) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS

    $end            reduce using rule 239 (SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep .)
    FUNC            shift and go to state 20
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23

    TopLevelDecl                   shift and go to state 14
    Declaration                    shift and go to state 15
    FunctionDecl                   shift and go to state 16
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19

state 11

    (241) ImportDeclRep -> ImportDeclRep ImportDecl . SEMICOLON

    SEMICOLON       shift and go to state 24


state 12

    (243) TopLevelDeclRep -> epsilon .

    FUNC            reduce using rule 243 (TopLevelDeclRep -> epsilon .)
    CONST           reduce using rule 243 (TopLevelDeclRep -> epsilon .)
    TYPE            reduce using rule 243 (TopLevelDeclRep -> epsilon .)
    VAR             reduce using rule 243 (TopLevelDeclRep -> epsilon .)
    $end            reduce using rule 243 (TopLevelDeclRep -> epsilon .)


state 13

    (246) ImportDecl -> IMPORT . ImportSpec
    (247) ImportDecl -> IMPORT . LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
    (250) ImportSpec -> . PackageNameDotOpt ImportPath
    (251) PackageNameDotOpt -> . DOT
    (252) PackageNameDotOpt -> . PackageName
    (253) PackageNameDotOpt -> . epsilon
    (245) PackageName -> . IDENTIFIER
    (255) epsilon -> .

    LEFT_PARANTHESIS shift and go to state 26
    DOT             shift and go to state 28
    IDENTIFIER      shift and go to state 7
    STRING          reduce using rule 255 (epsilon -> .)

    ImportSpec                     shift and go to state 25
    PackageNameDotOpt              shift and go to state 27
    PackageName                    shift and go to state 29
    epsilon                        shift and go to state 30

state 14

    (242) TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl . SEMICOLON

    SEMICOLON       shift and go to state 31


state 15

    (56) TopLevelDecl -> Declaration .

    SEMICOLON       reduce using rule 56 (TopLevelDecl -> Declaration .)


state 16

    (57) TopLevelDecl -> FunctionDecl .

    SEMICOLON       reduce using rule 57 (TopLevelDecl -> FunctionDecl .)


state 17

    (53) Declaration -> ConstDecl .

    SEMICOLON       reduce using rule 53 (Declaration -> ConstDecl .)


state 18

    (54) Declaration -> TypeDecl .

    SEMICOLON       reduce using rule 54 (Declaration -> TypeDecl .)


state 19

    (55) Declaration -> VarDecl .

    SEMICOLON       reduce using rule 55 (Declaration -> VarDecl .)


state 20

    (87) FunctionDecl -> FUNC . FunctionName CreateScope Function EndScope
    (88) FunctionDecl -> FUNC . FunctionName CreateScope Signature EndScope
    (92) FunctionName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 33

    FunctionName                   shift and go to state 32

state 21

    (58) ConstDecl -> CONST . ConstSpec
    (59) ConstDecl -> CONST . LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (62) ConstSpec -> . IdentifierList Type ASSIGN ExpressionList
    (65) IdentifierList -> . IDENTIFIER IdentifierRep

    LEFT_PARANTHESIS shift and go to state 35
    IDENTIFIER      shift and go to state 37

    ConstSpec                      shift and go to state 34
    IdentifierList                 shift and go to state 36

state 22

    (71) TypeDecl -> TYPE . TypeSpec
    (72) TypeDecl -> TYPE . LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (75) TypeSpec -> . TypeDef
    (77) TypeDef -> . IDENTIFIER Type

    LEFT_PARANTHESIS shift and go to state 39
    IDENTIFIER      shift and go to state 41

    TypeSpec                       shift and go to state 38
    TypeDef                        shift and go to state 40

state 23

    (78) VarDecl -> VAR . VarSpec
    (79) VarDecl -> VAR . LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (82) VarSpec -> . IdentifierList Type ExpressionListOpt
    (83) VarSpec -> . IdentifierList ASSIGN ExpressionList
    (65) IdentifierList -> . IDENTIFIER IdentifierRep

    LEFT_PARANTHESIS shift and go to state 43
    IDENTIFIER      shift and go to state 37

    VarSpec                        shift and go to state 42
    IdentifierList                 shift and go to state 44

state 24

    (241) ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .

    IMPORT          reduce using rule 241 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    FUNC            reduce using rule 241 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    CONST           reduce using rule 241 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    TYPE            reduce using rule 241 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    VAR             reduce using rule 241 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    $end            reduce using rule 241 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)


state 25

    (246) ImportDecl -> IMPORT ImportSpec .

    SEMICOLON       reduce using rule 246 (ImportDecl -> IMPORT ImportSpec .)


state 26

    (247) ImportDecl -> IMPORT LEFT_PARANTHESIS . ImportSpecRep RIGHT_PARANTHESIS
    (248) ImportSpecRep -> . ImportSpecRep ImportSpec SEMICOLON
    (249) ImportSpecRep -> . epsilon
    (255) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    DOT             reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)
    STRING          reduce using rule 255 (epsilon -> .)

    ImportSpecRep                  shift and go to state 45
    epsilon                        shift and go to state 46

state 27

    (250) ImportSpec -> PackageNameDotOpt . ImportPath
    (254) ImportPath -> . STRING

    STRING          shift and go to state 48

    ImportPath                     shift and go to state 47

state 28

    (251) PackageNameDotOpt -> DOT .

    STRING          reduce using rule 251 (PackageNameDotOpt -> DOT .)


state 29

    (252) PackageNameDotOpt -> PackageName .

    STRING          reduce using rule 252 (PackageNameDotOpt -> PackageName .)


state 30

    (253) PackageNameDotOpt -> epsilon .

    STRING          reduce using rule 253 (PackageNameDotOpt -> epsilon .)


state 31

    (242) TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .

    FUNC            reduce using rule 242 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    CONST           reduce using rule 242 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    TYPE            reduce using rule 242 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    VAR             reduce using rule 242 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    $end            reduce using rule 242 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)


state 32

    (87) FunctionDecl -> FUNC FunctionName . CreateScope Function EndScope
    (88) FunctionDecl -> FUNC FunctionName . CreateScope Signature EndScope
    (90) CreateScope -> .

    LEFT_PARANTHESIS reduce using rule 90 (CreateScope -> .)

    CreateScope                    shift and go to state 49

state 33

    (92) FunctionName -> IDENTIFIER .

    LEFT_PARANTHESIS reduce using rule 92 (FunctionName -> IDENTIFIER .)


state 34

    (58) ConstDecl -> CONST ConstSpec .

    SEMICOLON       reduce using rule 58 (ConstDecl -> CONST ConstSpec .)


state 35

    (59) ConstDecl -> CONST LEFT_PARANTHESIS . ConstSpecRep RIGHT_PARANTHESIS
    (60) ConstSpecRep -> . ConstSpecRep ConstSpec SEMICOLON
    (61) ConstSpecRep -> . epsilon
    (255) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)

    ConstSpecRep                   shift and go to state 50
    epsilon                        shift and go to state 51

state 36

    (62) ConstSpec -> IdentifierList . Type ASSIGN ExpressionList
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 52
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 37

    (65) IdentifierList -> IDENTIFIER . IdentifierRep
    (66) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (67) IdentifierRep -> . epsilon
    (255) epsilon -> .

    COMMA           reduce using rule 255 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    INT_T           reduce using rule 255 (epsilon -> .)
    FLOAT_T         reduce using rule 255 (epsilon -> .)
    UINT_T          reduce using rule 255 (epsilon -> .)
    COMPLEX_T       reduce using rule 255 (epsilon -> .)
    RUNE_T          reduce using rule 255 (epsilon -> .)
    BOOL_T          reduce using rule 255 (epsilon -> .)
    STRING_T        reduce using rule 255 (epsilon -> .)
    TYPE            reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)
    LEFT_BRACKET    reduce using rule 255 (epsilon -> .)
    MULT            reduce using rule 255 (epsilon -> .)
    STRUCT          reduce using rule 255 (epsilon -> .)
    ASSIGN          reduce using rule 255 (epsilon -> .)

    IdentifierRep                  shift and go to state 73
    epsilon                        shift and go to state 74

state 38

    (71) TypeDecl -> TYPE TypeSpec .

    SEMICOLON       reduce using rule 71 (TypeDecl -> TYPE TypeSpec .)


state 39

    (72) TypeDecl -> TYPE LEFT_PARANTHESIS . TypeSpecRep RIGHT_PARANTHESIS
    (73) TypeSpecRep -> . TypeSpecRep TypeSpec SEMICOLON
    (74) TypeSpecRep -> . epsilon
    (255) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)

    TypeSpecRep                    shift and go to state 75
    epsilon                        shift and go to state 76

state 40

    (75) TypeSpec -> TypeDef .

    SEMICOLON       reduce using rule 75 (TypeSpec -> TypeDef .)


state 41

    (77) TypeDef -> IDENTIFIER . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 77
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 42

    (78) VarDecl -> VAR VarSpec .

    SEMICOLON       reduce using rule 78 (VarDecl -> VAR VarSpec .)


state 43

    (79) VarDecl -> VAR LEFT_PARANTHESIS . VarSpecRep RIGHT_PARANTHESIS
    (80) VarSpecRep -> . VarSpecRep VarSpec SEMICOLON
    (81) VarSpecRep -> . epsilon
    (255) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)

    VarSpecRep                     shift and go to state 78
    epsilon                        shift and go to state 79

state 44

    (82) VarSpec -> IdentifierList . Type ExpressionListOpt
    (83) VarSpec -> IdentifierList . ASSIGN ExpressionList
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    ASSIGN          shift and go to state 81
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 80
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 45

    (247) ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep . RIGHT_PARANTHESIS
    (248) ImportSpecRep -> ImportSpecRep . ImportSpec SEMICOLON
    (250) ImportSpec -> . PackageNameDotOpt ImportPath
    (251) PackageNameDotOpt -> . DOT
    (252) PackageNameDotOpt -> . PackageName
    (253) PackageNameDotOpt -> . epsilon
    (245) PackageName -> . IDENTIFIER
    (255) epsilon -> .

    RIGHT_PARANTHESIS shift and go to state 82
    DOT             shift and go to state 28
    IDENTIFIER      shift and go to state 7
    STRING          reduce using rule 255 (epsilon -> .)

    ImportSpec                     shift and go to state 83
    PackageNameDotOpt              shift and go to state 27
    PackageName                    shift and go to state 29
    epsilon                        shift and go to state 30

state 46

    (249) ImportSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 249 (ImportSpecRep -> epsilon .)
    DOT             reduce using rule 249 (ImportSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 249 (ImportSpecRep -> epsilon .)
    STRING          reduce using rule 249 (ImportSpecRep -> epsilon .)


state 47

    (250) ImportSpec -> PackageNameDotOpt ImportPath .

    SEMICOLON       reduce using rule 250 (ImportSpec -> PackageNameDotOpt ImportPath .)


state 48

    (254) ImportPath -> STRING .

    SEMICOLON       reduce using rule 254 (ImportPath -> STRING .)


state 49

    (87) FunctionDecl -> FUNC FunctionName CreateScope . Function EndScope
    (88) FunctionDecl -> FUNC FunctionName CreateScope . Signature EndScope
    (93) Function -> . Signature FunctionBody
    (35) Signature -> . Parameters TypeOpt
    (40) Parameters -> . LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 87

    Function                       shift and go to state 84
    Signature                      shift and go to state 85
    Parameters                     shift and go to state 86

state 50

    (59) ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep . RIGHT_PARANTHESIS
    (60) ConstSpecRep -> ConstSpecRep . ConstSpec SEMICOLON
    (62) ConstSpec -> . IdentifierList Type ASSIGN ExpressionList
    (65) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_PARANTHESIS shift and go to state 88
    IDENTIFIER      shift and go to state 37

    ConstSpec                      shift and go to state 89
    IdentifierList                 shift and go to state 36

state 51

    (61) ConstSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 61 (ConstSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 61 (ConstSpecRep -> epsilon .)


state 52

    (62) ConstSpec -> IdentifierList Type . ASSIGN ExpressionList

    ASSIGN          shift and go to state 90


state 53

    (2) Type -> TypeName .

    ASSIGN          reduce using rule 2 (Type -> TypeName .)
    SEMICOLON       reduce using rule 2 (Type -> TypeName .)
    RIGHT_PARANTHESIS reduce using rule 2 (Type -> TypeName .)
    LEFT_BRACES     reduce using rule 2 (Type -> TypeName .)
    COMMA           reduce using rule 2 (Type -> TypeName .)
    LEFT_PARANTHESIS reduce using rule 2 (Type -> TypeName .)
    COLON           reduce using rule 2 (Type -> TypeName .)


state 54

    (3) Type -> TypeLit .

    ASSIGN          reduce using rule 3 (Type -> TypeLit .)
    SEMICOLON       reduce using rule 3 (Type -> TypeLit .)
    RIGHT_PARANTHESIS reduce using rule 3 (Type -> TypeLit .)
    LEFT_BRACES     reduce using rule 3 (Type -> TypeLit .)
    COMMA           reduce using rule 3 (Type -> TypeLit .)
    LEFT_PARANTHESIS reduce using rule 3 (Type -> TypeLit .)
    COLON           reduce using rule 3 (Type -> TypeLit .)


state 55

    (4) Type -> LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 91
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 56

    (5) TypeName -> TypeToken .

    ASSIGN          reduce using rule 5 (TypeName -> TypeToken .)
    SEMICOLON       reduce using rule 5 (TypeName -> TypeToken .)
    RIGHT_PARANTHESIS reduce using rule 5 (TypeName -> TypeToken .)
    LEFT_BRACES     reduce using rule 5 (TypeName -> TypeToken .)
    COMMA           reduce using rule 5 (TypeName -> TypeToken .)
    LEFT_PARANTHESIS reduce using rule 5 (TypeName -> TypeToken .)
    COLON           reduce using rule 5 (TypeName -> TypeToken .)


state 57

    (6) TypeName -> QualifiedIdent .

    ASSIGN          reduce using rule 6 (TypeName -> QualifiedIdent .)
    SEMICOLON       reduce using rule 6 (TypeName -> QualifiedIdent .)
    RIGHT_PARANTHESIS reduce using rule 6 (TypeName -> QualifiedIdent .)
    LEFT_BRACES     reduce using rule 6 (TypeName -> QualifiedIdent .)
    COMMA           reduce using rule 6 (TypeName -> QualifiedIdent .)
    LEFT_PARANTHESIS reduce using rule 6 (TypeName -> QualifiedIdent .)
    COLON           reduce using rule 6 (TypeName -> QualifiedIdent .)


state 58

    (15) TypeLit -> ArrayType .

    ASSIGN          reduce using rule 15 (TypeLit -> ArrayType .)
    SEMICOLON       reduce using rule 15 (TypeLit -> ArrayType .)
    RIGHT_PARANTHESIS reduce using rule 15 (TypeLit -> ArrayType .)
    LEFT_BRACES     reduce using rule 15 (TypeLit -> ArrayType .)
    COMMA           reduce using rule 15 (TypeLit -> ArrayType .)
    LEFT_PARANTHESIS reduce using rule 15 (TypeLit -> ArrayType .)
    COLON           reduce using rule 15 (TypeLit -> ArrayType .)


state 59

    (16) TypeLit -> StructType .

    ASSIGN          reduce using rule 16 (TypeLit -> StructType .)
    SEMICOLON       reduce using rule 16 (TypeLit -> StructType .)
    RIGHT_PARANTHESIS reduce using rule 16 (TypeLit -> StructType .)
    LEFT_BRACES     reduce using rule 16 (TypeLit -> StructType .)
    COMMA           reduce using rule 16 (TypeLit -> StructType .)
    LEFT_PARANTHESIS reduce using rule 16 (TypeLit -> StructType .)
    COLON           reduce using rule 16 (TypeLit -> StructType .)


state 60

    (17) TypeLit -> PointerType .

    ASSIGN          reduce using rule 17 (TypeLit -> PointerType .)
    SEMICOLON       reduce using rule 17 (TypeLit -> PointerType .)
    RIGHT_PARANTHESIS reduce using rule 17 (TypeLit -> PointerType .)
    LEFT_BRACES     reduce using rule 17 (TypeLit -> PointerType .)
    COMMA           reduce using rule 17 (TypeLit -> PointerType .)
    LEFT_PARANTHESIS reduce using rule 17 (TypeLit -> PointerType .)
    COLON           reduce using rule 17 (TypeLit -> PointerType .)


state 61

    (7) TypeToken -> INT_T .

    ASSIGN          reduce using rule 7 (TypeToken -> INT_T .)
    SEMICOLON       reduce using rule 7 (TypeToken -> INT_T .)
    RIGHT_PARANTHESIS reduce using rule 7 (TypeToken -> INT_T .)
    LEFT_BRACES     reduce using rule 7 (TypeToken -> INT_T .)
    COMMA           reduce using rule 7 (TypeToken -> INT_T .)
    LEFT_PARANTHESIS reduce using rule 7 (TypeToken -> INT_T .)
    COLON           reduce using rule 7 (TypeToken -> INT_T .)


state 62

    (8) TypeToken -> FLOAT_T .

    ASSIGN          reduce using rule 8 (TypeToken -> FLOAT_T .)
    SEMICOLON       reduce using rule 8 (TypeToken -> FLOAT_T .)
    RIGHT_PARANTHESIS reduce using rule 8 (TypeToken -> FLOAT_T .)
    LEFT_BRACES     reduce using rule 8 (TypeToken -> FLOAT_T .)
    COMMA           reduce using rule 8 (TypeToken -> FLOAT_T .)
    LEFT_PARANTHESIS reduce using rule 8 (TypeToken -> FLOAT_T .)
    COLON           reduce using rule 8 (TypeToken -> FLOAT_T .)


state 63

    (9) TypeToken -> UINT_T .

    ASSIGN          reduce using rule 9 (TypeToken -> UINT_T .)
    SEMICOLON       reduce using rule 9 (TypeToken -> UINT_T .)
    RIGHT_PARANTHESIS reduce using rule 9 (TypeToken -> UINT_T .)
    LEFT_BRACES     reduce using rule 9 (TypeToken -> UINT_T .)
    COMMA           reduce using rule 9 (TypeToken -> UINT_T .)
    LEFT_PARANTHESIS reduce using rule 9 (TypeToken -> UINT_T .)
    COLON           reduce using rule 9 (TypeToken -> UINT_T .)


state 64

    (10) TypeToken -> COMPLEX_T .

    ASSIGN          reduce using rule 10 (TypeToken -> COMPLEX_T .)
    SEMICOLON       reduce using rule 10 (TypeToken -> COMPLEX_T .)
    RIGHT_PARANTHESIS reduce using rule 10 (TypeToken -> COMPLEX_T .)
    LEFT_BRACES     reduce using rule 10 (TypeToken -> COMPLEX_T .)
    COMMA           reduce using rule 10 (TypeToken -> COMPLEX_T .)
    LEFT_PARANTHESIS reduce using rule 10 (TypeToken -> COMPLEX_T .)
    COLON           reduce using rule 10 (TypeToken -> COMPLEX_T .)


state 65

    (11) TypeToken -> RUNE_T .

    ASSIGN          reduce using rule 11 (TypeToken -> RUNE_T .)
    SEMICOLON       reduce using rule 11 (TypeToken -> RUNE_T .)
    RIGHT_PARANTHESIS reduce using rule 11 (TypeToken -> RUNE_T .)
    LEFT_BRACES     reduce using rule 11 (TypeToken -> RUNE_T .)
    COMMA           reduce using rule 11 (TypeToken -> RUNE_T .)
    LEFT_PARANTHESIS reduce using rule 11 (TypeToken -> RUNE_T .)
    COLON           reduce using rule 11 (TypeToken -> RUNE_T .)


state 66

    (12) TypeToken -> BOOL_T .

    ASSIGN          reduce using rule 12 (TypeToken -> BOOL_T .)
    SEMICOLON       reduce using rule 12 (TypeToken -> BOOL_T .)
    RIGHT_PARANTHESIS reduce using rule 12 (TypeToken -> BOOL_T .)
    LEFT_BRACES     reduce using rule 12 (TypeToken -> BOOL_T .)
    COMMA           reduce using rule 12 (TypeToken -> BOOL_T .)
    LEFT_PARANTHESIS reduce using rule 12 (TypeToken -> BOOL_T .)
    COLON           reduce using rule 12 (TypeToken -> BOOL_T .)


state 67

    (13) TypeToken -> STRING_T .

    ASSIGN          reduce using rule 13 (TypeToken -> STRING_T .)
    SEMICOLON       reduce using rule 13 (TypeToken -> STRING_T .)
    RIGHT_PARANTHESIS reduce using rule 13 (TypeToken -> STRING_T .)
    LEFT_BRACES     reduce using rule 13 (TypeToken -> STRING_T .)
    COMMA           reduce using rule 13 (TypeToken -> STRING_T .)
    LEFT_PARANTHESIS reduce using rule 13 (TypeToken -> STRING_T .)
    COLON           reduce using rule 13 (TypeToken -> STRING_T .)


state 68

    (14) TypeToken -> TYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 92


state 69

    (111) QualifiedIdent -> IDENTIFIER . DOT TypeName

    DOT             shift and go to state 93


state 70

    (20) ArrayType -> LEFT_BRACKET . ArrayLength RIGHT_BRACKET ElementType
    (21) ArrayLength -> . I INTEGER
    (22) ArrayLength -> . I OCTAL
    (23) ArrayLength -> . I HEX
    (24) ArrayLength -> . I RUNE
    (106) I -> .

    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)

    ArrayLength                    shift and go to state 94
    I                              shift and go to state 95

state 71

    (26) StructType -> CreateFuncScope . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope

    STRUCT          shift and go to state 96


state 72

    (33) PointerType -> MULT . BaseType
    (34) BaseType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    BaseType                       shift and go to state 97
    Type                           shift and go to state 98
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 73

    (65) IdentifierList -> IDENTIFIER IdentifierRep .
    (66) IdentifierRep -> IdentifierRep . COMMA IDENTIFIER

    LEFT_PARANTHESIS reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    INT_T           reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    FLOAT_T         reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    UINT_T          reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    COMPLEX_T       reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    RUNE_T          reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    BOOL_T          reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    STRING_T        reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    TYPE            reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    IDENTIFIER      reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    LEFT_BRACKET    reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    MULT            reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    STRUCT          reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    ASSIGN          reduce using rule 65 (IdentifierList -> IDENTIFIER IdentifierRep .)
    COMMA           shift and go to state 99


state 74

    (67) IdentifierRep -> epsilon .

    COMMA           reduce using rule 67 (IdentifierRep -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 67 (IdentifierRep -> epsilon .)
    INT_T           reduce using rule 67 (IdentifierRep -> epsilon .)
    FLOAT_T         reduce using rule 67 (IdentifierRep -> epsilon .)
    UINT_T          reduce using rule 67 (IdentifierRep -> epsilon .)
    COMPLEX_T       reduce using rule 67 (IdentifierRep -> epsilon .)
    RUNE_T          reduce using rule 67 (IdentifierRep -> epsilon .)
    BOOL_T          reduce using rule 67 (IdentifierRep -> epsilon .)
    STRING_T        reduce using rule 67 (IdentifierRep -> epsilon .)
    TYPE            reduce using rule 67 (IdentifierRep -> epsilon .)
    IDENTIFIER      reduce using rule 67 (IdentifierRep -> epsilon .)
    LEFT_BRACKET    reduce using rule 67 (IdentifierRep -> epsilon .)
    MULT            reduce using rule 67 (IdentifierRep -> epsilon .)
    STRUCT          reduce using rule 67 (IdentifierRep -> epsilon .)
    ASSIGN          reduce using rule 67 (IdentifierRep -> epsilon .)


state 75

    (72) TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep . RIGHT_PARANTHESIS
    (73) TypeSpecRep -> TypeSpecRep . TypeSpec SEMICOLON
    (75) TypeSpec -> . TypeDef
    (77) TypeDef -> . IDENTIFIER Type

    RIGHT_PARANTHESIS shift and go to state 100
    IDENTIFIER      shift and go to state 41

    TypeSpec                       shift and go to state 101
    TypeDef                        shift and go to state 40

state 76

    (74) TypeSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 74 (TypeSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 74 (TypeSpecRep -> epsilon .)


state 77

    (77) TypeDef -> IDENTIFIER Type .

    SEMICOLON       reduce using rule 77 (TypeDef -> IDENTIFIER Type .)


state 78

    (79) VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep . RIGHT_PARANTHESIS
    (80) VarSpecRep -> VarSpecRep . VarSpec SEMICOLON
    (82) VarSpec -> . IdentifierList Type ExpressionListOpt
    (83) VarSpec -> . IdentifierList ASSIGN ExpressionList
    (65) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_PARANTHESIS shift and go to state 102
    IDENTIFIER      shift and go to state 37

    VarSpec                        shift and go to state 103
    IdentifierList                 shift and go to state 44

state 79

    (81) VarSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 81 (VarSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 81 (VarSpecRep -> epsilon .)


state 80

    (82) VarSpec -> IdentifierList Type . ExpressionListOpt
    (84) ExpressionListOpt -> . ASSIGN ExpressionList
    (85) ExpressionListOpt -> . epsilon
    (255) epsilon -> .

    ASSIGN          shift and go to state 105
    SEMICOLON       reduce using rule 255 (epsilon -> .)

    ExpressionListOpt              shift and go to state 104
    epsilon                        shift and go to state 106

state 81

    (83) VarSpec -> IdentifierList ASSIGN . ExpressionList
    (68) ExpressionList -> . Expression ExpressionRep
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ExpressionList                 shift and go to state 107
    Expression                     shift and go to state 108
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 82

    (247) ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 247 (ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS .)


state 83

    (248) ImportSpecRep -> ImportSpecRep ImportSpec . SEMICOLON

    SEMICOLON       shift and go to state 129


state 84

    (87) FunctionDecl -> FUNC FunctionName CreateScope Function . EndScope
    (91) EndScope -> .

    SEMICOLON       reduce using rule 91 (EndScope -> .)

    EndScope                       shift and go to state 130

state 85

    (88) FunctionDecl -> FUNC FunctionName CreateScope Signature . EndScope
    (93) Function -> Signature . FunctionBody
    (91) EndScope -> .
    (94) FunctionBody -> . Block
    (49) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    SEMICOLON       reduce using rule 91 (EndScope -> .)
    LEFT_BRACES     shift and go to state 134

    EndScope                       shift and go to state 131
    FunctionBody                   shift and go to state 132
    Block                          shift and go to state 133

state 86

    (35) Signature -> Parameters . TypeOpt
    (18) TypeOpt -> . Type
    (19) TypeOpt -> . epsilon
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (255) epsilon -> .
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    LEFT_BRACES     reduce using rule 255 (epsilon -> .)
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    TypeOpt                        shift and go to state 135
    Type                           shift and go to state 136
    epsilon                        shift and go to state 137
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 87

    (40) Parameters -> LEFT_PARANTHESIS . ParameterListOpt RIGHT_PARANTHESIS
    (41) ParameterListOpt -> . ParametersList
    (42) ParameterListOpt -> . epsilon
    (43) ParametersList -> . ParameterDecl
    (44) ParametersList -> . ParameterDeclCommaRep
    (255) epsilon -> .
    (47) ParameterDecl -> . IdentifierList Type
    (48) ParameterDecl -> . Type
    (45) ParameterDeclCommaRep -> . ParameterDeclCommaRep COMMA ParameterDecl
    (46) ParameterDeclCommaRep -> . ParameterDecl COMMA ParameterDecl
    (65) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    RIGHT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    IDENTIFIER      shift and go to state 145
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    ParameterListOpt               shift and go to state 138
    ParametersList                 shift and go to state 139
    epsilon                        shift and go to state 140
    ParameterDecl                  shift and go to state 141
    ParameterDeclCommaRep          shift and go to state 142
    IdentifierList                 shift and go to state 143
    Type                           shift and go to state 144
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 88

    (59) ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 59 (ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS .)


state 89

    (60) ConstSpecRep -> ConstSpecRep ConstSpec . SEMICOLON

    SEMICOLON       shift and go to state 146


state 90

    (62) ConstSpec -> IdentifierList Type ASSIGN . ExpressionList
    (68) ExpressionList -> . Expression ExpressionRep
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ExpressionList                 shift and go to state 147
    Expression                     shift and go to state 108
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 91

    (4) Type -> LEFT_PARANTHESIS Type . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 148


state 92

    (14) TypeToken -> TYPE IDENTIFIER .

    ASSIGN          reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    SEMICOLON       reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    LEFT_BRACES     reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    COLON           reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)


state 93

    (111) QualifiedIdent -> IDENTIFIER DOT . TypeName
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName

    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69

    TypeName                       shift and go to state 149
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57

state 94

    (20) ArrayType -> LEFT_BRACKET ArrayLength . RIGHT_BRACKET ElementType

    RIGHT_BRACKET   shift and go to state 150


state 95

    (21) ArrayLength -> I . INTEGER
    (22) ArrayLength -> I . OCTAL
    (23) ArrayLength -> I . HEX
    (24) ArrayLength -> I . RUNE

    INTEGER         shift and go to state 151
    OCTAL           shift and go to state 152
    HEX             shift and go to state 153
    RUNE            shift and go to state 154


state 96

    (26) StructType -> CreateFuncScope STRUCT . LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope

    LEFT_BRACES     shift and go to state 155


state 97

    (33) PointerType -> MULT BaseType .

    ASSIGN          reduce using rule 33 (PointerType -> MULT BaseType .)
    SEMICOLON       reduce using rule 33 (PointerType -> MULT BaseType .)
    RIGHT_PARANTHESIS reduce using rule 33 (PointerType -> MULT BaseType .)
    LEFT_BRACES     reduce using rule 33 (PointerType -> MULT BaseType .)
    COMMA           reduce using rule 33 (PointerType -> MULT BaseType .)
    LEFT_PARANTHESIS reduce using rule 33 (PointerType -> MULT BaseType .)
    COLON           reduce using rule 33 (PointerType -> MULT BaseType .)


state 98

    (34) BaseType -> Type .

    ASSIGN          reduce using rule 34 (BaseType -> Type .)
    SEMICOLON       reduce using rule 34 (BaseType -> Type .)
    RIGHT_PARANTHESIS reduce using rule 34 (BaseType -> Type .)
    LEFT_BRACES     reduce using rule 34 (BaseType -> Type .)
    COMMA           reduce using rule 34 (BaseType -> Type .)
    LEFT_PARANTHESIS reduce using rule 34 (BaseType -> Type .)
    COLON           reduce using rule 34 (BaseType -> Type .)


state 99

    (66) IdentifierRep -> IdentifierRep COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 156


state 100

    (72) TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 72 (TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS .)


state 101

    (73) TypeSpecRep -> TypeSpecRep TypeSpec . SEMICOLON

    SEMICOLON       shift and go to state 157


state 102

    (79) VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 79 (VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS .)


state 103

    (80) VarSpecRep -> VarSpecRep VarSpec . SEMICOLON

    SEMICOLON       shift and go to state 158


state 104

    (82) VarSpec -> IdentifierList Type ExpressionListOpt .

    SEMICOLON       reduce using rule 82 (VarSpec -> IdentifierList Type ExpressionListOpt .)


state 105

    (84) ExpressionListOpt -> ASSIGN . ExpressionList
    (68) ExpressionList -> . Expression ExpressionRep
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ExpressionList                 shift and go to state 159
    Expression                     shift and go to state 108
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 106

    (85) ExpressionListOpt -> epsilon .

    SEMICOLON       reduce using rule 85 (ExpressionListOpt -> epsilon .)


state 107

    (83) VarSpec -> IdentifierList ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 83 (VarSpec -> IdentifierList ASSIGN ExpressionList .)


state 108

    (68) ExpressionList -> Expression . ExpressionRep
    (127) Expression -> Expression . BinaryOp Expression
    (69) ExpressionRep -> . ExpressionRep COMMA Expression
    (70) ExpressionRep -> . epsilon
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (255) epsilon -> .
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    COMMA           reduce using rule 255 (epsilon -> .)
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    RIGHT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    LEFT_BRACES     reduce using rule 255 (epsilon -> .)
    COLON           reduce using rule 255 (epsilon -> .)
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    ExpressionRep                  shift and go to state 160
    BinaryOp                       shift and go to state 161
    epsilon                        shift and go to state 162
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 109

    (126) Expression -> UnaryExpr .

    LOG_OR          reduce using rule 126 (Expression -> UnaryExpr .)
    LOG_AND         reduce using rule 126 (Expression -> UnaryExpr .)
    EQ              reduce using rule 126 (Expression -> UnaryExpr .)
    NEQ             reduce using rule 126 (Expression -> UnaryExpr .)
    LT              reduce using rule 126 (Expression -> UnaryExpr .)
    GT              reduce using rule 126 (Expression -> UnaryExpr .)
    LEQ             reduce using rule 126 (Expression -> UnaryExpr .)
    GEQ             reduce using rule 126 (Expression -> UnaryExpr .)
    OR              reduce using rule 126 (Expression -> UnaryExpr .)
    XOR             reduce using rule 126 (Expression -> UnaryExpr .)
    DIV             reduce using rule 126 (Expression -> UnaryExpr .)
    MOD             reduce using rule 126 (Expression -> UnaryExpr .)
    LSHIFT          reduce using rule 126 (Expression -> UnaryExpr .)
    RSHIFT          reduce using rule 126 (Expression -> UnaryExpr .)
    ADD             reduce using rule 126 (Expression -> UnaryExpr .)
    SUB             reduce using rule 126 (Expression -> UnaryExpr .)
    MULT            reduce using rule 126 (Expression -> UnaryExpr .)
    AND             reduce using rule 126 (Expression -> UnaryExpr .)
    COMMA           reduce using rule 126 (Expression -> UnaryExpr .)
    SEMICOLON       reduce using rule 126 (Expression -> UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 126 (Expression -> UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 126 (Expression -> UnaryExpr .)
    COLON           reduce using rule 126 (Expression -> UnaryExpr .)
    INC             reduce using rule 126 (Expression -> UnaryExpr .)
    DEC             reduce using rule 126 (Expression -> UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 126 (Expression -> UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 126 (Expression -> UnaryExpr .)
    MULT_ASSIGN     reduce using rule 126 (Expression -> UnaryExpr .)
    DIV_ASSIGN      reduce using rule 126 (Expression -> UnaryExpr .)
    MOD_ASSIGN      reduce using rule 126 (Expression -> UnaryExpr .)
    AND_ASSIGN      reduce using rule 126 (Expression -> UnaryExpr .)
    OR_ASSIGN       reduce using rule 126 (Expression -> UnaryExpr .)
    XOR_ASSIGN      reduce using rule 126 (Expression -> UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 126 (Expression -> UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 126 (Expression -> UnaryExpr .)
    ASSIGN          reduce using rule 126 (Expression -> UnaryExpr .)
    LEFT_BRACES     reduce using rule 126 (Expression -> UnaryExpr .)


state 110

    (130) UnaryExpr -> PrimaryExpr .
    (113) PrimaryExpr -> PrimaryExpr . Selector
    (115) PrimaryExpr -> PrimaryExpr . LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> PrimaryExpr . Slice
    (117) PrimaryExpr -> PrimaryExpr . TypeAssertion
    (118) PrimaryExpr -> PrimaryExpr . LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (119) Selector -> . DOT IDENTIFIER
    (121) Slice -> . LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (122) Slice -> . LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (123) TypeAssertion -> . DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    LOG_OR          reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    LOG_AND         reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    EQ              reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    NEQ             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    LT              reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    GT              reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    LEQ             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    GEQ             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    OR              reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    XOR             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    DIV             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    MOD             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    LSHIFT          reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    RSHIFT          reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    ADD             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    SUB             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    MULT            reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    AND             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    COMMA           reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    SEMICOLON       reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    RIGHT_BRACKET   reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    COLON           reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    INC             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    DEC             reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    PLUS_ASSIGN     reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    MINUS_ASSIGN    reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    MULT_ASSIGN     reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    DIV_ASSIGN      reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    MOD_ASSIGN      reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    AND_ASSIGN      reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    OR_ASSIGN       reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    XOR_ASSIGN      reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    ASSIGN          reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    LEFT_BRACES     reduce using rule 130 (UnaryExpr -> PrimaryExpr .)
    LEFT_BRACKET    shift and go to state 181
    LEFT_PARANTHESIS shift and go to state 184
    DOT             shift and go to state 185

    Selector                       shift and go to state 180
    Slice                          shift and go to state 182
    TypeAssertion                  shift and go to state 183

state 111

    (131) UnaryExpr -> UnaryOp . UnaryExpr
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    UnaryOp                        shift and go to state 111
    UnaryExpr                      shift and go to state 186
    PrimaryExpr                    shift and go to state 110
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 112

    (132) UnaryExpr -> NOT . UnaryExpr
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    UnaryExpr                      shift and go to state 187
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 113

    (112) PrimaryExpr -> Operand .

    LEFT_BRACKET    reduce using rule 112 (PrimaryExpr -> Operand .)
    LEFT_PARANTHESIS reduce using rule 112 (PrimaryExpr -> Operand .)
    DOT             reduce using rule 112 (PrimaryExpr -> Operand .)
    LOG_OR          reduce using rule 112 (PrimaryExpr -> Operand .)
    LOG_AND         reduce using rule 112 (PrimaryExpr -> Operand .)
    EQ              reduce using rule 112 (PrimaryExpr -> Operand .)
    NEQ             reduce using rule 112 (PrimaryExpr -> Operand .)
    LT              reduce using rule 112 (PrimaryExpr -> Operand .)
    GT              reduce using rule 112 (PrimaryExpr -> Operand .)
    LEQ             reduce using rule 112 (PrimaryExpr -> Operand .)
    GEQ             reduce using rule 112 (PrimaryExpr -> Operand .)
    OR              reduce using rule 112 (PrimaryExpr -> Operand .)
    XOR             reduce using rule 112 (PrimaryExpr -> Operand .)
    DIV             reduce using rule 112 (PrimaryExpr -> Operand .)
    MOD             reduce using rule 112 (PrimaryExpr -> Operand .)
    LSHIFT          reduce using rule 112 (PrimaryExpr -> Operand .)
    RSHIFT          reduce using rule 112 (PrimaryExpr -> Operand .)
    ADD             reduce using rule 112 (PrimaryExpr -> Operand .)
    SUB             reduce using rule 112 (PrimaryExpr -> Operand .)
    MULT            reduce using rule 112 (PrimaryExpr -> Operand .)
    AND             reduce using rule 112 (PrimaryExpr -> Operand .)
    COMMA           reduce using rule 112 (PrimaryExpr -> Operand .)
    SEMICOLON       reduce using rule 112 (PrimaryExpr -> Operand .)
    RIGHT_PARANTHESIS reduce using rule 112 (PrimaryExpr -> Operand .)
    RIGHT_BRACKET   reduce using rule 112 (PrimaryExpr -> Operand .)
    COLON           reduce using rule 112 (PrimaryExpr -> Operand .)
    INC             reduce using rule 112 (PrimaryExpr -> Operand .)
    DEC             reduce using rule 112 (PrimaryExpr -> Operand .)
    PLUS_ASSIGN     reduce using rule 112 (PrimaryExpr -> Operand .)
    MINUS_ASSIGN    reduce using rule 112 (PrimaryExpr -> Operand .)
    MULT_ASSIGN     reduce using rule 112 (PrimaryExpr -> Operand .)
    DIV_ASSIGN      reduce using rule 112 (PrimaryExpr -> Operand .)
    MOD_ASSIGN      reduce using rule 112 (PrimaryExpr -> Operand .)
    AND_ASSIGN      reduce using rule 112 (PrimaryExpr -> Operand .)
    OR_ASSIGN       reduce using rule 112 (PrimaryExpr -> Operand .)
    XOR_ASSIGN      reduce using rule 112 (PrimaryExpr -> Operand .)
    LSHIFT_ASSIGN   reduce using rule 112 (PrimaryExpr -> Operand .)
    RSHIFT_ASSIGN   reduce using rule 112 (PrimaryExpr -> Operand .)
    ASSIGN          reduce using rule 112 (PrimaryExpr -> Operand .)
    LEFT_BRACES     reduce using rule 112 (PrimaryExpr -> Operand .)


state 114

    (114) PrimaryExpr -> Conversion .

    LEFT_BRACKET    reduce using rule 114 (PrimaryExpr -> Conversion .)
    LEFT_PARANTHESIS reduce using rule 114 (PrimaryExpr -> Conversion .)
    DOT             reduce using rule 114 (PrimaryExpr -> Conversion .)
    LOG_OR          reduce using rule 114 (PrimaryExpr -> Conversion .)
    LOG_AND         reduce using rule 114 (PrimaryExpr -> Conversion .)
    EQ              reduce using rule 114 (PrimaryExpr -> Conversion .)
    NEQ             reduce using rule 114 (PrimaryExpr -> Conversion .)
    LT              reduce using rule 114 (PrimaryExpr -> Conversion .)
    GT              reduce using rule 114 (PrimaryExpr -> Conversion .)
    LEQ             reduce using rule 114 (PrimaryExpr -> Conversion .)
    GEQ             reduce using rule 114 (PrimaryExpr -> Conversion .)
    OR              reduce using rule 114 (PrimaryExpr -> Conversion .)
    XOR             reduce using rule 114 (PrimaryExpr -> Conversion .)
    DIV             reduce using rule 114 (PrimaryExpr -> Conversion .)
    MOD             reduce using rule 114 (PrimaryExpr -> Conversion .)
    LSHIFT          reduce using rule 114 (PrimaryExpr -> Conversion .)
    RSHIFT          reduce using rule 114 (PrimaryExpr -> Conversion .)
    ADD             reduce using rule 114 (PrimaryExpr -> Conversion .)
    SUB             reduce using rule 114 (PrimaryExpr -> Conversion .)
    MULT            reduce using rule 114 (PrimaryExpr -> Conversion .)
    AND             reduce using rule 114 (PrimaryExpr -> Conversion .)
    COMMA           reduce using rule 114 (PrimaryExpr -> Conversion .)
    SEMICOLON       reduce using rule 114 (PrimaryExpr -> Conversion .)
    RIGHT_PARANTHESIS reduce using rule 114 (PrimaryExpr -> Conversion .)
    RIGHT_BRACKET   reduce using rule 114 (PrimaryExpr -> Conversion .)
    COLON           reduce using rule 114 (PrimaryExpr -> Conversion .)
    INC             reduce using rule 114 (PrimaryExpr -> Conversion .)
    DEC             reduce using rule 114 (PrimaryExpr -> Conversion .)
    PLUS_ASSIGN     reduce using rule 114 (PrimaryExpr -> Conversion .)
    MINUS_ASSIGN    reduce using rule 114 (PrimaryExpr -> Conversion .)
    MULT_ASSIGN     reduce using rule 114 (PrimaryExpr -> Conversion .)
    DIV_ASSIGN      reduce using rule 114 (PrimaryExpr -> Conversion .)
    MOD_ASSIGN      reduce using rule 114 (PrimaryExpr -> Conversion .)
    AND_ASSIGN      reduce using rule 114 (PrimaryExpr -> Conversion .)
    OR_ASSIGN       reduce using rule 114 (PrimaryExpr -> Conversion .)
    XOR_ASSIGN      reduce using rule 114 (PrimaryExpr -> Conversion .)
    LSHIFT_ASSIGN   reduce using rule 114 (PrimaryExpr -> Conversion .)
    RSHIFT_ASSIGN   reduce using rule 114 (PrimaryExpr -> Conversion .)
    ASSIGN          reduce using rule 114 (PrimaryExpr -> Conversion .)
    LEFT_BRACES     reduce using rule 114 (PrimaryExpr -> Conversion .)


state 115

    (97) Operand -> LEFT_PARANTHESIS . Expression RIGHT_PARANTHESIS
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 188
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 116

    (150) UnaryOp -> ADD .

    NOT             reduce using rule 150 (UnaryOp -> ADD .)
    ADD             reduce using rule 150 (UnaryOp -> ADD .)
    SUB             reduce using rule 150 (UnaryOp -> ADD .)
    MULT            reduce using rule 150 (UnaryOp -> ADD .)
    AND             reduce using rule 150 (UnaryOp -> ADD .)
    LEFT_PARANTHESIS reduce using rule 150 (UnaryOp -> ADD .)
    TYPECAST        reduce using rule 150 (UnaryOp -> ADD .)
    IDENTIFIER      reduce using rule 150 (UnaryOp -> ADD .)
    INTEGER         reduce using rule 150 (UnaryOp -> ADD .)
    OCTAL           reduce using rule 150 (UnaryOp -> ADD .)
    HEX             reduce using rule 150 (UnaryOp -> ADD .)
    RUNE            reduce using rule 150 (UnaryOp -> ADD .)
    FLOAT           reduce using rule 150 (UnaryOp -> ADD .)
    IMAGINARY       reduce using rule 150 (UnaryOp -> ADD .)
    STRING          reduce using rule 150 (UnaryOp -> ADD .)


state 117

    (151) UnaryOp -> SUB .

    NOT             reduce using rule 151 (UnaryOp -> SUB .)
    ADD             reduce using rule 151 (UnaryOp -> SUB .)
    SUB             reduce using rule 151 (UnaryOp -> SUB .)
    MULT            reduce using rule 151 (UnaryOp -> SUB .)
    AND             reduce using rule 151 (UnaryOp -> SUB .)
    LEFT_PARANTHESIS reduce using rule 151 (UnaryOp -> SUB .)
    TYPECAST        reduce using rule 151 (UnaryOp -> SUB .)
    IDENTIFIER      reduce using rule 151 (UnaryOp -> SUB .)
    INTEGER         reduce using rule 151 (UnaryOp -> SUB .)
    OCTAL           reduce using rule 151 (UnaryOp -> SUB .)
    HEX             reduce using rule 151 (UnaryOp -> SUB .)
    RUNE            reduce using rule 151 (UnaryOp -> SUB .)
    FLOAT           reduce using rule 151 (UnaryOp -> SUB .)
    IMAGINARY       reduce using rule 151 (UnaryOp -> SUB .)
    STRING          reduce using rule 151 (UnaryOp -> SUB .)


state 118

    (152) UnaryOp -> MULT .

    NOT             reduce using rule 152 (UnaryOp -> MULT .)
    ADD             reduce using rule 152 (UnaryOp -> MULT .)
    SUB             reduce using rule 152 (UnaryOp -> MULT .)
    MULT            reduce using rule 152 (UnaryOp -> MULT .)
    AND             reduce using rule 152 (UnaryOp -> MULT .)
    LEFT_PARANTHESIS reduce using rule 152 (UnaryOp -> MULT .)
    TYPECAST        reduce using rule 152 (UnaryOp -> MULT .)
    IDENTIFIER      reduce using rule 152 (UnaryOp -> MULT .)
    INTEGER         reduce using rule 152 (UnaryOp -> MULT .)
    OCTAL           reduce using rule 152 (UnaryOp -> MULT .)
    HEX             reduce using rule 152 (UnaryOp -> MULT .)
    RUNE            reduce using rule 152 (UnaryOp -> MULT .)
    FLOAT           reduce using rule 152 (UnaryOp -> MULT .)
    IMAGINARY       reduce using rule 152 (UnaryOp -> MULT .)
    STRING          reduce using rule 152 (UnaryOp -> MULT .)


state 119

    (153) UnaryOp -> AND .

    NOT             reduce using rule 153 (UnaryOp -> AND .)
    ADD             reduce using rule 153 (UnaryOp -> AND .)
    SUB             reduce using rule 153 (UnaryOp -> AND .)
    MULT            reduce using rule 153 (UnaryOp -> AND .)
    AND             reduce using rule 153 (UnaryOp -> AND .)
    LEFT_PARANTHESIS reduce using rule 153 (UnaryOp -> AND .)
    TYPECAST        reduce using rule 153 (UnaryOp -> AND .)
    IDENTIFIER      reduce using rule 153 (UnaryOp -> AND .)
    INTEGER         reduce using rule 153 (UnaryOp -> AND .)
    OCTAL           reduce using rule 153 (UnaryOp -> AND .)
    HEX             reduce using rule 153 (UnaryOp -> AND .)
    RUNE            reduce using rule 153 (UnaryOp -> AND .)
    FLOAT           reduce using rule 153 (UnaryOp -> AND .)
    IMAGINARY       reduce using rule 153 (UnaryOp -> AND .)
    STRING          reduce using rule 153 (UnaryOp -> AND .)


state 120

    (95) Operand -> Literal .

    LEFT_BRACKET    reduce using rule 95 (Operand -> Literal .)
    LEFT_PARANTHESIS reduce using rule 95 (Operand -> Literal .)
    DOT             reduce using rule 95 (Operand -> Literal .)
    LOG_OR          reduce using rule 95 (Operand -> Literal .)
    LOG_AND         reduce using rule 95 (Operand -> Literal .)
    EQ              reduce using rule 95 (Operand -> Literal .)
    NEQ             reduce using rule 95 (Operand -> Literal .)
    LT              reduce using rule 95 (Operand -> Literal .)
    GT              reduce using rule 95 (Operand -> Literal .)
    LEQ             reduce using rule 95 (Operand -> Literal .)
    GEQ             reduce using rule 95 (Operand -> Literal .)
    OR              reduce using rule 95 (Operand -> Literal .)
    XOR             reduce using rule 95 (Operand -> Literal .)
    DIV             reduce using rule 95 (Operand -> Literal .)
    MOD             reduce using rule 95 (Operand -> Literal .)
    LSHIFT          reduce using rule 95 (Operand -> Literal .)
    RSHIFT          reduce using rule 95 (Operand -> Literal .)
    ADD             reduce using rule 95 (Operand -> Literal .)
    SUB             reduce using rule 95 (Operand -> Literal .)
    MULT            reduce using rule 95 (Operand -> Literal .)
    AND             reduce using rule 95 (Operand -> Literal .)
    COMMA           reduce using rule 95 (Operand -> Literal .)
    SEMICOLON       reduce using rule 95 (Operand -> Literal .)
    RIGHT_PARANTHESIS reduce using rule 95 (Operand -> Literal .)
    RIGHT_BRACKET   reduce using rule 95 (Operand -> Literal .)
    COLON           reduce using rule 95 (Operand -> Literal .)
    INC             reduce using rule 95 (Operand -> Literal .)
    DEC             reduce using rule 95 (Operand -> Literal .)
    PLUS_ASSIGN     reduce using rule 95 (Operand -> Literal .)
    MINUS_ASSIGN    reduce using rule 95 (Operand -> Literal .)
    MULT_ASSIGN     reduce using rule 95 (Operand -> Literal .)
    DIV_ASSIGN      reduce using rule 95 (Operand -> Literal .)
    MOD_ASSIGN      reduce using rule 95 (Operand -> Literal .)
    AND_ASSIGN      reduce using rule 95 (Operand -> Literal .)
    OR_ASSIGN       reduce using rule 95 (Operand -> Literal .)
    XOR_ASSIGN      reduce using rule 95 (Operand -> Literal .)
    LSHIFT_ASSIGN   reduce using rule 95 (Operand -> Literal .)
    RSHIFT_ASSIGN   reduce using rule 95 (Operand -> Literal .)
    ASSIGN          reduce using rule 95 (Operand -> Literal .)
    LEFT_BRACES     reduce using rule 95 (Operand -> Literal .)


state 121

    (96) Operand -> OperandName .

    LEFT_BRACKET    reduce using rule 96 (Operand -> OperandName .)
    LEFT_PARANTHESIS reduce using rule 96 (Operand -> OperandName .)
    DOT             reduce using rule 96 (Operand -> OperandName .)
    LOG_OR          reduce using rule 96 (Operand -> OperandName .)
    LOG_AND         reduce using rule 96 (Operand -> OperandName .)
    EQ              reduce using rule 96 (Operand -> OperandName .)
    NEQ             reduce using rule 96 (Operand -> OperandName .)
    LT              reduce using rule 96 (Operand -> OperandName .)
    GT              reduce using rule 96 (Operand -> OperandName .)
    LEQ             reduce using rule 96 (Operand -> OperandName .)
    GEQ             reduce using rule 96 (Operand -> OperandName .)
    OR              reduce using rule 96 (Operand -> OperandName .)
    XOR             reduce using rule 96 (Operand -> OperandName .)
    DIV             reduce using rule 96 (Operand -> OperandName .)
    MOD             reduce using rule 96 (Operand -> OperandName .)
    LSHIFT          reduce using rule 96 (Operand -> OperandName .)
    RSHIFT          reduce using rule 96 (Operand -> OperandName .)
    ADD             reduce using rule 96 (Operand -> OperandName .)
    SUB             reduce using rule 96 (Operand -> OperandName .)
    MULT            reduce using rule 96 (Operand -> OperandName .)
    AND             reduce using rule 96 (Operand -> OperandName .)
    COMMA           reduce using rule 96 (Operand -> OperandName .)
    SEMICOLON       reduce using rule 96 (Operand -> OperandName .)
    RIGHT_PARANTHESIS reduce using rule 96 (Operand -> OperandName .)
    RIGHT_BRACKET   reduce using rule 96 (Operand -> OperandName .)
    COLON           reduce using rule 96 (Operand -> OperandName .)
    INC             reduce using rule 96 (Operand -> OperandName .)
    DEC             reduce using rule 96 (Operand -> OperandName .)
    PLUS_ASSIGN     reduce using rule 96 (Operand -> OperandName .)
    MINUS_ASSIGN    reduce using rule 96 (Operand -> OperandName .)
    MULT_ASSIGN     reduce using rule 96 (Operand -> OperandName .)
    DIV_ASSIGN      reduce using rule 96 (Operand -> OperandName .)
    MOD_ASSIGN      reduce using rule 96 (Operand -> OperandName .)
    AND_ASSIGN      reduce using rule 96 (Operand -> OperandName .)
    OR_ASSIGN       reduce using rule 96 (Operand -> OperandName .)
    XOR_ASSIGN      reduce using rule 96 (Operand -> OperandName .)
    LSHIFT_ASSIGN   reduce using rule 96 (Operand -> OperandName .)
    RSHIFT_ASSIGN   reduce using rule 96 (Operand -> OperandName .)
    ASSIGN          reduce using rule 96 (Operand -> OperandName .)
    LEFT_BRACES     reduce using rule 96 (Operand -> OperandName .)


state 122

    (154) Conversion -> TYPECAST . Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 189
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 123

    (98) Literal -> BasicLit .

    LEFT_BRACKET    reduce using rule 98 (Literal -> BasicLit .)
    LEFT_PARANTHESIS reduce using rule 98 (Literal -> BasicLit .)
    DOT             reduce using rule 98 (Literal -> BasicLit .)
    LOG_OR          reduce using rule 98 (Literal -> BasicLit .)
    LOG_AND         reduce using rule 98 (Literal -> BasicLit .)
    EQ              reduce using rule 98 (Literal -> BasicLit .)
    NEQ             reduce using rule 98 (Literal -> BasicLit .)
    LT              reduce using rule 98 (Literal -> BasicLit .)
    GT              reduce using rule 98 (Literal -> BasicLit .)
    LEQ             reduce using rule 98 (Literal -> BasicLit .)
    GEQ             reduce using rule 98 (Literal -> BasicLit .)
    OR              reduce using rule 98 (Literal -> BasicLit .)
    XOR             reduce using rule 98 (Literal -> BasicLit .)
    DIV             reduce using rule 98 (Literal -> BasicLit .)
    MOD             reduce using rule 98 (Literal -> BasicLit .)
    LSHIFT          reduce using rule 98 (Literal -> BasicLit .)
    RSHIFT          reduce using rule 98 (Literal -> BasicLit .)
    ADD             reduce using rule 98 (Literal -> BasicLit .)
    SUB             reduce using rule 98 (Literal -> BasicLit .)
    MULT            reduce using rule 98 (Literal -> BasicLit .)
    AND             reduce using rule 98 (Literal -> BasicLit .)
    COMMA           reduce using rule 98 (Literal -> BasicLit .)
    SEMICOLON       reduce using rule 98 (Literal -> BasicLit .)
    RIGHT_PARANTHESIS reduce using rule 98 (Literal -> BasicLit .)
    RIGHT_BRACKET   reduce using rule 98 (Literal -> BasicLit .)
    COLON           reduce using rule 98 (Literal -> BasicLit .)
    INC             reduce using rule 98 (Literal -> BasicLit .)
    DEC             reduce using rule 98 (Literal -> BasicLit .)
    PLUS_ASSIGN     reduce using rule 98 (Literal -> BasicLit .)
    MINUS_ASSIGN    reduce using rule 98 (Literal -> BasicLit .)
    MULT_ASSIGN     reduce using rule 98 (Literal -> BasicLit .)
    DIV_ASSIGN      reduce using rule 98 (Literal -> BasicLit .)
    MOD_ASSIGN      reduce using rule 98 (Literal -> BasicLit .)
    AND_ASSIGN      reduce using rule 98 (Literal -> BasicLit .)
    OR_ASSIGN       reduce using rule 98 (Literal -> BasicLit .)
    XOR_ASSIGN      reduce using rule 98 (Literal -> BasicLit .)
    LSHIFT_ASSIGN   reduce using rule 98 (Literal -> BasicLit .)
    RSHIFT_ASSIGN   reduce using rule 98 (Literal -> BasicLit .)
    ASSIGN          reduce using rule 98 (Literal -> BasicLit .)
    LEFT_BRACES     reduce using rule 98 (Literal -> BasicLit .)


state 124

    (110) OperandName -> IDENTIFIER .

    LEFT_BRACKET    reduce using rule 110 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 110 (OperandName -> IDENTIFIER .)
    DOT             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 110 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 110 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 110 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 110 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 110 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 110 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 110 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 110 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 110 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 110 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 110 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 110 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 110 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 110 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 110 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 110 (OperandName -> IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 110 (OperandName -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 110 (OperandName -> IDENTIFIER .)
    COLON           reduce using rule 110 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 110 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 110 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 110 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 110 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 110 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 110 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 110 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 110 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 110 (OperandName -> IDENTIFIER .)
    LEFT_BRACES     reduce using rule 110 (OperandName -> IDENTIFIER .)


state 125

    (99) BasicLit -> I . INTEGER
    (100) BasicLit -> I . OCTAL
    (101) BasicLit -> I . HEX
    (104) BasicLit -> I . RUNE

    INTEGER         shift and go to state 190
    OCTAL           shift and go to state 191
    HEX             shift and go to state 192
    RUNE            shift and go to state 193


state 126

    (102) BasicLit -> F . FLOAT

    FLOAT           shift and go to state 194


state 127

    (103) BasicLit -> C . IMAGINARY

    IMAGINARY       shift and go to state 195


state 128

    (105) BasicLit -> S . STRING

    STRING          shift and go to state 196


state 129

    (248) ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 248 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    DOT             reduce using rule 248 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 248 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    STRING          reduce using rule 248 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)


state 130

    (87) FunctionDecl -> FUNC FunctionName CreateScope Function EndScope .

    SEMICOLON       reduce using rule 87 (FunctionDecl -> FUNC FunctionName CreateScope Function EndScope .)


state 131

    (88) FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope .

    SEMICOLON       reduce using rule 88 (FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope .)


state 132

    (93) Function -> Signature FunctionBody .

    SEMICOLON       reduce using rule 93 (Function -> Signature FunctionBody .)


state 133

    (94) FunctionBody -> Block .

    SEMICOLON       reduce using rule 94 (FunctionBody -> Block .)


state 134

    (49) Block -> LEFT_BRACES . StatementList RIGHT_BRACES
    (50) StatementList -> . StatementRep
    (51) StatementRep -> . StatementRep Statement SEMICOLON
    (52) StatementRep -> . epsilon
    (255) epsilon -> .

    RETURN          reduce using rule 255 (epsilon -> .)
    SCAN            reduce using rule 255 (epsilon -> .)
    BREAK           reduce using rule 255 (epsilon -> .)
    CONTINUE        reduce using rule 255 (epsilon -> .)
    GOTO            reduce using rule 255 (epsilon -> .)
    PRINT           reduce using rule 255 (epsilon -> .)
    IF              reduce using rule 255 (epsilon -> .)
    FOR             reduce using rule 255 (epsilon -> .)
    CONST           reduce using rule 255 (epsilon -> .)
    TYPE            reduce using rule 255 (epsilon -> .)
    VAR             reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)
    SWITCH          reduce using rule 255 (epsilon -> .)
    NOT             reduce using rule 255 (epsilon -> .)
    ADD             reduce using rule 255 (epsilon -> .)
    SUB             reduce using rule 255 (epsilon -> .)
    MULT            reduce using rule 255 (epsilon -> .)
    AND             reduce using rule 255 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    TYPECAST        reduce using rule 255 (epsilon -> .)
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    LEFT_BRACES     reduce using rule 255 (epsilon -> .)
    INTEGER         reduce using rule 255 (epsilon -> .)
    OCTAL           reduce using rule 255 (epsilon -> .)
    HEX             reduce using rule 255 (epsilon -> .)
    RUNE            reduce using rule 255 (epsilon -> .)
    FLOAT           reduce using rule 255 (epsilon -> .)
    IMAGINARY       reduce using rule 255 (epsilon -> .)
    STRING          reduce using rule 255 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 255 (epsilon -> .)

    StatementList                  shift and go to state 197
    StatementRep                   shift and go to state 198
    epsilon                        shift and go to state 199

state 135

    (35) Signature -> Parameters TypeOpt .

    LEFT_BRACES     reduce using rule 35 (Signature -> Parameters TypeOpt .)
    SEMICOLON       reduce using rule 35 (Signature -> Parameters TypeOpt .)


state 136

    (18) TypeOpt -> Type .

    LEFT_BRACES     reduce using rule 18 (TypeOpt -> Type .)
    SEMICOLON       reduce using rule 18 (TypeOpt -> Type .)


state 137

    (19) TypeOpt -> epsilon .

    LEFT_BRACES     reduce using rule 19 (TypeOpt -> epsilon .)
    SEMICOLON       reduce using rule 19 (TypeOpt -> epsilon .)


state 138

    (40) Parameters -> LEFT_PARANTHESIS ParameterListOpt . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 200


state 139

    (41) ParameterListOpt -> ParametersList .

    RIGHT_PARANTHESIS reduce using rule 41 (ParameterListOpt -> ParametersList .)


state 140

    (42) ParameterListOpt -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 42 (ParameterListOpt -> epsilon .)


state 141

    (43) ParametersList -> ParameterDecl .
    (46) ParameterDeclCommaRep -> ParameterDecl . COMMA ParameterDecl

    RIGHT_PARANTHESIS reduce using rule 43 (ParametersList -> ParameterDecl .)
    COMMA           shift and go to state 201


state 142

    (44) ParametersList -> ParameterDeclCommaRep .
    (45) ParameterDeclCommaRep -> ParameterDeclCommaRep . COMMA ParameterDecl

    RIGHT_PARANTHESIS reduce using rule 44 (ParametersList -> ParameterDeclCommaRep .)
    COMMA           shift and go to state 202


state 143

    (47) ParameterDecl -> IdentifierList . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 203
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 144

    (48) ParameterDecl -> Type .

    COMMA           reduce using rule 48 (ParameterDecl -> Type .)
    RIGHT_PARANTHESIS reduce using rule 48 (ParameterDecl -> Type .)


state 145

    (65) IdentifierList -> IDENTIFIER . IdentifierRep
    (111) QualifiedIdent -> IDENTIFIER . DOT TypeName
    (66) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (67) IdentifierRep -> . epsilon
    (255) epsilon -> .

    DOT             shift and go to state 93
    COMMA           reduce using rule 255 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    INT_T           reduce using rule 255 (epsilon -> .)
    FLOAT_T         reduce using rule 255 (epsilon -> .)
    UINT_T          reduce using rule 255 (epsilon -> .)
    COMPLEX_T       reduce using rule 255 (epsilon -> .)
    RUNE_T          reduce using rule 255 (epsilon -> .)
    BOOL_T          reduce using rule 255 (epsilon -> .)
    STRING_T        reduce using rule 255 (epsilon -> .)
    TYPE            reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)
    LEFT_BRACKET    reduce using rule 255 (epsilon -> .)
    MULT            reduce using rule 255 (epsilon -> .)
    STRUCT          reduce using rule 255 (epsilon -> .)

    IdentifierRep                  shift and go to state 73
    epsilon                        shift and go to state 74

state 146

    (60) ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 60 (ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 60 (ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .)


state 147

    (62) ConstSpec -> IdentifierList Type ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 62 (ConstSpec -> IdentifierList Type ASSIGN ExpressionList .)


state 148

    (4) Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .

    ASSIGN          reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COLON           reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)


state 149

    (111) QualifiedIdent -> IDENTIFIER DOT TypeName .

    ASSIGN          reduce using rule 111 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    SEMICOLON       reduce using rule 111 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    RIGHT_PARANTHESIS reduce using rule 111 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    LEFT_BRACES     reduce using rule 111 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    COMMA           reduce using rule 111 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    LEFT_PARANTHESIS reduce using rule 111 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    COLON           reduce using rule 111 (QualifiedIdent -> IDENTIFIER DOT TypeName .)


state 150

    (20) ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET . ElementType
    (25) ElementType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    ElementType                    shift and go to state 204
    Type                           shift and go to state 205
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 151

    (21) ArrayLength -> I INTEGER .

    RIGHT_BRACKET   reduce using rule 21 (ArrayLength -> I INTEGER .)


state 152

    (22) ArrayLength -> I OCTAL .

    RIGHT_BRACKET   reduce using rule 22 (ArrayLength -> I OCTAL .)


state 153

    (23) ArrayLength -> I HEX .

    RIGHT_BRACKET   reduce using rule 23 (ArrayLength -> I HEX .)


state 154

    (24) ArrayLength -> I RUNE .

    RIGHT_BRACKET   reduce using rule 24 (ArrayLength -> I RUNE .)


state 155

    (26) StructType -> CreateFuncScope STRUCT LEFT_BRACES . FieldDeclRep RIGHT_BRACES EndScope
    (27) FieldDeclRep -> . FieldDeclRep FieldDecl SEMICOLON
    (28) FieldDeclRep -> . epsilon
    (255) epsilon -> .

    RIGHT_BRACES    reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)

    FieldDeclRep                   shift and go to state 206
    epsilon                        shift and go to state 207

state 156

    (66) IdentifierRep -> IdentifierRep COMMA IDENTIFIER .

    COMMA           reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    INT_T           reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    FLOAT_T         reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    UINT_T          reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    COMPLEX_T       reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    RUNE_T          reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    BOOL_T          reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    STRING_T        reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    TYPE            reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    MULT            reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    STRUCT          reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    ASSIGN          reduce using rule 66 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)


state 157

    (73) TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 73 (TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 73 (TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .)


state 158

    (80) VarSpecRep -> VarSpecRep VarSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 80 (VarSpecRep -> VarSpecRep VarSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 80 (VarSpecRep -> VarSpecRep VarSpec SEMICOLON .)


state 159

    (84) ExpressionListOpt -> ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 84 (ExpressionListOpt -> ASSIGN ExpressionList .)


state 160

    (68) ExpressionList -> Expression ExpressionRep .
    (69) ExpressionRep -> ExpressionRep . COMMA Expression

    SEMICOLON       reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    RIGHT_PARANTHESIS reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    PLUS_ASSIGN     reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    MINUS_ASSIGN    reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    MULT_ASSIGN     reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    DIV_ASSIGN      reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    MOD_ASSIGN      reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    AND_ASSIGN      reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    OR_ASSIGN       reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    XOR_ASSIGN      reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    LSHIFT_ASSIGN   reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    RSHIFT_ASSIGN   reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    ASSIGN          reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    LEFT_BRACES     reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    COLON           reduce using rule 68 (ExpressionList -> Expression ExpressionRep .)
    COMMA           shift and go to state 208


state 161

    (127) Expression -> Expression BinaryOp . Expression
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 209
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 162

    (70) ExpressionRep -> epsilon .

    COMMA           reduce using rule 70 (ExpressionRep -> epsilon .)
    SEMICOLON       reduce using rule 70 (ExpressionRep -> epsilon .)
    RIGHT_PARANTHESIS reduce using rule 70 (ExpressionRep -> epsilon .)
    LEFT_BRACES     reduce using rule 70 (ExpressionRep -> epsilon .)
    COLON           reduce using rule 70 (ExpressionRep -> epsilon .)
    PLUS_ASSIGN     reduce using rule 70 (ExpressionRep -> epsilon .)
    MINUS_ASSIGN    reduce using rule 70 (ExpressionRep -> epsilon .)
    MULT_ASSIGN     reduce using rule 70 (ExpressionRep -> epsilon .)
    DIV_ASSIGN      reduce using rule 70 (ExpressionRep -> epsilon .)
    MOD_ASSIGN      reduce using rule 70 (ExpressionRep -> epsilon .)
    AND_ASSIGN      reduce using rule 70 (ExpressionRep -> epsilon .)
    OR_ASSIGN       reduce using rule 70 (ExpressionRep -> epsilon .)
    XOR_ASSIGN      reduce using rule 70 (ExpressionRep -> epsilon .)
    LSHIFT_ASSIGN   reduce using rule 70 (ExpressionRep -> epsilon .)
    RSHIFT_ASSIGN   reduce using rule 70 (ExpressionRep -> epsilon .)
    ASSIGN          reduce using rule 70 (ExpressionRep -> epsilon .)


state 163

    (133) BinaryOp -> LOG_OR .

    NOT             reduce using rule 133 (BinaryOp -> LOG_OR .)
    ADD             reduce using rule 133 (BinaryOp -> LOG_OR .)
    SUB             reduce using rule 133 (BinaryOp -> LOG_OR .)
    MULT            reduce using rule 133 (BinaryOp -> LOG_OR .)
    AND             reduce using rule 133 (BinaryOp -> LOG_OR .)
    LEFT_PARANTHESIS reduce using rule 133 (BinaryOp -> LOG_OR .)
    TYPECAST        reduce using rule 133 (BinaryOp -> LOG_OR .)
    IDENTIFIER      reduce using rule 133 (BinaryOp -> LOG_OR .)
    INTEGER         reduce using rule 133 (BinaryOp -> LOG_OR .)
    OCTAL           reduce using rule 133 (BinaryOp -> LOG_OR .)
    HEX             reduce using rule 133 (BinaryOp -> LOG_OR .)
    RUNE            reduce using rule 133 (BinaryOp -> LOG_OR .)
    FLOAT           reduce using rule 133 (BinaryOp -> LOG_OR .)
    IMAGINARY       reduce using rule 133 (BinaryOp -> LOG_OR .)
    STRING          reduce using rule 133 (BinaryOp -> LOG_OR .)


state 164

    (134) BinaryOp -> LOG_AND .

    NOT             reduce using rule 134 (BinaryOp -> LOG_AND .)
    ADD             reduce using rule 134 (BinaryOp -> LOG_AND .)
    SUB             reduce using rule 134 (BinaryOp -> LOG_AND .)
    MULT            reduce using rule 134 (BinaryOp -> LOG_AND .)
    AND             reduce using rule 134 (BinaryOp -> LOG_AND .)
    LEFT_PARANTHESIS reduce using rule 134 (BinaryOp -> LOG_AND .)
    TYPECAST        reduce using rule 134 (BinaryOp -> LOG_AND .)
    IDENTIFIER      reduce using rule 134 (BinaryOp -> LOG_AND .)
    INTEGER         reduce using rule 134 (BinaryOp -> LOG_AND .)
    OCTAL           reduce using rule 134 (BinaryOp -> LOG_AND .)
    HEX             reduce using rule 134 (BinaryOp -> LOG_AND .)
    RUNE            reduce using rule 134 (BinaryOp -> LOG_AND .)
    FLOAT           reduce using rule 134 (BinaryOp -> LOG_AND .)
    IMAGINARY       reduce using rule 134 (BinaryOp -> LOG_AND .)
    STRING          reduce using rule 134 (BinaryOp -> LOG_AND .)


state 165

    (135) BinaryOp -> RelOp .

    NOT             reduce using rule 135 (BinaryOp -> RelOp .)
    ADD             reduce using rule 135 (BinaryOp -> RelOp .)
    SUB             reduce using rule 135 (BinaryOp -> RelOp .)
    MULT            reduce using rule 135 (BinaryOp -> RelOp .)
    AND             reduce using rule 135 (BinaryOp -> RelOp .)
    LEFT_PARANTHESIS reduce using rule 135 (BinaryOp -> RelOp .)
    TYPECAST        reduce using rule 135 (BinaryOp -> RelOp .)
    IDENTIFIER      reduce using rule 135 (BinaryOp -> RelOp .)
    INTEGER         reduce using rule 135 (BinaryOp -> RelOp .)
    OCTAL           reduce using rule 135 (BinaryOp -> RelOp .)
    HEX             reduce using rule 135 (BinaryOp -> RelOp .)
    RUNE            reduce using rule 135 (BinaryOp -> RelOp .)
    FLOAT           reduce using rule 135 (BinaryOp -> RelOp .)
    IMAGINARY       reduce using rule 135 (BinaryOp -> RelOp .)
    STRING          reduce using rule 135 (BinaryOp -> RelOp .)


state 166

    (136) BinaryOp -> AddMulOp .

    NOT             reduce using rule 136 (BinaryOp -> AddMulOp .)
    ADD             reduce using rule 136 (BinaryOp -> AddMulOp .)
    SUB             reduce using rule 136 (BinaryOp -> AddMulOp .)
    MULT            reduce using rule 136 (BinaryOp -> AddMulOp .)
    AND             reduce using rule 136 (BinaryOp -> AddMulOp .)
    LEFT_PARANTHESIS reduce using rule 136 (BinaryOp -> AddMulOp .)
    TYPECAST        reduce using rule 136 (BinaryOp -> AddMulOp .)
    IDENTIFIER      reduce using rule 136 (BinaryOp -> AddMulOp .)
    INTEGER         reduce using rule 136 (BinaryOp -> AddMulOp .)
    OCTAL           reduce using rule 136 (BinaryOp -> AddMulOp .)
    HEX             reduce using rule 136 (BinaryOp -> AddMulOp .)
    RUNE            reduce using rule 136 (BinaryOp -> AddMulOp .)
    FLOAT           reduce using rule 136 (BinaryOp -> AddMulOp .)
    IMAGINARY       reduce using rule 136 (BinaryOp -> AddMulOp .)
    STRING          reduce using rule 136 (BinaryOp -> AddMulOp .)


state 167

    (137) RelOp -> EQ .

    NOT             reduce using rule 137 (RelOp -> EQ .)
    ADD             reduce using rule 137 (RelOp -> EQ .)
    SUB             reduce using rule 137 (RelOp -> EQ .)
    MULT            reduce using rule 137 (RelOp -> EQ .)
    AND             reduce using rule 137 (RelOp -> EQ .)
    LEFT_PARANTHESIS reduce using rule 137 (RelOp -> EQ .)
    TYPECAST        reduce using rule 137 (RelOp -> EQ .)
    IDENTIFIER      reduce using rule 137 (RelOp -> EQ .)
    INTEGER         reduce using rule 137 (RelOp -> EQ .)
    OCTAL           reduce using rule 137 (RelOp -> EQ .)
    HEX             reduce using rule 137 (RelOp -> EQ .)
    RUNE            reduce using rule 137 (RelOp -> EQ .)
    FLOAT           reduce using rule 137 (RelOp -> EQ .)
    IMAGINARY       reduce using rule 137 (RelOp -> EQ .)
    STRING          reduce using rule 137 (RelOp -> EQ .)


state 168

    (138) RelOp -> NEQ .

    NOT             reduce using rule 138 (RelOp -> NEQ .)
    ADD             reduce using rule 138 (RelOp -> NEQ .)
    SUB             reduce using rule 138 (RelOp -> NEQ .)
    MULT            reduce using rule 138 (RelOp -> NEQ .)
    AND             reduce using rule 138 (RelOp -> NEQ .)
    LEFT_PARANTHESIS reduce using rule 138 (RelOp -> NEQ .)
    TYPECAST        reduce using rule 138 (RelOp -> NEQ .)
    IDENTIFIER      reduce using rule 138 (RelOp -> NEQ .)
    INTEGER         reduce using rule 138 (RelOp -> NEQ .)
    OCTAL           reduce using rule 138 (RelOp -> NEQ .)
    HEX             reduce using rule 138 (RelOp -> NEQ .)
    RUNE            reduce using rule 138 (RelOp -> NEQ .)
    FLOAT           reduce using rule 138 (RelOp -> NEQ .)
    IMAGINARY       reduce using rule 138 (RelOp -> NEQ .)
    STRING          reduce using rule 138 (RelOp -> NEQ .)


state 169

    (139) RelOp -> LT .

    NOT             reduce using rule 139 (RelOp -> LT .)
    ADD             reduce using rule 139 (RelOp -> LT .)
    SUB             reduce using rule 139 (RelOp -> LT .)
    MULT            reduce using rule 139 (RelOp -> LT .)
    AND             reduce using rule 139 (RelOp -> LT .)
    LEFT_PARANTHESIS reduce using rule 139 (RelOp -> LT .)
    TYPECAST        reduce using rule 139 (RelOp -> LT .)
    IDENTIFIER      reduce using rule 139 (RelOp -> LT .)
    INTEGER         reduce using rule 139 (RelOp -> LT .)
    OCTAL           reduce using rule 139 (RelOp -> LT .)
    HEX             reduce using rule 139 (RelOp -> LT .)
    RUNE            reduce using rule 139 (RelOp -> LT .)
    FLOAT           reduce using rule 139 (RelOp -> LT .)
    IMAGINARY       reduce using rule 139 (RelOp -> LT .)
    STRING          reduce using rule 139 (RelOp -> LT .)


state 170

    (140) RelOp -> GT .

    NOT             reduce using rule 140 (RelOp -> GT .)
    ADD             reduce using rule 140 (RelOp -> GT .)
    SUB             reduce using rule 140 (RelOp -> GT .)
    MULT            reduce using rule 140 (RelOp -> GT .)
    AND             reduce using rule 140 (RelOp -> GT .)
    LEFT_PARANTHESIS reduce using rule 140 (RelOp -> GT .)
    TYPECAST        reduce using rule 140 (RelOp -> GT .)
    IDENTIFIER      reduce using rule 140 (RelOp -> GT .)
    INTEGER         reduce using rule 140 (RelOp -> GT .)
    OCTAL           reduce using rule 140 (RelOp -> GT .)
    HEX             reduce using rule 140 (RelOp -> GT .)
    RUNE            reduce using rule 140 (RelOp -> GT .)
    FLOAT           reduce using rule 140 (RelOp -> GT .)
    IMAGINARY       reduce using rule 140 (RelOp -> GT .)
    STRING          reduce using rule 140 (RelOp -> GT .)


state 171

    (141) RelOp -> LEQ .

    NOT             reduce using rule 141 (RelOp -> LEQ .)
    ADD             reduce using rule 141 (RelOp -> LEQ .)
    SUB             reduce using rule 141 (RelOp -> LEQ .)
    MULT            reduce using rule 141 (RelOp -> LEQ .)
    AND             reduce using rule 141 (RelOp -> LEQ .)
    LEFT_PARANTHESIS reduce using rule 141 (RelOp -> LEQ .)
    TYPECAST        reduce using rule 141 (RelOp -> LEQ .)
    IDENTIFIER      reduce using rule 141 (RelOp -> LEQ .)
    INTEGER         reduce using rule 141 (RelOp -> LEQ .)
    OCTAL           reduce using rule 141 (RelOp -> LEQ .)
    HEX             reduce using rule 141 (RelOp -> LEQ .)
    RUNE            reduce using rule 141 (RelOp -> LEQ .)
    FLOAT           reduce using rule 141 (RelOp -> LEQ .)
    IMAGINARY       reduce using rule 141 (RelOp -> LEQ .)
    STRING          reduce using rule 141 (RelOp -> LEQ .)


state 172

    (142) RelOp -> GEQ .

    NOT             reduce using rule 142 (RelOp -> GEQ .)
    ADD             reduce using rule 142 (RelOp -> GEQ .)
    SUB             reduce using rule 142 (RelOp -> GEQ .)
    MULT            reduce using rule 142 (RelOp -> GEQ .)
    AND             reduce using rule 142 (RelOp -> GEQ .)
    LEFT_PARANTHESIS reduce using rule 142 (RelOp -> GEQ .)
    TYPECAST        reduce using rule 142 (RelOp -> GEQ .)
    IDENTIFIER      reduce using rule 142 (RelOp -> GEQ .)
    INTEGER         reduce using rule 142 (RelOp -> GEQ .)
    OCTAL           reduce using rule 142 (RelOp -> GEQ .)
    HEX             reduce using rule 142 (RelOp -> GEQ .)
    RUNE            reduce using rule 142 (RelOp -> GEQ .)
    FLOAT           reduce using rule 142 (RelOp -> GEQ .)
    IMAGINARY       reduce using rule 142 (RelOp -> GEQ .)
    STRING          reduce using rule 142 (RelOp -> GEQ .)


state 173

    (143) AddMulOp -> UnaryOp .

    NOT             reduce using rule 143 (AddMulOp -> UnaryOp .)
    ADD             reduce using rule 143 (AddMulOp -> UnaryOp .)
    SUB             reduce using rule 143 (AddMulOp -> UnaryOp .)
    MULT            reduce using rule 143 (AddMulOp -> UnaryOp .)
    AND             reduce using rule 143 (AddMulOp -> UnaryOp .)
    LEFT_PARANTHESIS reduce using rule 143 (AddMulOp -> UnaryOp .)
    TYPECAST        reduce using rule 143 (AddMulOp -> UnaryOp .)
    IDENTIFIER      reduce using rule 143 (AddMulOp -> UnaryOp .)
    INTEGER         reduce using rule 143 (AddMulOp -> UnaryOp .)
    OCTAL           reduce using rule 143 (AddMulOp -> UnaryOp .)
    HEX             reduce using rule 143 (AddMulOp -> UnaryOp .)
    RUNE            reduce using rule 143 (AddMulOp -> UnaryOp .)
    FLOAT           reduce using rule 143 (AddMulOp -> UnaryOp .)
    IMAGINARY       reduce using rule 143 (AddMulOp -> UnaryOp .)
    STRING          reduce using rule 143 (AddMulOp -> UnaryOp .)


state 174

    (144) AddMulOp -> OR .

    NOT             reduce using rule 144 (AddMulOp -> OR .)
    ADD             reduce using rule 144 (AddMulOp -> OR .)
    SUB             reduce using rule 144 (AddMulOp -> OR .)
    MULT            reduce using rule 144 (AddMulOp -> OR .)
    AND             reduce using rule 144 (AddMulOp -> OR .)
    LEFT_PARANTHESIS reduce using rule 144 (AddMulOp -> OR .)
    TYPECAST        reduce using rule 144 (AddMulOp -> OR .)
    IDENTIFIER      reduce using rule 144 (AddMulOp -> OR .)
    INTEGER         reduce using rule 144 (AddMulOp -> OR .)
    OCTAL           reduce using rule 144 (AddMulOp -> OR .)
    HEX             reduce using rule 144 (AddMulOp -> OR .)
    RUNE            reduce using rule 144 (AddMulOp -> OR .)
    FLOAT           reduce using rule 144 (AddMulOp -> OR .)
    IMAGINARY       reduce using rule 144 (AddMulOp -> OR .)
    STRING          reduce using rule 144 (AddMulOp -> OR .)


state 175

    (145) AddMulOp -> XOR .

    NOT             reduce using rule 145 (AddMulOp -> XOR .)
    ADD             reduce using rule 145 (AddMulOp -> XOR .)
    SUB             reduce using rule 145 (AddMulOp -> XOR .)
    MULT            reduce using rule 145 (AddMulOp -> XOR .)
    AND             reduce using rule 145 (AddMulOp -> XOR .)
    LEFT_PARANTHESIS reduce using rule 145 (AddMulOp -> XOR .)
    TYPECAST        reduce using rule 145 (AddMulOp -> XOR .)
    IDENTIFIER      reduce using rule 145 (AddMulOp -> XOR .)
    INTEGER         reduce using rule 145 (AddMulOp -> XOR .)
    OCTAL           reduce using rule 145 (AddMulOp -> XOR .)
    HEX             reduce using rule 145 (AddMulOp -> XOR .)
    RUNE            reduce using rule 145 (AddMulOp -> XOR .)
    FLOAT           reduce using rule 145 (AddMulOp -> XOR .)
    IMAGINARY       reduce using rule 145 (AddMulOp -> XOR .)
    STRING          reduce using rule 145 (AddMulOp -> XOR .)


state 176

    (146) AddMulOp -> DIV .

    NOT             reduce using rule 146 (AddMulOp -> DIV .)
    ADD             reduce using rule 146 (AddMulOp -> DIV .)
    SUB             reduce using rule 146 (AddMulOp -> DIV .)
    MULT            reduce using rule 146 (AddMulOp -> DIV .)
    AND             reduce using rule 146 (AddMulOp -> DIV .)
    LEFT_PARANTHESIS reduce using rule 146 (AddMulOp -> DIV .)
    TYPECAST        reduce using rule 146 (AddMulOp -> DIV .)
    IDENTIFIER      reduce using rule 146 (AddMulOp -> DIV .)
    INTEGER         reduce using rule 146 (AddMulOp -> DIV .)
    OCTAL           reduce using rule 146 (AddMulOp -> DIV .)
    HEX             reduce using rule 146 (AddMulOp -> DIV .)
    RUNE            reduce using rule 146 (AddMulOp -> DIV .)
    FLOAT           reduce using rule 146 (AddMulOp -> DIV .)
    IMAGINARY       reduce using rule 146 (AddMulOp -> DIV .)
    STRING          reduce using rule 146 (AddMulOp -> DIV .)


state 177

    (147) AddMulOp -> MOD .

    NOT             reduce using rule 147 (AddMulOp -> MOD .)
    ADD             reduce using rule 147 (AddMulOp -> MOD .)
    SUB             reduce using rule 147 (AddMulOp -> MOD .)
    MULT            reduce using rule 147 (AddMulOp -> MOD .)
    AND             reduce using rule 147 (AddMulOp -> MOD .)
    LEFT_PARANTHESIS reduce using rule 147 (AddMulOp -> MOD .)
    TYPECAST        reduce using rule 147 (AddMulOp -> MOD .)
    IDENTIFIER      reduce using rule 147 (AddMulOp -> MOD .)
    INTEGER         reduce using rule 147 (AddMulOp -> MOD .)
    OCTAL           reduce using rule 147 (AddMulOp -> MOD .)
    HEX             reduce using rule 147 (AddMulOp -> MOD .)
    RUNE            reduce using rule 147 (AddMulOp -> MOD .)
    FLOAT           reduce using rule 147 (AddMulOp -> MOD .)
    IMAGINARY       reduce using rule 147 (AddMulOp -> MOD .)
    STRING          reduce using rule 147 (AddMulOp -> MOD .)


state 178

    (148) AddMulOp -> LSHIFT .

    NOT             reduce using rule 148 (AddMulOp -> LSHIFT .)
    ADD             reduce using rule 148 (AddMulOp -> LSHIFT .)
    SUB             reduce using rule 148 (AddMulOp -> LSHIFT .)
    MULT            reduce using rule 148 (AddMulOp -> LSHIFT .)
    AND             reduce using rule 148 (AddMulOp -> LSHIFT .)
    LEFT_PARANTHESIS reduce using rule 148 (AddMulOp -> LSHIFT .)
    TYPECAST        reduce using rule 148 (AddMulOp -> LSHIFT .)
    IDENTIFIER      reduce using rule 148 (AddMulOp -> LSHIFT .)
    INTEGER         reduce using rule 148 (AddMulOp -> LSHIFT .)
    OCTAL           reduce using rule 148 (AddMulOp -> LSHIFT .)
    HEX             reduce using rule 148 (AddMulOp -> LSHIFT .)
    RUNE            reduce using rule 148 (AddMulOp -> LSHIFT .)
    FLOAT           reduce using rule 148 (AddMulOp -> LSHIFT .)
    IMAGINARY       reduce using rule 148 (AddMulOp -> LSHIFT .)
    STRING          reduce using rule 148 (AddMulOp -> LSHIFT .)


state 179

    (149) AddMulOp -> RSHIFT .

    NOT             reduce using rule 149 (AddMulOp -> RSHIFT .)
    ADD             reduce using rule 149 (AddMulOp -> RSHIFT .)
    SUB             reduce using rule 149 (AddMulOp -> RSHIFT .)
    MULT            reduce using rule 149 (AddMulOp -> RSHIFT .)
    AND             reduce using rule 149 (AddMulOp -> RSHIFT .)
    LEFT_PARANTHESIS reduce using rule 149 (AddMulOp -> RSHIFT .)
    TYPECAST        reduce using rule 149 (AddMulOp -> RSHIFT .)
    IDENTIFIER      reduce using rule 149 (AddMulOp -> RSHIFT .)
    INTEGER         reduce using rule 149 (AddMulOp -> RSHIFT .)
    OCTAL           reduce using rule 149 (AddMulOp -> RSHIFT .)
    HEX             reduce using rule 149 (AddMulOp -> RSHIFT .)
    RUNE            reduce using rule 149 (AddMulOp -> RSHIFT .)
    FLOAT           reduce using rule 149 (AddMulOp -> RSHIFT .)
    IMAGINARY       reduce using rule 149 (AddMulOp -> RSHIFT .)
    STRING          reduce using rule 149 (AddMulOp -> RSHIFT .)


state 180

    (113) PrimaryExpr -> PrimaryExpr Selector .

    LEFT_BRACKET    reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    LEFT_PARANTHESIS reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    DOT             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    LOG_OR          reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    LOG_AND         reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    EQ              reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    NEQ             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    LT              reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    GT              reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    LEQ             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    GEQ             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    OR              reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    XOR             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    DIV             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT          reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT          reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    ADD             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    SUB             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    MULT            reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    AND             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    COMMA           reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    SEMICOLON       reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    RIGHT_PARANTHESIS reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    RIGHT_BRACKET   reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    COLON           reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    INC             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    DEC             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS_ASSIGN     reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS_ASSIGN    reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    MULT_ASSIGN     reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    DIV_ASSIGN      reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD_ASSIGN      reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    AND_ASSIGN      reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    OR_ASSIGN       reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    XOR_ASSIGN      reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT_ASSIGN   reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT_ASSIGN   reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    ASSIGN          reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)
    LEFT_BRACES     reduce using rule 113 (PrimaryExpr -> PrimaryExpr Selector .)


state 181

    (115) PrimaryExpr -> PrimaryExpr LEFT_BRACKET . Expression RIGHT_BRACKET
    (121) Slice -> LEFT_BRACKET . ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (122) Slice -> LEFT_BRACKET . ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (128) ExpressionOpt -> . Expression
    (129) ExpressionOpt -> . epsilon
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (255) epsilon -> .
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    COLON           reduce using rule 255 (epsilon -> .)
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    PrimaryExpr                    shift and go to state 110
    Expression                     shift and go to state 210
    ExpressionOpt                  shift and go to state 211
    UnaryExpr                      shift and go to state 109
    epsilon                        shift and go to state 212
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 182

    (116) PrimaryExpr -> PrimaryExpr Slice .

    LEFT_BRACKET    reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    LEFT_PARANTHESIS reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    DOT             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    LOG_OR          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    LOG_AND         reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    EQ              reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    NEQ             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    LT              reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    GT              reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    LEQ             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    GEQ             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    OR              reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    XOR             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    DIV             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    MOD             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    LSHIFT          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    RSHIFT          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    ADD             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    SUB             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    MULT            reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    AND             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    COMMA           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    SEMICOLON       reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    RIGHT_PARANTHESIS reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    RIGHT_BRACKET   reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    COLON           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    INC             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    DEC             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    PLUS_ASSIGN     reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    MINUS_ASSIGN    reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    MULT_ASSIGN     reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    DIV_ASSIGN      reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    MOD_ASSIGN      reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    AND_ASSIGN      reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    OR_ASSIGN       reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    XOR_ASSIGN      reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    LSHIFT_ASSIGN   reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    RSHIFT_ASSIGN   reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    ASSIGN          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)
    LEFT_BRACES     reduce using rule 116 (PrimaryExpr -> PrimaryExpr Slice .)


state 183

    (117) PrimaryExpr -> PrimaryExpr TypeAssertion .

    LEFT_BRACKET    reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEFT_PARANTHESIS reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DOT             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LOG_OR          reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LOG_AND         reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    EQ              reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    NEQ             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LT              reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GT              reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEQ             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GEQ             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OR              reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    XOR             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DIV             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MOD             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LSHIFT          reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RSHIFT          reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    ADD             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    SUB             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MULT            reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AND             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    COMMA           reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    SEMICOLON       reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RIGHT_PARANTHESIS reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RIGHT_BRACKET   reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    COLON           reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    INC             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DEC             reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    PLUS_ASSIGN     reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MINUS_ASSIGN    reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MULT_ASSIGN     reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DIV_ASSIGN      reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MOD_ASSIGN      reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AND_ASSIGN      reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OR_ASSIGN       reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    XOR_ASSIGN      reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LSHIFT_ASSIGN   reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RSHIFT_ASSIGN   reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    ASSIGN          reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEFT_BRACES     reduce using rule 117 (PrimaryExpr -> PrimaryExpr TypeAssertion .)


state 184

    (118) PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS . ExpressionListTypeOpt RIGHT_PARANTHESIS
    (124) ExpressionListTypeOpt -> . ExpressionList
    (125) ExpressionListTypeOpt -> . epsilon
    (68) ExpressionList -> . Expression ExpressionRep
    (255) epsilon -> .
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    RIGHT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    PrimaryExpr                    shift and go to state 110
    ExpressionListTypeOpt          shift and go to state 213
    ExpressionList                 shift and go to state 214
    epsilon                        shift and go to state 215
    Expression                     shift and go to state 108
    UnaryExpr                      shift and go to state 109
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 185

    (119) Selector -> DOT . IDENTIFIER
    (123) TypeAssertion -> DOT . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    IDENTIFIER      shift and go to state 216
    LEFT_PARANTHESIS shift and go to state 217


state 186

    (131) UnaryExpr -> UnaryOp UnaryExpr .

    LOG_OR          reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    LOG_AND         reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    EQ              reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    NEQ             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    LT              reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    GT              reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    LEQ             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    GEQ             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR              reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    XOR             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIV             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    LSHIFT          reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSHIFT          reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    ADD             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    SUB             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    MULT            reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    AND             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    COMMA           reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    SEMICOLON       reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    COLON           reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    INC             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    DEC             reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    MULT_ASSIGN     reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIV_ASSIGN      reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD_ASSIGN      reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    AND_ASSIGN      reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR_ASSIGN       reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    XOR_ASSIGN      reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    ASSIGN          reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)
    LEFT_BRACES     reduce using rule 131 (UnaryExpr -> UnaryOp UnaryExpr .)


state 187

    (132) UnaryExpr -> NOT UnaryExpr .

    LOG_OR          reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    LOG_AND         reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    EQ              reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    NEQ             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    LT              reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    GT              reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    LEQ             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    GEQ             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    OR              reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    XOR             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    DIV             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    MOD             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    LSHIFT          reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    RSHIFT          reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    ADD             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    SUB             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    MULT            reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    AND             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    COMMA           reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    SEMICOLON       reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    COLON           reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    INC             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    DEC             reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    MULT_ASSIGN     reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    DIV_ASSIGN      reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    MOD_ASSIGN      reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    AND_ASSIGN      reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    OR_ASSIGN       reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    XOR_ASSIGN      reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    ASSIGN          reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)
    LEFT_BRACES     reduce using rule 132 (UnaryExpr -> NOT UnaryExpr .)


state 188

    (97) Operand -> LEFT_PARANTHESIS Expression . RIGHT_PARANTHESIS
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    RIGHT_PARANTHESIS shift and go to state 218
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 189

    (154) Conversion -> TYPECAST Type . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 219


state 190

    (99) BasicLit -> I INTEGER .

    LEFT_BRACKET    reduce using rule 99 (BasicLit -> I INTEGER .)
    LEFT_PARANTHESIS reduce using rule 99 (BasicLit -> I INTEGER .)
    DOT             reduce using rule 99 (BasicLit -> I INTEGER .)
    LOG_OR          reduce using rule 99 (BasicLit -> I INTEGER .)
    LOG_AND         reduce using rule 99 (BasicLit -> I INTEGER .)
    EQ              reduce using rule 99 (BasicLit -> I INTEGER .)
    NEQ             reduce using rule 99 (BasicLit -> I INTEGER .)
    LT              reduce using rule 99 (BasicLit -> I INTEGER .)
    GT              reduce using rule 99 (BasicLit -> I INTEGER .)
    LEQ             reduce using rule 99 (BasicLit -> I INTEGER .)
    GEQ             reduce using rule 99 (BasicLit -> I INTEGER .)
    OR              reduce using rule 99 (BasicLit -> I INTEGER .)
    XOR             reduce using rule 99 (BasicLit -> I INTEGER .)
    DIV             reduce using rule 99 (BasicLit -> I INTEGER .)
    MOD             reduce using rule 99 (BasicLit -> I INTEGER .)
    LSHIFT          reduce using rule 99 (BasicLit -> I INTEGER .)
    RSHIFT          reduce using rule 99 (BasicLit -> I INTEGER .)
    ADD             reduce using rule 99 (BasicLit -> I INTEGER .)
    SUB             reduce using rule 99 (BasicLit -> I INTEGER .)
    MULT            reduce using rule 99 (BasicLit -> I INTEGER .)
    AND             reduce using rule 99 (BasicLit -> I INTEGER .)
    COMMA           reduce using rule 99 (BasicLit -> I INTEGER .)
    SEMICOLON       reduce using rule 99 (BasicLit -> I INTEGER .)
    RIGHT_PARANTHESIS reduce using rule 99 (BasicLit -> I INTEGER .)
    RIGHT_BRACKET   reduce using rule 99 (BasicLit -> I INTEGER .)
    COLON           reduce using rule 99 (BasicLit -> I INTEGER .)
    INC             reduce using rule 99 (BasicLit -> I INTEGER .)
    DEC             reduce using rule 99 (BasicLit -> I INTEGER .)
    PLUS_ASSIGN     reduce using rule 99 (BasicLit -> I INTEGER .)
    MINUS_ASSIGN    reduce using rule 99 (BasicLit -> I INTEGER .)
    MULT_ASSIGN     reduce using rule 99 (BasicLit -> I INTEGER .)
    DIV_ASSIGN      reduce using rule 99 (BasicLit -> I INTEGER .)
    MOD_ASSIGN      reduce using rule 99 (BasicLit -> I INTEGER .)
    AND_ASSIGN      reduce using rule 99 (BasicLit -> I INTEGER .)
    OR_ASSIGN       reduce using rule 99 (BasicLit -> I INTEGER .)
    XOR_ASSIGN      reduce using rule 99 (BasicLit -> I INTEGER .)
    LSHIFT_ASSIGN   reduce using rule 99 (BasicLit -> I INTEGER .)
    RSHIFT_ASSIGN   reduce using rule 99 (BasicLit -> I INTEGER .)
    ASSIGN          reduce using rule 99 (BasicLit -> I INTEGER .)
    LEFT_BRACES     reduce using rule 99 (BasicLit -> I INTEGER .)


state 191

    (100) BasicLit -> I OCTAL .

    LEFT_BRACKET    reduce using rule 100 (BasicLit -> I OCTAL .)
    LEFT_PARANTHESIS reduce using rule 100 (BasicLit -> I OCTAL .)
    DOT             reduce using rule 100 (BasicLit -> I OCTAL .)
    LOG_OR          reduce using rule 100 (BasicLit -> I OCTAL .)
    LOG_AND         reduce using rule 100 (BasicLit -> I OCTAL .)
    EQ              reduce using rule 100 (BasicLit -> I OCTAL .)
    NEQ             reduce using rule 100 (BasicLit -> I OCTAL .)
    LT              reduce using rule 100 (BasicLit -> I OCTAL .)
    GT              reduce using rule 100 (BasicLit -> I OCTAL .)
    LEQ             reduce using rule 100 (BasicLit -> I OCTAL .)
    GEQ             reduce using rule 100 (BasicLit -> I OCTAL .)
    OR              reduce using rule 100 (BasicLit -> I OCTAL .)
    XOR             reduce using rule 100 (BasicLit -> I OCTAL .)
    DIV             reduce using rule 100 (BasicLit -> I OCTAL .)
    MOD             reduce using rule 100 (BasicLit -> I OCTAL .)
    LSHIFT          reduce using rule 100 (BasicLit -> I OCTAL .)
    RSHIFT          reduce using rule 100 (BasicLit -> I OCTAL .)
    ADD             reduce using rule 100 (BasicLit -> I OCTAL .)
    SUB             reduce using rule 100 (BasicLit -> I OCTAL .)
    MULT            reduce using rule 100 (BasicLit -> I OCTAL .)
    AND             reduce using rule 100 (BasicLit -> I OCTAL .)
    COMMA           reduce using rule 100 (BasicLit -> I OCTAL .)
    SEMICOLON       reduce using rule 100 (BasicLit -> I OCTAL .)
    RIGHT_PARANTHESIS reduce using rule 100 (BasicLit -> I OCTAL .)
    RIGHT_BRACKET   reduce using rule 100 (BasicLit -> I OCTAL .)
    COLON           reduce using rule 100 (BasicLit -> I OCTAL .)
    INC             reduce using rule 100 (BasicLit -> I OCTAL .)
    DEC             reduce using rule 100 (BasicLit -> I OCTAL .)
    PLUS_ASSIGN     reduce using rule 100 (BasicLit -> I OCTAL .)
    MINUS_ASSIGN    reduce using rule 100 (BasicLit -> I OCTAL .)
    MULT_ASSIGN     reduce using rule 100 (BasicLit -> I OCTAL .)
    DIV_ASSIGN      reduce using rule 100 (BasicLit -> I OCTAL .)
    MOD_ASSIGN      reduce using rule 100 (BasicLit -> I OCTAL .)
    AND_ASSIGN      reduce using rule 100 (BasicLit -> I OCTAL .)
    OR_ASSIGN       reduce using rule 100 (BasicLit -> I OCTAL .)
    XOR_ASSIGN      reduce using rule 100 (BasicLit -> I OCTAL .)
    LSHIFT_ASSIGN   reduce using rule 100 (BasicLit -> I OCTAL .)
    RSHIFT_ASSIGN   reduce using rule 100 (BasicLit -> I OCTAL .)
    ASSIGN          reduce using rule 100 (BasicLit -> I OCTAL .)
    LEFT_BRACES     reduce using rule 100 (BasicLit -> I OCTAL .)


state 192

    (101) BasicLit -> I HEX .

    LEFT_BRACKET    reduce using rule 101 (BasicLit -> I HEX .)
    LEFT_PARANTHESIS reduce using rule 101 (BasicLit -> I HEX .)
    DOT             reduce using rule 101 (BasicLit -> I HEX .)
    LOG_OR          reduce using rule 101 (BasicLit -> I HEX .)
    LOG_AND         reduce using rule 101 (BasicLit -> I HEX .)
    EQ              reduce using rule 101 (BasicLit -> I HEX .)
    NEQ             reduce using rule 101 (BasicLit -> I HEX .)
    LT              reduce using rule 101 (BasicLit -> I HEX .)
    GT              reduce using rule 101 (BasicLit -> I HEX .)
    LEQ             reduce using rule 101 (BasicLit -> I HEX .)
    GEQ             reduce using rule 101 (BasicLit -> I HEX .)
    OR              reduce using rule 101 (BasicLit -> I HEX .)
    XOR             reduce using rule 101 (BasicLit -> I HEX .)
    DIV             reduce using rule 101 (BasicLit -> I HEX .)
    MOD             reduce using rule 101 (BasicLit -> I HEX .)
    LSHIFT          reduce using rule 101 (BasicLit -> I HEX .)
    RSHIFT          reduce using rule 101 (BasicLit -> I HEX .)
    ADD             reduce using rule 101 (BasicLit -> I HEX .)
    SUB             reduce using rule 101 (BasicLit -> I HEX .)
    MULT            reduce using rule 101 (BasicLit -> I HEX .)
    AND             reduce using rule 101 (BasicLit -> I HEX .)
    COMMA           reduce using rule 101 (BasicLit -> I HEX .)
    SEMICOLON       reduce using rule 101 (BasicLit -> I HEX .)
    RIGHT_PARANTHESIS reduce using rule 101 (BasicLit -> I HEX .)
    RIGHT_BRACKET   reduce using rule 101 (BasicLit -> I HEX .)
    COLON           reduce using rule 101 (BasicLit -> I HEX .)
    INC             reduce using rule 101 (BasicLit -> I HEX .)
    DEC             reduce using rule 101 (BasicLit -> I HEX .)
    PLUS_ASSIGN     reduce using rule 101 (BasicLit -> I HEX .)
    MINUS_ASSIGN    reduce using rule 101 (BasicLit -> I HEX .)
    MULT_ASSIGN     reduce using rule 101 (BasicLit -> I HEX .)
    DIV_ASSIGN      reduce using rule 101 (BasicLit -> I HEX .)
    MOD_ASSIGN      reduce using rule 101 (BasicLit -> I HEX .)
    AND_ASSIGN      reduce using rule 101 (BasicLit -> I HEX .)
    OR_ASSIGN       reduce using rule 101 (BasicLit -> I HEX .)
    XOR_ASSIGN      reduce using rule 101 (BasicLit -> I HEX .)
    LSHIFT_ASSIGN   reduce using rule 101 (BasicLit -> I HEX .)
    RSHIFT_ASSIGN   reduce using rule 101 (BasicLit -> I HEX .)
    ASSIGN          reduce using rule 101 (BasicLit -> I HEX .)
    LEFT_BRACES     reduce using rule 101 (BasicLit -> I HEX .)


state 193

    (104) BasicLit -> I RUNE .

    LEFT_BRACKET    reduce using rule 104 (BasicLit -> I RUNE .)
    LEFT_PARANTHESIS reduce using rule 104 (BasicLit -> I RUNE .)
    DOT             reduce using rule 104 (BasicLit -> I RUNE .)
    LOG_OR          reduce using rule 104 (BasicLit -> I RUNE .)
    LOG_AND         reduce using rule 104 (BasicLit -> I RUNE .)
    EQ              reduce using rule 104 (BasicLit -> I RUNE .)
    NEQ             reduce using rule 104 (BasicLit -> I RUNE .)
    LT              reduce using rule 104 (BasicLit -> I RUNE .)
    GT              reduce using rule 104 (BasicLit -> I RUNE .)
    LEQ             reduce using rule 104 (BasicLit -> I RUNE .)
    GEQ             reduce using rule 104 (BasicLit -> I RUNE .)
    OR              reduce using rule 104 (BasicLit -> I RUNE .)
    XOR             reduce using rule 104 (BasicLit -> I RUNE .)
    DIV             reduce using rule 104 (BasicLit -> I RUNE .)
    MOD             reduce using rule 104 (BasicLit -> I RUNE .)
    LSHIFT          reduce using rule 104 (BasicLit -> I RUNE .)
    RSHIFT          reduce using rule 104 (BasicLit -> I RUNE .)
    ADD             reduce using rule 104 (BasicLit -> I RUNE .)
    SUB             reduce using rule 104 (BasicLit -> I RUNE .)
    MULT            reduce using rule 104 (BasicLit -> I RUNE .)
    AND             reduce using rule 104 (BasicLit -> I RUNE .)
    COMMA           reduce using rule 104 (BasicLit -> I RUNE .)
    SEMICOLON       reduce using rule 104 (BasicLit -> I RUNE .)
    RIGHT_PARANTHESIS reduce using rule 104 (BasicLit -> I RUNE .)
    RIGHT_BRACKET   reduce using rule 104 (BasicLit -> I RUNE .)
    COLON           reduce using rule 104 (BasicLit -> I RUNE .)
    INC             reduce using rule 104 (BasicLit -> I RUNE .)
    DEC             reduce using rule 104 (BasicLit -> I RUNE .)
    PLUS_ASSIGN     reduce using rule 104 (BasicLit -> I RUNE .)
    MINUS_ASSIGN    reduce using rule 104 (BasicLit -> I RUNE .)
    MULT_ASSIGN     reduce using rule 104 (BasicLit -> I RUNE .)
    DIV_ASSIGN      reduce using rule 104 (BasicLit -> I RUNE .)
    MOD_ASSIGN      reduce using rule 104 (BasicLit -> I RUNE .)
    AND_ASSIGN      reduce using rule 104 (BasicLit -> I RUNE .)
    OR_ASSIGN       reduce using rule 104 (BasicLit -> I RUNE .)
    XOR_ASSIGN      reduce using rule 104 (BasicLit -> I RUNE .)
    LSHIFT_ASSIGN   reduce using rule 104 (BasicLit -> I RUNE .)
    RSHIFT_ASSIGN   reduce using rule 104 (BasicLit -> I RUNE .)
    ASSIGN          reduce using rule 104 (BasicLit -> I RUNE .)
    LEFT_BRACES     reduce using rule 104 (BasicLit -> I RUNE .)


state 194

    (102) BasicLit -> F FLOAT .

    LEFT_BRACKET    reduce using rule 102 (BasicLit -> F FLOAT .)
    LEFT_PARANTHESIS reduce using rule 102 (BasicLit -> F FLOAT .)
    DOT             reduce using rule 102 (BasicLit -> F FLOAT .)
    LOG_OR          reduce using rule 102 (BasicLit -> F FLOAT .)
    LOG_AND         reduce using rule 102 (BasicLit -> F FLOAT .)
    EQ              reduce using rule 102 (BasicLit -> F FLOAT .)
    NEQ             reduce using rule 102 (BasicLit -> F FLOAT .)
    LT              reduce using rule 102 (BasicLit -> F FLOAT .)
    GT              reduce using rule 102 (BasicLit -> F FLOAT .)
    LEQ             reduce using rule 102 (BasicLit -> F FLOAT .)
    GEQ             reduce using rule 102 (BasicLit -> F FLOAT .)
    OR              reduce using rule 102 (BasicLit -> F FLOAT .)
    XOR             reduce using rule 102 (BasicLit -> F FLOAT .)
    DIV             reduce using rule 102 (BasicLit -> F FLOAT .)
    MOD             reduce using rule 102 (BasicLit -> F FLOAT .)
    LSHIFT          reduce using rule 102 (BasicLit -> F FLOAT .)
    RSHIFT          reduce using rule 102 (BasicLit -> F FLOAT .)
    ADD             reduce using rule 102 (BasicLit -> F FLOAT .)
    SUB             reduce using rule 102 (BasicLit -> F FLOAT .)
    MULT            reduce using rule 102 (BasicLit -> F FLOAT .)
    AND             reduce using rule 102 (BasicLit -> F FLOAT .)
    COMMA           reduce using rule 102 (BasicLit -> F FLOAT .)
    SEMICOLON       reduce using rule 102 (BasicLit -> F FLOAT .)
    RIGHT_PARANTHESIS reduce using rule 102 (BasicLit -> F FLOAT .)
    RIGHT_BRACKET   reduce using rule 102 (BasicLit -> F FLOAT .)
    COLON           reduce using rule 102 (BasicLit -> F FLOAT .)
    INC             reduce using rule 102 (BasicLit -> F FLOAT .)
    DEC             reduce using rule 102 (BasicLit -> F FLOAT .)
    PLUS_ASSIGN     reduce using rule 102 (BasicLit -> F FLOAT .)
    MINUS_ASSIGN    reduce using rule 102 (BasicLit -> F FLOAT .)
    MULT_ASSIGN     reduce using rule 102 (BasicLit -> F FLOAT .)
    DIV_ASSIGN      reduce using rule 102 (BasicLit -> F FLOAT .)
    MOD_ASSIGN      reduce using rule 102 (BasicLit -> F FLOAT .)
    AND_ASSIGN      reduce using rule 102 (BasicLit -> F FLOAT .)
    OR_ASSIGN       reduce using rule 102 (BasicLit -> F FLOAT .)
    XOR_ASSIGN      reduce using rule 102 (BasicLit -> F FLOAT .)
    LSHIFT_ASSIGN   reduce using rule 102 (BasicLit -> F FLOAT .)
    RSHIFT_ASSIGN   reduce using rule 102 (BasicLit -> F FLOAT .)
    ASSIGN          reduce using rule 102 (BasicLit -> F FLOAT .)
    LEFT_BRACES     reduce using rule 102 (BasicLit -> F FLOAT .)


state 195

    (103) BasicLit -> C IMAGINARY .

    LEFT_BRACKET    reduce using rule 103 (BasicLit -> C IMAGINARY .)
    LEFT_PARANTHESIS reduce using rule 103 (BasicLit -> C IMAGINARY .)
    DOT             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    LOG_OR          reduce using rule 103 (BasicLit -> C IMAGINARY .)
    LOG_AND         reduce using rule 103 (BasicLit -> C IMAGINARY .)
    EQ              reduce using rule 103 (BasicLit -> C IMAGINARY .)
    NEQ             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    LT              reduce using rule 103 (BasicLit -> C IMAGINARY .)
    GT              reduce using rule 103 (BasicLit -> C IMAGINARY .)
    LEQ             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    GEQ             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    OR              reduce using rule 103 (BasicLit -> C IMAGINARY .)
    XOR             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    DIV             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    MOD             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    LSHIFT          reduce using rule 103 (BasicLit -> C IMAGINARY .)
    RSHIFT          reduce using rule 103 (BasicLit -> C IMAGINARY .)
    ADD             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    SUB             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    MULT            reduce using rule 103 (BasicLit -> C IMAGINARY .)
    AND             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    COMMA           reduce using rule 103 (BasicLit -> C IMAGINARY .)
    SEMICOLON       reduce using rule 103 (BasicLit -> C IMAGINARY .)
    RIGHT_PARANTHESIS reduce using rule 103 (BasicLit -> C IMAGINARY .)
    RIGHT_BRACKET   reduce using rule 103 (BasicLit -> C IMAGINARY .)
    COLON           reduce using rule 103 (BasicLit -> C IMAGINARY .)
    INC             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    DEC             reduce using rule 103 (BasicLit -> C IMAGINARY .)
    PLUS_ASSIGN     reduce using rule 103 (BasicLit -> C IMAGINARY .)
    MINUS_ASSIGN    reduce using rule 103 (BasicLit -> C IMAGINARY .)
    MULT_ASSIGN     reduce using rule 103 (BasicLit -> C IMAGINARY .)
    DIV_ASSIGN      reduce using rule 103 (BasicLit -> C IMAGINARY .)
    MOD_ASSIGN      reduce using rule 103 (BasicLit -> C IMAGINARY .)
    AND_ASSIGN      reduce using rule 103 (BasicLit -> C IMAGINARY .)
    OR_ASSIGN       reduce using rule 103 (BasicLit -> C IMAGINARY .)
    XOR_ASSIGN      reduce using rule 103 (BasicLit -> C IMAGINARY .)
    LSHIFT_ASSIGN   reduce using rule 103 (BasicLit -> C IMAGINARY .)
    RSHIFT_ASSIGN   reduce using rule 103 (BasicLit -> C IMAGINARY .)
    ASSIGN          reduce using rule 103 (BasicLit -> C IMAGINARY .)
    LEFT_BRACES     reduce using rule 103 (BasicLit -> C IMAGINARY .)


state 196

    (105) BasicLit -> S STRING .

    LEFT_BRACKET    reduce using rule 105 (BasicLit -> S STRING .)
    LEFT_PARANTHESIS reduce using rule 105 (BasicLit -> S STRING .)
    DOT             reduce using rule 105 (BasicLit -> S STRING .)
    LOG_OR          reduce using rule 105 (BasicLit -> S STRING .)
    LOG_AND         reduce using rule 105 (BasicLit -> S STRING .)
    EQ              reduce using rule 105 (BasicLit -> S STRING .)
    NEQ             reduce using rule 105 (BasicLit -> S STRING .)
    LT              reduce using rule 105 (BasicLit -> S STRING .)
    GT              reduce using rule 105 (BasicLit -> S STRING .)
    LEQ             reduce using rule 105 (BasicLit -> S STRING .)
    GEQ             reduce using rule 105 (BasicLit -> S STRING .)
    OR              reduce using rule 105 (BasicLit -> S STRING .)
    XOR             reduce using rule 105 (BasicLit -> S STRING .)
    DIV             reduce using rule 105 (BasicLit -> S STRING .)
    MOD             reduce using rule 105 (BasicLit -> S STRING .)
    LSHIFT          reduce using rule 105 (BasicLit -> S STRING .)
    RSHIFT          reduce using rule 105 (BasicLit -> S STRING .)
    ADD             reduce using rule 105 (BasicLit -> S STRING .)
    SUB             reduce using rule 105 (BasicLit -> S STRING .)
    MULT            reduce using rule 105 (BasicLit -> S STRING .)
    AND             reduce using rule 105 (BasicLit -> S STRING .)
    COMMA           reduce using rule 105 (BasicLit -> S STRING .)
    SEMICOLON       reduce using rule 105 (BasicLit -> S STRING .)
    RIGHT_PARANTHESIS reduce using rule 105 (BasicLit -> S STRING .)
    RIGHT_BRACKET   reduce using rule 105 (BasicLit -> S STRING .)
    COLON           reduce using rule 105 (BasicLit -> S STRING .)
    INC             reduce using rule 105 (BasicLit -> S STRING .)
    DEC             reduce using rule 105 (BasicLit -> S STRING .)
    PLUS_ASSIGN     reduce using rule 105 (BasicLit -> S STRING .)
    MINUS_ASSIGN    reduce using rule 105 (BasicLit -> S STRING .)
    MULT_ASSIGN     reduce using rule 105 (BasicLit -> S STRING .)
    DIV_ASSIGN      reduce using rule 105 (BasicLit -> S STRING .)
    MOD_ASSIGN      reduce using rule 105 (BasicLit -> S STRING .)
    AND_ASSIGN      reduce using rule 105 (BasicLit -> S STRING .)
    OR_ASSIGN       reduce using rule 105 (BasicLit -> S STRING .)
    XOR_ASSIGN      reduce using rule 105 (BasicLit -> S STRING .)
    LSHIFT_ASSIGN   reduce using rule 105 (BasicLit -> S STRING .)
    RSHIFT_ASSIGN   reduce using rule 105 (BasicLit -> S STRING .)
    ASSIGN          reduce using rule 105 (BasicLit -> S STRING .)
    LEFT_BRACES     reduce using rule 105 (BasicLit -> S STRING .)


state 197

    (49) Block -> LEFT_BRACES StatementList . RIGHT_BRACES

    RIGHT_BRACES    shift and go to state 220


state 198

    (50) StatementList -> StatementRep .
    (51) StatementRep -> StatementRep . Statement SEMICOLON
    (155) Statement -> . Declaration
    (156) Statement -> . LabeledStmt
    (157) Statement -> . SimpleStmt
    (158) Statement -> . ReturnStmt
    (159) Statement -> . CreateScope Block EndScope
    (160) Statement -> . ScanStmt
    (161) Statement -> . BreakStmt
    (162) Statement -> . ContinueStmt
    (163) Statement -> . GotoStmt
    (164) Statement -> . PrintStmt
    (165) Statement -> . IfStmt
    (166) Statement -> . SwitchStmt
    (167) Statement -> . ForStmt
    (53) Declaration -> . ConstDecl
    (54) Declaration -> . TypeDecl
    (55) Declaration -> . VarDecl
    (175) LabeledStmt -> . Label COLON Statement
    (170) SimpleStmt -> . epsilon
    (171) SimpleStmt -> . ExpressionStmt
    (172) SimpleStmt -> . IncDecStmt
    (173) SimpleStmt -> . Assignment
    (174) SimpleStmt -> . ShortVarDecl
    (231) ReturnStmt -> . RETURN ExpressionListPureOpt
    (90) CreateScope -> .
    (169) ScanStmt -> . SCAN Expression
    (234) BreakStmt -> . BREAK LabelOpt
    (235) ContinueStmt -> . CONTINUE LabelOpt
    (238) GotoStmt -> . GOTO Label
    (168) PrintStmt -> . PRINT Expression
    (193) IfStmt -> . IF Expression CreateScope Block EndScope ElseOpt
    (199) SwitchStmt -> . ExprSwitchStmt
    (200) SwitchStmt -> . TypeSwitchStmt
    (220) ForStmt -> . FOR CreateScope ConditionBlockOpt Block EndScope
    (58) ConstDecl -> . CONST ConstSpec
    (59) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (71) TypeDecl -> . TYPE TypeSpec
    (72) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (78) VarDecl -> . VAR VarSpec
    (79) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (176) Label -> . IDENTIFIER
    (255) epsilon -> .
    (177) ExpressionStmt -> . Expression
    (178) IncDecStmt -> . Expression INC
    (179) IncDecStmt -> . Expression DEC
    (180) Assignment -> . ExpressionList assign_op ExpressionList
    (86) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (201) ExprSwitchStmt -> . SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (208) TypeSwitchStmt -> . SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (68) ExpressionList -> . Expression ExpressionRep
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    RIGHT_BRACES    reduce using rule 50 (StatementList -> StatementRep .)
    CASE            reduce using rule 50 (StatementList -> StatementRep .)
    DEFAULT         reduce using rule 50 (StatementList -> StatementRep .)
    RETURN          shift and go to state 241
    LEFT_BRACES     reduce using rule 90 (CreateScope -> .)
    SCAN            shift and go to state 242
    BREAK           shift and go to state 244
    CONTINUE        shift and go to state 245
    GOTO            shift and go to state 246
    PRINT           shift and go to state 247
    IF              shift and go to state 248
    FOR             shift and go to state 251
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23
    IDENTIFIER      shift and go to state 252
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    SWITCH          shift and go to state 254
    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Statement                      shift and go to state 221
    Declaration                    shift and go to state 222
    LabeledStmt                    shift and go to state 223
    SimpleStmt                     shift and go to state 224
    ReturnStmt                     shift and go to state 225
    CreateScope                    shift and go to state 226
    ScanStmt                       shift and go to state 227
    BreakStmt                      shift and go to state 228
    ContinueStmt                   shift and go to state 229
    GotoStmt                       shift and go to state 230
    PrintStmt                      shift and go to state 231
    IfStmt                         shift and go to state 232
    SwitchStmt                     shift and go to state 233
    ForStmt                        shift and go to state 234
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19
    Label                          shift and go to state 235
    epsilon                        shift and go to state 236
    ExpressionStmt                 shift and go to state 237
    IncDecStmt                     shift and go to state 238
    Assignment                     shift and go to state 239
    ShortVarDecl                   shift and go to state 240
    Expression                     shift and go to state 243
    ExprSwitchStmt                 shift and go to state 249
    TypeSwitchStmt                 shift and go to state 250
    ExpressionList                 shift and go to state 253
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 199

    (52) StatementRep -> epsilon .

    RETURN          reduce using rule 52 (StatementRep -> epsilon .)
    SCAN            reduce using rule 52 (StatementRep -> epsilon .)
    BREAK           reduce using rule 52 (StatementRep -> epsilon .)
    CONTINUE        reduce using rule 52 (StatementRep -> epsilon .)
    GOTO            reduce using rule 52 (StatementRep -> epsilon .)
    PRINT           reduce using rule 52 (StatementRep -> epsilon .)
    IF              reduce using rule 52 (StatementRep -> epsilon .)
    FOR             reduce using rule 52 (StatementRep -> epsilon .)
    CONST           reduce using rule 52 (StatementRep -> epsilon .)
    TYPE            reduce using rule 52 (StatementRep -> epsilon .)
    VAR             reduce using rule 52 (StatementRep -> epsilon .)
    IDENTIFIER      reduce using rule 52 (StatementRep -> epsilon .)
    SWITCH          reduce using rule 52 (StatementRep -> epsilon .)
    NOT             reduce using rule 52 (StatementRep -> epsilon .)
    ADD             reduce using rule 52 (StatementRep -> epsilon .)
    SUB             reduce using rule 52 (StatementRep -> epsilon .)
    MULT            reduce using rule 52 (StatementRep -> epsilon .)
    AND             reduce using rule 52 (StatementRep -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 52 (StatementRep -> epsilon .)
    TYPECAST        reduce using rule 52 (StatementRep -> epsilon .)
    SEMICOLON       reduce using rule 52 (StatementRep -> epsilon .)
    LEFT_BRACES     reduce using rule 52 (StatementRep -> epsilon .)
    INTEGER         reduce using rule 52 (StatementRep -> epsilon .)
    OCTAL           reduce using rule 52 (StatementRep -> epsilon .)
    HEX             reduce using rule 52 (StatementRep -> epsilon .)
    RUNE            reduce using rule 52 (StatementRep -> epsilon .)
    FLOAT           reduce using rule 52 (StatementRep -> epsilon .)
    IMAGINARY       reduce using rule 52 (StatementRep -> epsilon .)
    STRING          reduce using rule 52 (StatementRep -> epsilon .)
    RIGHT_BRACES    reduce using rule 52 (StatementRep -> epsilon .)
    CASE            reduce using rule 52 (StatementRep -> epsilon .)
    DEFAULT         reduce using rule 52 (StatementRep -> epsilon .)


state 200

    (40) Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .

    LEFT_PARANTHESIS reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    INT_T           reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    FLOAT_T         reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    UINT_T          reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    COMPLEX_T       reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    RUNE_T          reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    BOOL_T          reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    STRING_T        reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    TYPE            reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    IDENTIFIER      reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    LEFT_BRACKET    reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    MULT            reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    STRUCT          reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 40 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)


state 201

    (46) ParameterDeclCommaRep -> ParameterDecl COMMA . ParameterDecl
    (47) ParameterDecl -> . IdentifierList Type
    (48) ParameterDecl -> . Type
    (65) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    IDENTIFIER      shift and go to state 145
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    ParameterDecl                  shift and go to state 255
    IdentifierList                 shift and go to state 143
    Type                           shift and go to state 144
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 202

    (45) ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA . ParameterDecl
    (47) ParameterDecl -> . IdentifierList Type
    (48) ParameterDecl -> . Type
    (65) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    IDENTIFIER      shift and go to state 145
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    ParameterDecl                  shift and go to state 256
    IdentifierList                 shift and go to state 143
    Type                           shift and go to state 144
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 203

    (47) ParameterDecl -> IdentifierList Type .

    COMMA           reduce using rule 47 (ParameterDecl -> IdentifierList Type .)
    RIGHT_PARANTHESIS reduce using rule 47 (ParameterDecl -> IdentifierList Type .)


state 204

    (20) ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .

    ASSIGN          reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    SEMICOLON       reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    RIGHT_PARANTHESIS reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    LEFT_BRACES     reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    COMMA           reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    LEFT_PARANTHESIS reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    COLON           reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)


state 205

    (25) ElementType -> Type .

    ASSIGN          reduce using rule 25 (ElementType -> Type .)
    SEMICOLON       reduce using rule 25 (ElementType -> Type .)
    RIGHT_PARANTHESIS reduce using rule 25 (ElementType -> Type .)
    LEFT_BRACES     reduce using rule 25 (ElementType -> Type .)
    COMMA           reduce using rule 25 (ElementType -> Type .)
    LEFT_PARANTHESIS reduce using rule 25 (ElementType -> Type .)
    COLON           reduce using rule 25 (ElementType -> Type .)


state 206

    (26) StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep . RIGHT_BRACES EndScope
    (27) FieldDeclRep -> FieldDeclRep . FieldDecl SEMICOLON
    (29) FieldDecl -> . IdentifierList Type
    (65) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_BRACES    shift and go to state 257
    IDENTIFIER      shift and go to state 37

    FieldDecl                      shift and go to state 258
    IdentifierList                 shift and go to state 259

state 207

    (28) FieldDeclRep -> epsilon .

    RIGHT_BRACES    reduce using rule 28 (FieldDeclRep -> epsilon .)
    IDENTIFIER      reduce using rule 28 (FieldDeclRep -> epsilon .)


state 208

    (69) ExpressionRep -> ExpressionRep COMMA . Expression
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 260
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 209

    (127) Expression -> Expression BinaryOp Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

  ! shift/reduce conflict for LOG_OR resolved as shift
  ! shift/reduce conflict for LOG_AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    SEMICOLON       reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    RIGHT_PARANTHESIS reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    RIGHT_BRACKET   reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    COLON           reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    INC             reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    DEC             reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    PLUS_ASSIGN     reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    MINUS_ASSIGN    reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    MULT_ASSIGN     reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    DIV_ASSIGN      reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    MOD_ASSIGN      reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    AND_ASSIGN      reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    OR_ASSIGN       reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    XOR_ASSIGN      reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    LSHIFT_ASSIGN   reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    RSHIFT_ASSIGN   reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    ASSIGN          reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    LEFT_BRACES     reduce using rule 127 (Expression -> Expression BinaryOp Expression .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

  ! LOG_OR          [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! LOG_AND         [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! EQ              [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! NEQ             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! LT              [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! GT              [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! LEQ             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! GEQ             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! OR              [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! XOR             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! DIV             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! MOD             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! LSHIFT          [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! RSHIFT          [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! ADD             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! SUB             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! MULT            [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]
  ! AND             [ reduce using rule 127 (Expression -> Expression BinaryOp Expression .) ]

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 210

    (115) PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression . RIGHT_BRACKET
    (127) Expression -> Expression . BinaryOp Expression
    (128) ExpressionOpt -> Expression .
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    RIGHT_BRACKET   shift and go to state 261
    COLON           reduce using rule 128 (ExpressionOpt -> Expression .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 211

    (121) Slice -> LEFT_BRACKET ExpressionOpt . COLON ExpressionOpt RIGHT_BRACKET
    (122) Slice -> LEFT_BRACKET ExpressionOpt . COLON Expression COLON Expression RIGHT_BRACKET

    COLON           shift and go to state 262


state 212

    (129) ExpressionOpt -> epsilon .

    COLON           reduce using rule 129 (ExpressionOpt -> epsilon .)
    RIGHT_BRACKET   reduce using rule 129 (ExpressionOpt -> epsilon .)


state 213

    (118) PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 263


state 214

    (124) ExpressionListTypeOpt -> ExpressionList .

    RIGHT_PARANTHESIS reduce using rule 124 (ExpressionListTypeOpt -> ExpressionList .)


state 215

    (125) ExpressionListTypeOpt -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 125 (ExpressionListTypeOpt -> epsilon .)


state 216

    (119) Selector -> DOT IDENTIFIER .

    LEFT_BRACKET    reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    DOT             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    LOG_OR          reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    LOG_AND         reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    EQ              reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    NEQ             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    LT              reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    GT              reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    LEQ             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    GEQ             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    OR              reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    XOR             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    DIV             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    MOD             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    LSHIFT          reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    RSHIFT          reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    ADD             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    SUB             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    MULT            reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    AND             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    COMMA           reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    COLON           reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    INC             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    DEC             reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    ASSIGN          reduce using rule 119 (Selector -> DOT IDENTIFIER .)
    LEFT_BRACES     reduce using rule 119 (Selector -> DOT IDENTIFIER .)


state 217

    (123) TypeAssertion -> DOT LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 264
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 218

    (97) Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .

    LEFT_BRACKET    reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DOT             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    EQ              reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LT              reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GT              reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR              reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ADD             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SUB             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT            reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COLON           reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    INC             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DEC             reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 97 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)


state 219

    (154) Conversion -> TYPECAST Type LEFT_PARANTHESIS . Expression RIGHT_PARANTHESIS
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 265
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 220

    (49) Block -> LEFT_BRACES StatementList RIGHT_BRACES .

    SEMICOLON       reduce using rule 49 (Block -> LEFT_BRACES StatementList RIGHT_BRACES .)
    ELSE            reduce using rule 49 (Block -> LEFT_BRACES StatementList RIGHT_BRACES .)


state 221

    (51) StatementRep -> StatementRep Statement . SEMICOLON

    SEMICOLON       shift and go to state 266


state 222

    (155) Statement -> Declaration .

    SEMICOLON       reduce using rule 155 (Statement -> Declaration .)


state 223

    (156) Statement -> LabeledStmt .

    SEMICOLON       reduce using rule 156 (Statement -> LabeledStmt .)


state 224

    (157) Statement -> SimpleStmt .

    SEMICOLON       reduce using rule 157 (Statement -> SimpleStmt .)


state 225

    (158) Statement -> ReturnStmt .

    SEMICOLON       reduce using rule 158 (Statement -> ReturnStmt .)


state 226

    (159) Statement -> CreateScope . Block EndScope
    (49) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 134

    Block                          shift and go to state 267

state 227

    (160) Statement -> ScanStmt .

    SEMICOLON       reduce using rule 160 (Statement -> ScanStmt .)


state 228

    (161) Statement -> BreakStmt .

    SEMICOLON       reduce using rule 161 (Statement -> BreakStmt .)


state 229

    (162) Statement -> ContinueStmt .

    SEMICOLON       reduce using rule 162 (Statement -> ContinueStmt .)


state 230

    (163) Statement -> GotoStmt .

    SEMICOLON       reduce using rule 163 (Statement -> GotoStmt .)


state 231

    (164) Statement -> PrintStmt .

    SEMICOLON       reduce using rule 164 (Statement -> PrintStmt .)


state 232

    (165) Statement -> IfStmt .

    SEMICOLON       reduce using rule 165 (Statement -> IfStmt .)


state 233

    (166) Statement -> SwitchStmt .

    SEMICOLON       reduce using rule 166 (Statement -> SwitchStmt .)


state 234

    (167) Statement -> ForStmt .

    SEMICOLON       reduce using rule 167 (Statement -> ForStmt .)


state 235

    (175) LabeledStmt -> Label . COLON Statement

    COLON           shift and go to state 268


state 236

    (170) SimpleStmt -> epsilon .

    SEMICOLON       reduce using rule 170 (SimpleStmt -> epsilon .)
    LEFT_BRACES     reduce using rule 170 (SimpleStmt -> epsilon .)


state 237

    (171) SimpleStmt -> ExpressionStmt .

    SEMICOLON       reduce using rule 171 (SimpleStmt -> ExpressionStmt .)
    LEFT_BRACES     reduce using rule 171 (SimpleStmt -> ExpressionStmt .)


state 238

    (172) SimpleStmt -> IncDecStmt .

    SEMICOLON       reduce using rule 172 (SimpleStmt -> IncDecStmt .)
    LEFT_BRACES     reduce using rule 172 (SimpleStmt -> IncDecStmt .)


state 239

    (173) SimpleStmt -> Assignment .

    SEMICOLON       reduce using rule 173 (SimpleStmt -> Assignment .)
    LEFT_BRACES     reduce using rule 173 (SimpleStmt -> Assignment .)


state 240

    (174) SimpleStmt -> ShortVarDecl .

    SEMICOLON       reduce using rule 174 (SimpleStmt -> ShortVarDecl .)
    LEFT_BRACES     reduce using rule 174 (SimpleStmt -> ShortVarDecl .)


state 241

    (231) ReturnStmt -> RETURN . ExpressionListPureOpt
    (232) ExpressionListPureOpt -> . ExpressionList
    (233) ExpressionListPureOpt -> . epsilon
    (68) ExpressionList -> . Expression ExpressionRep
    (255) epsilon -> .
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    SEMICOLON       reduce using rule 255 (epsilon -> .)
    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ExpressionListPureOpt          shift and go to state 269
    ExpressionList                 shift and go to state 270
    epsilon                        shift and go to state 271
    Expression                     shift and go to state 108
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 242

    (169) ScanStmt -> SCAN . Expression
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 272
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 243

    (177) ExpressionStmt -> Expression .
    (178) IncDecStmt -> Expression . INC
    (179) IncDecStmt -> Expression . DEC
    (127) Expression -> Expression . BinaryOp Expression
    (68) ExpressionList -> Expression . ExpressionRep
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (69) ExpressionRep -> . ExpressionRep COMMA Expression
    (70) ExpressionRep -> . epsilon
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (255) epsilon -> .
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    SEMICOLON       reduce using rule 177 (ExpressionStmt -> Expression .)
    LEFT_BRACES     reduce using rule 177 (ExpressionStmt -> Expression .)
    INC             shift and go to state 273
    DEC             shift and go to state 274
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    COMMA           reduce using rule 255 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 255 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 255 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 255 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 255 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 255 (epsilon -> .)
    AND_ASSIGN      reduce using rule 255 (epsilon -> .)
    OR_ASSIGN       reduce using rule 255 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 255 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 255 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 255 (epsilon -> .)
    ASSIGN          reduce using rule 255 (epsilon -> .)
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    ExpressionRep                  shift and go to state 160
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    epsilon                        shift and go to state 162
    UnaryOp                        shift and go to state 173

state 244

    (234) BreakStmt -> BREAK . LabelOpt
    (236) LabelOpt -> . Label
    (237) LabelOpt -> . epsilon
    (176) Label -> . IDENTIFIER
    (255) epsilon -> .

    IDENTIFIER      shift and go to state 278
    SEMICOLON       reduce using rule 255 (epsilon -> .)

    LabelOpt                       shift and go to state 275
    Label                          shift and go to state 276
    epsilon                        shift and go to state 277

state 245

    (235) ContinueStmt -> CONTINUE . LabelOpt
    (236) LabelOpt -> . Label
    (237) LabelOpt -> . epsilon
    (176) Label -> . IDENTIFIER
    (255) epsilon -> .

    IDENTIFIER      shift and go to state 278
    SEMICOLON       reduce using rule 255 (epsilon -> .)

    LabelOpt                       shift and go to state 279
    Label                          shift and go to state 276
    epsilon                        shift and go to state 277

state 246

    (238) GotoStmt -> GOTO . Label
    (176) Label -> . IDENTIFIER

    IDENTIFIER      shift and go to state 278

    Label                          shift and go to state 280

state 247

    (168) PrintStmt -> PRINT . Expression
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 281
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 248

    (193) IfStmt -> IF . Expression CreateScope Block EndScope ElseOpt
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 282
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 249

    (199) SwitchStmt -> ExprSwitchStmt .

    SEMICOLON       reduce using rule 199 (SwitchStmt -> ExprSwitchStmt .)


state 250

    (200) SwitchStmt -> TypeSwitchStmt .

    SEMICOLON       reduce using rule 200 (SwitchStmt -> TypeSwitchStmt .)


state 251

    (220) ForStmt -> FOR . CreateScope ConditionBlockOpt Block EndScope
    (90) CreateScope -> .

    NOT             reduce using rule 90 (CreateScope -> .)
    IDENTIFIER      reduce using rule 90 (CreateScope -> .)
    ADD             reduce using rule 90 (CreateScope -> .)
    SUB             reduce using rule 90 (CreateScope -> .)
    MULT            reduce using rule 90 (CreateScope -> .)
    AND             reduce using rule 90 (CreateScope -> .)
    LEFT_PARANTHESIS reduce using rule 90 (CreateScope -> .)
    TYPECAST        reduce using rule 90 (CreateScope -> .)
    LEFT_BRACES     reduce using rule 90 (CreateScope -> .)
    SEMICOLON       reduce using rule 90 (CreateScope -> .)
    INTEGER         reduce using rule 90 (CreateScope -> .)
    OCTAL           reduce using rule 90 (CreateScope -> .)
    HEX             reduce using rule 90 (CreateScope -> .)
    RUNE            reduce using rule 90 (CreateScope -> .)
    FLOAT           reduce using rule 90 (CreateScope -> .)
    IMAGINARY       reduce using rule 90 (CreateScope -> .)
    STRING          reduce using rule 90 (CreateScope -> .)

    CreateScope                    shift and go to state 283

state 252

    (176) Label -> IDENTIFIER .
    (86) ShortVarDecl -> IDENTIFIER . QUICK_ASSIGN Expression
    (110) OperandName -> IDENTIFIER .

    COLON           reduce using rule 176 (Label -> IDENTIFIER .)
    QUICK_ASSIGN    shift and go to state 284
    LEFT_BRACKET    reduce using rule 110 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 110 (OperandName -> IDENTIFIER .)
    DOT             reduce using rule 110 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 110 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 110 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 110 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 110 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 110 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 110 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 110 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 110 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 110 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 110 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 110 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 110 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 110 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 110 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 110 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 110 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 110 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 110 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 110 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 110 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 110 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 110 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 110 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 110 (OperandName -> IDENTIFIER .)


state 253

    (180) Assignment -> ExpressionList . assign_op ExpressionList
    (181) assign_op -> . AssignOp
    (182) AssignOp -> . PLUS_ASSIGN
    (183) AssignOp -> . MINUS_ASSIGN
    (184) AssignOp -> . MULT_ASSIGN
    (185) AssignOp -> . DIV_ASSIGN
    (186) AssignOp -> . MOD_ASSIGN
    (187) AssignOp -> . AND_ASSIGN
    (188) AssignOp -> . OR_ASSIGN
    (189) AssignOp -> . XOR_ASSIGN
    (190) AssignOp -> . LSHIFT_ASSIGN
    (191) AssignOp -> . RSHIFT_ASSIGN
    (192) AssignOp -> . ASSIGN

    PLUS_ASSIGN     shift and go to state 287
    MINUS_ASSIGN    shift and go to state 288
    MULT_ASSIGN     shift and go to state 289
    DIV_ASSIGN      shift and go to state 290
    MOD_ASSIGN      shift and go to state 291
    AND_ASSIGN      shift and go to state 292
    OR_ASSIGN       shift and go to state 293
    XOR_ASSIGN      shift and go to state 294
    LSHIFT_ASSIGN   shift and go to state 295
    RSHIFT_ASSIGN   shift and go to state 296
    ASSIGN          shift and go to state 297

    assign_op                      shift and go to state 285
    AssignOp                       shift and go to state 286

state 254

    (201) ExprSwitchStmt -> SWITCH . ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (208) TypeSwitchStmt -> SWITCH . SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (128) ExpressionOpt -> . Expression
    (129) ExpressionOpt -> . epsilon
    (194) SimpleStmtOpt -> . SimpleStmt SEMICOLON
    (195) SimpleStmtOpt -> . epsilon
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (255) epsilon -> .
    (170) SimpleStmt -> . epsilon
    (171) SimpleStmt -> . ExpressionStmt
    (172) SimpleStmt -> . IncDecStmt
    (173) SimpleStmt -> . Assignment
    (174) SimpleStmt -> . ShortVarDecl
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (177) ExpressionStmt -> . Expression
    (178) IncDecStmt -> . Expression INC
    (179) IncDecStmt -> . Expression DEC
    (180) Assignment -> . ExpressionList assign_op ExpressionList
    (86) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (68) ExpressionList -> . Expression ExpressionRep
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LEFT_PARANTHESIS resolved as shift
  ! shift/reduce conflict for TYPECAST resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 106 (I -> .)
  ! reduce/reduce conflict for OCTAL resolved using rule 106 (I -> .)
  ! reduce/reduce conflict for HEX resolved using rule 106 (I -> .)
  ! reduce/reduce conflict for RUNE resolved using rule 106 (I -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 107 (F -> .)
  ! reduce/reduce conflict for IMAGINARY resolved using rule 108 (C -> .)
  ! reduce/reduce conflict for STRING resolved using rule 109 (S -> .)
    LEFT_BRACES     reduce using rule 255 (epsilon -> .)
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 303
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

  ! IDENTIFIER      [ reduce using rule 255 (epsilon -> .) ]
  ! LEFT_PARANTHESIS [ reduce using rule 255 (epsilon -> .) ]
  ! TYPECAST        [ reduce using rule 255 (epsilon -> .) ]
  ! INTEGER         [ reduce using rule 255 (epsilon -> .) ]
  ! OCTAL           [ reduce using rule 255 (epsilon -> .) ]
  ! HEX             [ reduce using rule 255 (epsilon -> .) ]
  ! RUNE            [ reduce using rule 255 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 255 (epsilon -> .) ]
  ! IMAGINARY       [ reduce using rule 255 (epsilon -> .) ]
  ! STRING          [ reduce using rule 255 (epsilon -> .) ]

    ExpressionOpt                  shift and go to state 298
    SimpleStmtOpt                  shift and go to state 299
    Expression                     shift and go to state 300
    epsilon                        shift and go to state 301
    SimpleStmt                     shift and go to state 302
    UnaryExpr                      shift and go to state 109
    ExpressionStmt                 shift and go to state 237
    IncDecStmt                     shift and go to state 238
    Assignment                     shift and go to state 239
    ShortVarDecl                   shift and go to state 240
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    ExpressionList                 shift and go to state 253
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 255

    (46) ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .

    COMMA           reduce using rule 46 (ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .)
    RIGHT_PARANTHESIS reduce using rule 46 (ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .)


state 256

    (45) ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .

    COMMA           reduce using rule 45 (ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .)
    RIGHT_PARANTHESIS reduce using rule 45 (ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .)


state 257

    (26) StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES . EndScope
    (91) EndScope -> .

    ASSIGN          reduce using rule 91 (EndScope -> .)
    SEMICOLON       reduce using rule 91 (EndScope -> .)
    RIGHT_PARANTHESIS reduce using rule 91 (EndScope -> .)
    LEFT_BRACES     reduce using rule 91 (EndScope -> .)
    COMMA           reduce using rule 91 (EndScope -> .)
    LEFT_PARANTHESIS reduce using rule 91 (EndScope -> .)
    COLON           reduce using rule 91 (EndScope -> .)

    EndScope                       shift and go to state 304

state 258

    (27) FieldDeclRep -> FieldDeclRep FieldDecl . SEMICOLON

    SEMICOLON       shift and go to state 305


state 259

    (29) FieldDecl -> IdentifierList . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 306
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 260

    (69) ExpressionRep -> ExpressionRep COMMA Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    COMMA           reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    SEMICOLON       reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    RIGHT_PARANTHESIS reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LEFT_BRACES     reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    COLON           reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    PLUS_ASSIGN     reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MINUS_ASSIGN    reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MULT_ASSIGN     reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    DIV_ASSIGN      reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MOD_ASSIGN      reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    AND_ASSIGN      reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    OR_ASSIGN       reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    XOR_ASSIGN      reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LSHIFT_ASSIGN   reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    RSHIFT_ASSIGN   reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    ASSIGN          reduce using rule 69 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 261

    (115) PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    DOT             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LOG_OR          reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LOG_AND         reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    EQ              reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    NEQ             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LT              reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    GT              reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEQ             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    GEQ             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    OR              reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    XOR             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    DIV             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MOD             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LSHIFT          reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    RSHIFT          reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    ADD             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    SUB             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MULT            reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    AND             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    COMMA           reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    COLON           reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    INC             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    DEC             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    ASSIGN          reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)


state 262

    (121) Slice -> LEFT_BRACKET ExpressionOpt COLON . ExpressionOpt RIGHT_BRACKET
    (122) Slice -> LEFT_BRACKET ExpressionOpt COLON . Expression COLON Expression RIGHT_BRACKET
    (128) ExpressionOpt -> . Expression
    (129) ExpressionOpt -> . epsilon
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (255) epsilon -> .
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    RIGHT_BRACKET   reduce using rule 255 (epsilon -> .)
    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ExpressionOpt                  shift and go to state 307
    Expression                     shift and go to state 308
    epsilon                        shift and go to state 212
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 263

    (118) PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .

    LEFT_BRACKET    reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DOT             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    EQ              reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LT              reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    GT              reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    OR              reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    XOR             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DIV             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MOD             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    ADD             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    SUB             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MULT            reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    AND             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    COLON           reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    INC             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DEC             reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 118 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)


state 264

    (123) TypeAssertion -> DOT LEFT_PARANTHESIS Type . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 309


state 265

    (154) Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression . RIGHT_PARANTHESIS
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    RIGHT_PARANTHESIS shift and go to state 310
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 266

    (51) StatementRep -> StatementRep Statement SEMICOLON .

    RETURN          reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    SCAN            reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    BREAK           reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    CONTINUE        reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    GOTO            reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    PRINT           reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    IF              reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    FOR             reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    CONST           reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    TYPE            reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    VAR             reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    IDENTIFIER      reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    SWITCH          reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    NOT             reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    ADD             reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    SUB             reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    MULT            reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    AND             reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    LEFT_PARANTHESIS reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    TYPECAST        reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    SEMICOLON       reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    LEFT_BRACES     reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    INTEGER         reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    OCTAL           reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    HEX             reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    RUNE            reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    FLOAT           reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    IMAGINARY       reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    STRING          reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    RIGHT_BRACES    reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    CASE            reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)
    DEFAULT         reduce using rule 51 (StatementRep -> StatementRep Statement SEMICOLON .)


state 267

    (159) Statement -> CreateScope Block . EndScope
    (91) EndScope -> .

    SEMICOLON       reduce using rule 91 (EndScope -> .)

    EndScope                       shift and go to state 311

state 268

    (175) LabeledStmt -> Label COLON . Statement
    (155) Statement -> . Declaration
    (156) Statement -> . LabeledStmt
    (157) Statement -> . SimpleStmt
    (158) Statement -> . ReturnStmt
    (159) Statement -> . CreateScope Block EndScope
    (160) Statement -> . ScanStmt
    (161) Statement -> . BreakStmt
    (162) Statement -> . ContinueStmt
    (163) Statement -> . GotoStmt
    (164) Statement -> . PrintStmt
    (165) Statement -> . IfStmt
    (166) Statement -> . SwitchStmt
    (167) Statement -> . ForStmt
    (53) Declaration -> . ConstDecl
    (54) Declaration -> . TypeDecl
    (55) Declaration -> . VarDecl
    (175) LabeledStmt -> . Label COLON Statement
    (170) SimpleStmt -> . epsilon
    (171) SimpleStmt -> . ExpressionStmt
    (172) SimpleStmt -> . IncDecStmt
    (173) SimpleStmt -> . Assignment
    (174) SimpleStmt -> . ShortVarDecl
    (231) ReturnStmt -> . RETURN ExpressionListPureOpt
    (90) CreateScope -> .
    (169) ScanStmt -> . SCAN Expression
    (234) BreakStmt -> . BREAK LabelOpt
    (235) ContinueStmt -> . CONTINUE LabelOpt
    (238) GotoStmt -> . GOTO Label
    (168) PrintStmt -> . PRINT Expression
    (193) IfStmt -> . IF Expression CreateScope Block EndScope ElseOpt
    (199) SwitchStmt -> . ExprSwitchStmt
    (200) SwitchStmt -> . TypeSwitchStmt
    (220) ForStmt -> . FOR CreateScope ConditionBlockOpt Block EndScope
    (58) ConstDecl -> . CONST ConstSpec
    (59) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (71) TypeDecl -> . TYPE TypeSpec
    (72) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (78) VarDecl -> . VAR VarSpec
    (79) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (176) Label -> . IDENTIFIER
    (255) epsilon -> .
    (177) ExpressionStmt -> . Expression
    (178) IncDecStmt -> . Expression INC
    (179) IncDecStmt -> . Expression DEC
    (180) Assignment -> . ExpressionList assign_op ExpressionList
    (86) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (201) ExprSwitchStmt -> . SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (208) TypeSwitchStmt -> . SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (68) ExpressionList -> . Expression ExpressionRep
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    RETURN          shift and go to state 241
    LEFT_BRACES     reduce using rule 90 (CreateScope -> .)
    SCAN            shift and go to state 242
    BREAK           shift and go to state 244
    CONTINUE        shift and go to state 245
    GOTO            shift and go to state 246
    PRINT           shift and go to state 247
    IF              shift and go to state 248
    FOR             shift and go to state 251
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23
    IDENTIFIER      shift and go to state 252
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    SWITCH          shift and go to state 254
    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Label                          shift and go to state 235
    Statement                      shift and go to state 312
    Declaration                    shift and go to state 222
    LabeledStmt                    shift and go to state 223
    SimpleStmt                     shift and go to state 224
    ReturnStmt                     shift and go to state 225
    CreateScope                    shift and go to state 226
    ScanStmt                       shift and go to state 227
    BreakStmt                      shift and go to state 228
    ContinueStmt                   shift and go to state 229
    GotoStmt                       shift and go to state 230
    PrintStmt                      shift and go to state 231
    IfStmt                         shift and go to state 232
    SwitchStmt                     shift and go to state 233
    ForStmt                        shift and go to state 234
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19
    epsilon                        shift and go to state 236
    ExpressionStmt                 shift and go to state 237
    IncDecStmt                     shift and go to state 238
    Assignment                     shift and go to state 239
    ShortVarDecl                   shift and go to state 240
    Expression                     shift and go to state 243
    ExprSwitchStmt                 shift and go to state 249
    TypeSwitchStmt                 shift and go to state 250
    ExpressionList                 shift and go to state 253
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 269

    (231) ReturnStmt -> RETURN ExpressionListPureOpt .

    SEMICOLON       reduce using rule 231 (ReturnStmt -> RETURN ExpressionListPureOpt .)


state 270

    (232) ExpressionListPureOpt -> ExpressionList .

    SEMICOLON       reduce using rule 232 (ExpressionListPureOpt -> ExpressionList .)


state 271

    (233) ExpressionListPureOpt -> epsilon .

    SEMICOLON       reduce using rule 233 (ExpressionListPureOpt -> epsilon .)


state 272

    (169) ScanStmt -> SCAN Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    SEMICOLON       reduce using rule 169 (ScanStmt -> SCAN Expression .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 273

    (178) IncDecStmt -> Expression INC .

    SEMICOLON       reduce using rule 178 (IncDecStmt -> Expression INC .)
    LEFT_BRACES     reduce using rule 178 (IncDecStmt -> Expression INC .)


state 274

    (179) IncDecStmt -> Expression DEC .

    SEMICOLON       reduce using rule 179 (IncDecStmt -> Expression DEC .)
    LEFT_BRACES     reduce using rule 179 (IncDecStmt -> Expression DEC .)


state 275

    (234) BreakStmt -> BREAK LabelOpt .

    SEMICOLON       reduce using rule 234 (BreakStmt -> BREAK LabelOpt .)


state 276

    (236) LabelOpt -> Label .

    SEMICOLON       reduce using rule 236 (LabelOpt -> Label .)


state 277

    (237) LabelOpt -> epsilon .

    SEMICOLON       reduce using rule 237 (LabelOpt -> epsilon .)


state 278

    (176) Label -> IDENTIFIER .

    SEMICOLON       reduce using rule 176 (Label -> IDENTIFIER .)


state 279

    (235) ContinueStmt -> CONTINUE LabelOpt .

    SEMICOLON       reduce using rule 235 (ContinueStmt -> CONTINUE LabelOpt .)


state 280

    (238) GotoStmt -> GOTO Label .

    SEMICOLON       reduce using rule 238 (GotoStmt -> GOTO Label .)


state 281

    (168) PrintStmt -> PRINT Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    SEMICOLON       reduce using rule 168 (PrintStmt -> PRINT Expression .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 282

    (193) IfStmt -> IF Expression . CreateScope Block EndScope ElseOpt
    (127) Expression -> Expression . BinaryOp Expression
    (90) CreateScope -> .
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 90 (CreateScope -> .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    CreateScope                    shift and go to state 313
    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 283

    (220) ForStmt -> FOR CreateScope . ConditionBlockOpt Block EndScope
    (221) ConditionBlockOpt -> . epsilon
    (222) ConditionBlockOpt -> . Condition
    (223) ConditionBlockOpt -> . ForClause
    (255) epsilon -> .
    (224) Condition -> . Expression
    (225) ForClause -> . SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (170) SimpleStmt -> . epsilon
    (171) SimpleStmt -> . ExpressionStmt
    (172) SimpleStmt -> . IncDecStmt
    (173) SimpleStmt -> . Assignment
    (174) SimpleStmt -> . ShortVarDecl
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (177) ExpressionStmt -> . Expression
    (178) IncDecStmt -> . Expression INC
    (179) IncDecStmt -> . Expression DEC
    (180) Assignment -> . ExpressionList assign_op ExpressionList
    (86) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (68) ExpressionList -> . Expression ExpressionRep
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    LEFT_BRACES     reduce using rule 255 (epsilon -> .)
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 303
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ConditionBlockOpt              shift and go to state 314
    epsilon                        shift and go to state 315
    Condition                      shift and go to state 316
    ForClause                      shift and go to state 317
    Expression                     shift and go to state 318
    SimpleStmt                     shift and go to state 319
    UnaryExpr                      shift and go to state 109
    ExpressionStmt                 shift and go to state 237
    IncDecStmt                     shift and go to state 238
    Assignment                     shift and go to state 239
    ShortVarDecl                   shift and go to state 240
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    ExpressionList                 shift and go to state 253
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 284

    (86) ShortVarDecl -> IDENTIFIER QUICK_ASSIGN . Expression
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 320
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 285

    (180) Assignment -> ExpressionList assign_op . ExpressionList
    (68) ExpressionList -> . Expression ExpressionRep
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ExpressionList                 shift and go to state 321
    Expression                     shift and go to state 108
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 286

    (181) assign_op -> AssignOp .

    NOT             reduce using rule 181 (assign_op -> AssignOp .)
    ADD             reduce using rule 181 (assign_op -> AssignOp .)
    SUB             reduce using rule 181 (assign_op -> AssignOp .)
    MULT            reduce using rule 181 (assign_op -> AssignOp .)
    AND             reduce using rule 181 (assign_op -> AssignOp .)
    LEFT_PARANTHESIS reduce using rule 181 (assign_op -> AssignOp .)
    TYPECAST        reduce using rule 181 (assign_op -> AssignOp .)
    IDENTIFIER      reduce using rule 181 (assign_op -> AssignOp .)
    INTEGER         reduce using rule 181 (assign_op -> AssignOp .)
    OCTAL           reduce using rule 181 (assign_op -> AssignOp .)
    HEX             reduce using rule 181 (assign_op -> AssignOp .)
    RUNE            reduce using rule 181 (assign_op -> AssignOp .)
    FLOAT           reduce using rule 181 (assign_op -> AssignOp .)
    IMAGINARY       reduce using rule 181 (assign_op -> AssignOp .)
    STRING          reduce using rule 181 (assign_op -> AssignOp .)


state 287

    (182) AssignOp -> PLUS_ASSIGN .

    NOT             reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    ADD             reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    SUB             reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    MULT            reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    AND             reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    TYPECAST        reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    INTEGER         reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    OCTAL           reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    HEX             reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    RUNE            reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    FLOAT           reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    IMAGINARY       reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)
    STRING          reduce using rule 182 (AssignOp -> PLUS_ASSIGN .)


state 288

    (183) AssignOp -> MINUS_ASSIGN .

    NOT             reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    ADD             reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    SUB             reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    MULT            reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    AND             reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    TYPECAST        reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    INTEGER         reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    OCTAL           reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    HEX             reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    RUNE            reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    FLOAT           reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    IMAGINARY       reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)
    STRING          reduce using rule 183 (AssignOp -> MINUS_ASSIGN .)


state 289

    (184) AssignOp -> MULT_ASSIGN .

    NOT             reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    ADD             reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    SUB             reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    MULT            reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    AND             reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    TYPECAST        reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    IDENTIFIER      reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    INTEGER         reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    OCTAL           reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    HEX             reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    RUNE            reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    FLOAT           reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    IMAGINARY       reduce using rule 184 (AssignOp -> MULT_ASSIGN .)
    STRING          reduce using rule 184 (AssignOp -> MULT_ASSIGN .)


state 290

    (185) AssignOp -> DIV_ASSIGN .

    NOT             reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    ADD             reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    SUB             reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    MULT            reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    AND             reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    TYPECAST        reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    INTEGER         reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    OCTAL           reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    HEX             reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    RUNE            reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    FLOAT           reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    IMAGINARY       reduce using rule 185 (AssignOp -> DIV_ASSIGN .)
    STRING          reduce using rule 185 (AssignOp -> DIV_ASSIGN .)


state 291

    (186) AssignOp -> MOD_ASSIGN .

    NOT             reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    ADD             reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    SUB             reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    MULT            reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    AND             reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    TYPECAST        reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    INTEGER         reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    OCTAL           reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    HEX             reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    RUNE            reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    FLOAT           reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    IMAGINARY       reduce using rule 186 (AssignOp -> MOD_ASSIGN .)
    STRING          reduce using rule 186 (AssignOp -> MOD_ASSIGN .)


state 292

    (187) AssignOp -> AND_ASSIGN .

    NOT             reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    ADD             reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    SUB             reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    MULT            reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    AND             reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    TYPECAST        reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    INTEGER         reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    OCTAL           reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    HEX             reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    RUNE            reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    FLOAT           reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    IMAGINARY       reduce using rule 187 (AssignOp -> AND_ASSIGN .)
    STRING          reduce using rule 187 (AssignOp -> AND_ASSIGN .)


state 293

    (188) AssignOp -> OR_ASSIGN .

    NOT             reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    ADD             reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    SUB             reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    MULT            reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    AND             reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    TYPECAST        reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    INTEGER         reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    OCTAL           reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    HEX             reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    RUNE            reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    FLOAT           reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    IMAGINARY       reduce using rule 188 (AssignOp -> OR_ASSIGN .)
    STRING          reduce using rule 188 (AssignOp -> OR_ASSIGN .)


state 294

    (189) AssignOp -> XOR_ASSIGN .

    NOT             reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    ADD             reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    SUB             reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    MULT            reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    AND             reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    TYPECAST        reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    INTEGER         reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    OCTAL           reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    HEX             reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    RUNE            reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    FLOAT           reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    IMAGINARY       reduce using rule 189 (AssignOp -> XOR_ASSIGN .)
    STRING          reduce using rule 189 (AssignOp -> XOR_ASSIGN .)


state 295

    (190) AssignOp -> LSHIFT_ASSIGN .

    NOT             reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    ADD             reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    SUB             reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    MULT            reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    AND             reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    TYPECAST        reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    INTEGER         reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    OCTAL           reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    HEX             reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    RUNE            reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    FLOAT           reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    IMAGINARY       reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)
    STRING          reduce using rule 190 (AssignOp -> LSHIFT_ASSIGN .)


state 296

    (191) AssignOp -> RSHIFT_ASSIGN .

    NOT             reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    ADD             reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    SUB             reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    MULT            reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    AND             reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    TYPECAST        reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    INTEGER         reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    OCTAL           reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    HEX             reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    RUNE            reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    FLOAT           reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    IMAGINARY       reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)
    STRING          reduce using rule 191 (AssignOp -> RSHIFT_ASSIGN .)


state 297

    (192) AssignOp -> ASSIGN .

    NOT             reduce using rule 192 (AssignOp -> ASSIGN .)
    ADD             reduce using rule 192 (AssignOp -> ASSIGN .)
    SUB             reduce using rule 192 (AssignOp -> ASSIGN .)
    MULT            reduce using rule 192 (AssignOp -> ASSIGN .)
    AND             reduce using rule 192 (AssignOp -> ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 192 (AssignOp -> ASSIGN .)
    TYPECAST        reduce using rule 192 (AssignOp -> ASSIGN .)
    IDENTIFIER      reduce using rule 192 (AssignOp -> ASSIGN .)
    INTEGER         reduce using rule 192 (AssignOp -> ASSIGN .)
    OCTAL           reduce using rule 192 (AssignOp -> ASSIGN .)
    HEX             reduce using rule 192 (AssignOp -> ASSIGN .)
    RUNE            reduce using rule 192 (AssignOp -> ASSIGN .)
    FLOAT           reduce using rule 192 (AssignOp -> ASSIGN .)
    IMAGINARY       reduce using rule 192 (AssignOp -> ASSIGN .)
    STRING          reduce using rule 192 (AssignOp -> ASSIGN .)


state 298

    (201) ExprSwitchStmt -> SWITCH ExpressionOpt . LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES

    LEFT_BRACES     shift and go to state 322


state 299

    (208) TypeSwitchStmt -> SWITCH SimpleStmtOpt . TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (209) TypeSwitchGuard -> . IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (210) IdentifierOpt -> . IDENTIFIER QUICK_ASSIGN
    (211) IdentifierOpt -> . epsilon
    (255) epsilon -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 325
    LEFT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    TYPECAST        reduce using rule 255 (epsilon -> .)
    INTEGER         reduce using rule 255 (epsilon -> .)
    OCTAL           reduce using rule 255 (epsilon -> .)
    HEX             reduce using rule 255 (epsilon -> .)
    RUNE            reduce using rule 255 (epsilon -> .)
    FLOAT           reduce using rule 255 (epsilon -> .)
    IMAGINARY       reduce using rule 255 (epsilon -> .)
    STRING          reduce using rule 255 (epsilon -> .)

  ! IDENTIFIER      [ reduce using rule 255 (epsilon -> .) ]

    TypeSwitchGuard                shift and go to state 323
    IdentifierOpt                  shift and go to state 324
    epsilon                        shift and go to state 326

state 300

    (128) ExpressionOpt -> Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (177) ExpressionStmt -> Expression .
    (178) IncDecStmt -> Expression . INC
    (179) IncDecStmt -> Expression . DEC
    (68) ExpressionList -> Expression . ExpressionRep
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (69) ExpressionRep -> . ExpressionRep COMMA Expression
    (70) ExpressionRep -> . epsilon
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (255) epsilon -> .
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 128 (ExpressionOpt -> Expression .)
    SEMICOLON       reduce using rule 177 (ExpressionStmt -> Expression .)
    INC             shift and go to state 273
    DEC             shift and go to state 274
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    COMMA           reduce using rule 255 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 255 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 255 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 255 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 255 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 255 (epsilon -> .)
    AND_ASSIGN      reduce using rule 255 (epsilon -> .)
    OR_ASSIGN       reduce using rule 255 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 255 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 255 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 255 (epsilon -> .)
    ASSIGN          reduce using rule 255 (epsilon -> .)
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    ExpressionRep                  shift and go to state 160
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    epsilon                        shift and go to state 162
    UnaryOp                        shift and go to state 173

state 301

    (129) ExpressionOpt -> epsilon .
    (195) SimpleStmtOpt -> epsilon .
    (170) SimpleStmt -> epsilon .

    LEFT_BRACES     reduce using rule 129 (ExpressionOpt -> epsilon .)
    IDENTIFIER      reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    TYPECAST        reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    INTEGER         reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    OCTAL           reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    HEX             reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    RUNE            reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    FLOAT           reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    IMAGINARY       reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    STRING          reduce using rule 195 (SimpleStmtOpt -> epsilon .)
    SEMICOLON       reduce using rule 170 (SimpleStmt -> epsilon .)


state 302

    (194) SimpleStmtOpt -> SimpleStmt . SEMICOLON

    SEMICOLON       shift and go to state 327


state 303

    (86) ShortVarDecl -> IDENTIFIER . QUICK_ASSIGN Expression
    (110) OperandName -> IDENTIFIER .

    QUICK_ASSIGN    shift and go to state 284
    LEFT_BRACKET    reduce using rule 110 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 110 (OperandName -> IDENTIFIER .)
    DOT             reduce using rule 110 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 110 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 110 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 110 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 110 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 110 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 110 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 110 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 110 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 110 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 110 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 110 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 110 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 110 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 110 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 110 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 110 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 110 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 110 (OperandName -> IDENTIFIER .)
    LEFT_BRACES     reduce using rule 110 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 110 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 110 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 110 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 110 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 110 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 110 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 110 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 110 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 110 (OperandName -> IDENTIFIER .)


state 304

    (26) StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .

    ASSIGN          reduce using rule 26 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    SEMICOLON       reduce using rule 26 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    RIGHT_PARANTHESIS reduce using rule 26 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    LEFT_BRACES     reduce using rule 26 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    COMMA           reduce using rule 26 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    LEFT_PARANTHESIS reduce using rule 26 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    COLON           reduce using rule 26 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)


state 305

    (27) FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .

    RIGHT_BRACES    reduce using rule 27 (FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .)


state 306

    (29) FieldDecl -> IdentifierList Type .

    SEMICOLON       reduce using rule 29 (FieldDecl -> IdentifierList Type .)


state 307

    (121) Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 328


state 308

    (122) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression . COLON Expression RIGHT_BRACKET
    (128) ExpressionOpt -> Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    COLON           shift and go to state 329
    RIGHT_BRACKET   reduce using rule 128 (ExpressionOpt -> Expression .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 309

    (123) TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .

    LEFT_BRACKET    reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DOT             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    EQ              reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LT              reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    GT              reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    OR              reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    XOR             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DIV             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MOD             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    ADD             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SUB             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MULT            reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    AND             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COLON           reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    INC             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DEC             reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 123 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)


state 310

    (154) Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .

    LEFT_BRACKET    reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DOT             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    EQ              reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LT              reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GT              reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR              reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ADD             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SUB             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT            reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COLON           reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    INC             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DEC             reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 154 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)


state 311

    (159) Statement -> CreateScope Block EndScope .

    SEMICOLON       reduce using rule 159 (Statement -> CreateScope Block EndScope .)


state 312

    (175) LabeledStmt -> Label COLON Statement .

    SEMICOLON       reduce using rule 175 (LabeledStmt -> Label COLON Statement .)


state 313

    (193) IfStmt -> IF Expression CreateScope . Block EndScope ElseOpt
    (49) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 134

    Block                          shift and go to state 330

state 314

    (220) ForStmt -> FOR CreateScope ConditionBlockOpt . Block EndScope
    (49) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 134

    Block                          shift and go to state 331

state 315

    (221) ConditionBlockOpt -> epsilon .
    (170) SimpleStmt -> epsilon .

    LEFT_BRACES     reduce using rule 221 (ConditionBlockOpt -> epsilon .)
    SEMICOLON       reduce using rule 170 (SimpleStmt -> epsilon .)


state 316

    (222) ConditionBlockOpt -> Condition .

    LEFT_BRACES     reduce using rule 222 (ConditionBlockOpt -> Condition .)


state 317

    (223) ConditionBlockOpt -> ForClause .

    LEFT_BRACES     reduce using rule 223 (ConditionBlockOpt -> ForClause .)


state 318

    (224) Condition -> Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (177) ExpressionStmt -> Expression .
    (178) IncDecStmt -> Expression . INC
    (179) IncDecStmt -> Expression . DEC
    (68) ExpressionList -> Expression . ExpressionRep
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (69) ExpressionRep -> . ExpressionRep COMMA Expression
    (70) ExpressionRep -> . epsilon
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (255) epsilon -> .
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 224 (Condition -> Expression .)
    SEMICOLON       reduce using rule 177 (ExpressionStmt -> Expression .)
    INC             shift and go to state 273
    DEC             shift and go to state 274
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    COMMA           reduce using rule 255 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 255 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 255 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 255 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 255 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 255 (epsilon -> .)
    AND_ASSIGN      reduce using rule 255 (epsilon -> .)
    OR_ASSIGN       reduce using rule 255 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 255 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 255 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 255 (epsilon -> .)
    ASSIGN          reduce using rule 255 (epsilon -> .)
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    ExpressionRep                  shift and go to state 160
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    epsilon                        shift and go to state 162
    UnaryOp                        shift and go to state 173

state 319

    (225) ForClause -> SimpleStmt . SEMICOLON ConditionOpt SEMICOLON SimpleStmt

    SEMICOLON       shift and go to state 332


state 320

    (86) ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    SEMICOLON       reduce using rule 86 (ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .)
    LEFT_BRACES     reduce using rule 86 (ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 321

    (180) Assignment -> ExpressionList assign_op ExpressionList .

    SEMICOLON       reduce using rule 180 (Assignment -> ExpressionList assign_op ExpressionList .)
    LEFT_BRACES     reduce using rule 180 (Assignment -> ExpressionList assign_op ExpressionList .)


state 322

    (201) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES . ExprCaseClauseRep RIGHT_BRACES
    (203) ExprCaseClauseRep -> . ExprCaseClauseRep ExprCaseClause
    (204) ExprCaseClauseRep -> . epsilon
    (255) epsilon -> .

    RIGHT_BRACES    reduce using rule 255 (epsilon -> .)
    CASE            reduce using rule 255 (epsilon -> .)
    DEFAULT         reduce using rule 255 (epsilon -> .)

    ExprCaseClauseRep              shift and go to state 333
    epsilon                        shift and go to state 334

state 323

    (208) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard . LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES

    LEFT_BRACES     shift and go to state 335


state 324

    (209) TypeSwitchGuard -> IdentifierOpt . PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    PrimaryExpr                    shift and go to state 336
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 325

    (210) IdentifierOpt -> IDENTIFIER . QUICK_ASSIGN

    QUICK_ASSIGN    shift and go to state 337


state 326

    (211) IdentifierOpt -> epsilon .

    LEFT_PARANTHESIS reduce using rule 211 (IdentifierOpt -> epsilon .)
    TYPECAST        reduce using rule 211 (IdentifierOpt -> epsilon .)
    IDENTIFIER      reduce using rule 211 (IdentifierOpt -> epsilon .)
    INTEGER         reduce using rule 211 (IdentifierOpt -> epsilon .)
    OCTAL           reduce using rule 211 (IdentifierOpt -> epsilon .)
    HEX             reduce using rule 211 (IdentifierOpt -> epsilon .)
    RUNE            reduce using rule 211 (IdentifierOpt -> epsilon .)
    FLOAT           reduce using rule 211 (IdentifierOpt -> epsilon .)
    IMAGINARY       reduce using rule 211 (IdentifierOpt -> epsilon .)
    STRING          reduce using rule 211 (IdentifierOpt -> epsilon .)


state 327

    (194) SimpleStmtOpt -> SimpleStmt SEMICOLON .

    IDENTIFIER      reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    LEFT_PARANTHESIS reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    TYPECAST        reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    INTEGER         reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    OCTAL           reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    HEX             reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    RUNE            reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    FLOAT           reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    IMAGINARY       reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    STRING          reduce using rule 194 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)


state 328

    (121) Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DOT             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LOG_OR          reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LOG_AND         reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    EQ              reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    NEQ             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LT              reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    GT              reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEQ             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    GEQ             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    OR              reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    XOR             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DIV             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MOD             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LSHIFT          reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RSHIFT          reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    ADD             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    SUB             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MULT            reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    AND             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    COMMA           reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    COLON           reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    INC             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DEC             reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    ASSIGN          reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 121 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)


state 329

    (122) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON . Expression RIGHT_BRACKET
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    Expression                     shift and go to state 338
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 330

    (193) IfStmt -> IF Expression CreateScope Block . EndScope ElseOpt
    (91) EndScope -> .

    ELSE            reduce using rule 91 (EndScope -> .)
    SEMICOLON       reduce using rule 91 (EndScope -> .)

    EndScope                       shift and go to state 339

state 331

    (220) ForStmt -> FOR CreateScope ConditionBlockOpt Block . EndScope
    (91) EndScope -> .

    SEMICOLON       reduce using rule 91 (EndScope -> .)

    EndScope                       shift and go to state 340

state 332

    (225) ForClause -> SimpleStmt SEMICOLON . ConditionOpt SEMICOLON SimpleStmt
    (226) ConditionOpt -> . epsilon
    (227) ConditionOpt -> . Condition
    (255) epsilon -> .
    (224) Condition -> . Expression
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    SEMICOLON       reduce using rule 255 (epsilon -> .)
    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ConditionOpt                   shift and go to state 341
    epsilon                        shift and go to state 342
    Condition                      shift and go to state 343
    Expression                     shift and go to state 344
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 333

    (201) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep . RIGHT_BRACES
    (203) ExprCaseClauseRep -> ExprCaseClauseRep . ExprCaseClause
    (205) ExprCaseClause -> . ExprSwitchCase COLON StatementList
    (206) ExprSwitchCase -> . CASE ExpressionList
    (207) ExprSwitchCase -> . DEFAULT

    RIGHT_BRACES    shift and go to state 345
    CASE            shift and go to state 348
    DEFAULT         shift and go to state 349

    ExprCaseClause                 shift and go to state 346
    ExprSwitchCase                 shift and go to state 347

state 334

    (204) ExprCaseClauseRep -> epsilon .

    RIGHT_BRACES    reduce using rule 204 (ExprCaseClauseRep -> epsilon .)
    CASE            reduce using rule 204 (ExprCaseClauseRep -> epsilon .)
    DEFAULT         reduce using rule 204 (ExprCaseClauseRep -> epsilon .)


state 335

    (208) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES . TypeCaseClauseOpt RIGHT_BRACES
    (212) TypeCaseClauseOpt -> . TypeCaseClauseOpt TypeCaseClause
    (213) TypeCaseClauseOpt -> . epsilon
    (255) epsilon -> .

    RIGHT_BRACES    reduce using rule 255 (epsilon -> .)
    CASE            reduce using rule 255 (epsilon -> .)
    DEFAULT         reduce using rule 255 (epsilon -> .)

    TypeCaseClauseOpt              shift and go to state 350
    epsilon                        shift and go to state 351

state 336

    (209) TypeSwitchGuard -> IdentifierOpt PrimaryExpr . DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (113) PrimaryExpr -> PrimaryExpr . Selector
    (115) PrimaryExpr -> PrimaryExpr . LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> PrimaryExpr . Slice
    (117) PrimaryExpr -> PrimaryExpr . TypeAssertion
    (118) PrimaryExpr -> PrimaryExpr . LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (119) Selector -> . DOT IDENTIFIER
    (121) Slice -> . LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (122) Slice -> . LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (123) TypeAssertion -> . DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    DOT             shift and go to state 352
    LEFT_BRACKET    shift and go to state 181
    LEFT_PARANTHESIS shift and go to state 184

    Selector                       shift and go to state 180
    Slice                          shift and go to state 182
    TypeAssertion                  shift and go to state 183

state 337

    (210) IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .

    LEFT_PARANTHESIS reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    TYPECAST        reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    IDENTIFIER      reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    INTEGER         reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    OCTAL           reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    HEX             reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    RUNE            reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    FLOAT           reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    IMAGINARY       reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    STRING          reduce using rule 210 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)


state 338

    (122) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression . RIGHT_BRACKET
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    RIGHT_BRACKET   shift and go to state 353
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 339

    (193) IfStmt -> IF Expression CreateScope Block EndScope . ElseOpt
    (196) ElseOpt -> . ELSE IfStmt
    (197) ElseOpt -> . ELSE CreateScope Block EndScope
    (198) ElseOpt -> . epsilon
    (255) epsilon -> .

    ELSE            shift and go to state 355
    SEMICOLON       reduce using rule 255 (epsilon -> .)

    ElseOpt                        shift and go to state 354
    epsilon                        shift and go to state 356

state 340

    (220) ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope .

    SEMICOLON       reduce using rule 220 (ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope .)


state 341

    (225) ForClause -> SimpleStmt SEMICOLON ConditionOpt . SEMICOLON SimpleStmt

    SEMICOLON       shift and go to state 357


state 342

    (226) ConditionOpt -> epsilon .

    SEMICOLON       reduce using rule 226 (ConditionOpt -> epsilon .)


state 343

    (227) ConditionOpt -> Condition .

    SEMICOLON       reduce using rule 227 (ConditionOpt -> Condition .)


state 344

    (224) Condition -> Expression .
    (127) Expression -> Expression . BinaryOp Expression
    (133) BinaryOp -> . LOG_OR
    (134) BinaryOp -> . LOG_AND
    (135) BinaryOp -> . RelOp
    (136) BinaryOp -> . AddMulOp
    (137) RelOp -> . EQ
    (138) RelOp -> . NEQ
    (139) RelOp -> . LT
    (140) RelOp -> . GT
    (141) RelOp -> . LEQ
    (142) RelOp -> . GEQ
    (143) AddMulOp -> . UnaryOp
    (144) AddMulOp -> . OR
    (145) AddMulOp -> . XOR
    (146) AddMulOp -> . DIV
    (147) AddMulOp -> . MOD
    (148) AddMulOp -> . LSHIFT
    (149) AddMulOp -> . RSHIFT
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND

    SEMICOLON       reduce using rule 224 (Condition -> Expression .)
    LOG_OR          shift and go to state 163
    LOG_AND         shift and go to state 164
    EQ              shift and go to state 167
    NEQ             shift and go to state 168
    LT              shift and go to state 169
    GT              shift and go to state 170
    LEQ             shift and go to state 171
    GEQ             shift and go to state 172
    OR              shift and go to state 174
    XOR             shift and go to state 175
    DIV             shift and go to state 176
    MOD             shift and go to state 177
    LSHIFT          shift and go to state 178
    RSHIFT          shift and go to state 179
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119

    BinaryOp                       shift and go to state 161
    RelOp                          shift and go to state 165
    AddMulOp                       shift and go to state 166
    UnaryOp                        shift and go to state 173

state 345

    (201) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES .

    SEMICOLON       reduce using rule 201 (ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES .)


state 346

    (203) ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .

    RIGHT_BRACES    reduce using rule 203 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)
    CASE            reduce using rule 203 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)
    DEFAULT         reduce using rule 203 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)


state 347

    (205) ExprCaseClause -> ExprSwitchCase . COLON StatementList

    COLON           shift and go to state 358


state 348

    (206) ExprSwitchCase -> CASE . ExpressionList
    (68) ExpressionList -> . Expression ExpressionRep
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    IDENTIFIER      shift and go to state 124
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    ExpressionList                 shift and go to state 359
    Expression                     shift and go to state 108
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 349

    (207) ExprSwitchCase -> DEFAULT .

    COLON           reduce using rule 207 (ExprSwitchCase -> DEFAULT .)


state 350

    (208) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt . RIGHT_BRACES
    (212) TypeCaseClauseOpt -> TypeCaseClauseOpt . TypeCaseClause
    (214) TypeCaseClause -> . TypeSwitchCase COLON StatementList
    (215) TypeSwitchCase -> . CASE TypeList
    (216) TypeSwitchCase -> . DEFAULT

    RIGHT_BRACES    shift and go to state 360
    CASE            shift and go to state 363
    DEFAULT         shift and go to state 364

    TypeCaseClause                 shift and go to state 361
    TypeSwitchCase                 shift and go to state 362

state 351

    (213) TypeCaseClauseOpt -> epsilon .

    RIGHT_BRACES    reduce using rule 213 (TypeCaseClauseOpt -> epsilon .)
    CASE            reduce using rule 213 (TypeCaseClauseOpt -> epsilon .)
    DEFAULT         reduce using rule 213 (TypeCaseClauseOpt -> epsilon .)


state 352

    (209) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT . LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (119) Selector -> DOT . IDENTIFIER
    (123) TypeAssertion -> DOT . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 365
    IDENTIFIER      shift and go to state 216


state 353

    (122) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DOT             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LOG_OR          reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LOG_AND         reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    EQ              reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    NEQ             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LT              reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    GT              reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEQ             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    GEQ             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    OR              reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    XOR             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DIV             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MOD             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LSHIFT          reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RSHIFT          reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    ADD             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    SUB             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MULT            reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    AND             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    COMMA           reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    COLON           reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    INC             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DEC             reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    ASSIGN          reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 122 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)


state 354

    (193) IfStmt -> IF Expression CreateScope Block EndScope ElseOpt .

    SEMICOLON       reduce using rule 193 (IfStmt -> IF Expression CreateScope Block EndScope ElseOpt .)


state 355

    (196) ElseOpt -> ELSE . IfStmt
    (197) ElseOpt -> ELSE . CreateScope Block EndScope
    (193) IfStmt -> . IF Expression CreateScope Block EndScope ElseOpt
    (90) CreateScope -> .

    IF              shift and go to state 248
    LEFT_BRACES     reduce using rule 90 (CreateScope -> .)

    IfStmt                         shift and go to state 366
    CreateScope                    shift and go to state 367

state 356

    (198) ElseOpt -> epsilon .

    SEMICOLON       reduce using rule 198 (ElseOpt -> epsilon .)


state 357

    (225) ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON . SimpleStmt
    (170) SimpleStmt -> . epsilon
    (171) SimpleStmt -> . ExpressionStmt
    (172) SimpleStmt -> . IncDecStmt
    (173) SimpleStmt -> . Assignment
    (174) SimpleStmt -> . ShortVarDecl
    (255) epsilon -> .
    (177) ExpressionStmt -> . Expression
    (178) IncDecStmt -> . Expression INC
    (179) IncDecStmt -> . Expression DEC
    (180) Assignment -> . ExpressionList assign_op ExpressionList
    (86) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (126) Expression -> . UnaryExpr
    (127) Expression -> . Expression BinaryOp Expression
    (68) ExpressionList -> . Expression ExpressionRep
    (130) UnaryExpr -> . PrimaryExpr
    (131) UnaryExpr -> . UnaryOp UnaryExpr
    (132) UnaryExpr -> . NOT UnaryExpr
    (112) PrimaryExpr -> . Operand
    (113) PrimaryExpr -> . PrimaryExpr Selector
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (116) PrimaryExpr -> . PrimaryExpr Slice
    (117) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (118) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (150) UnaryOp -> . ADD
    (151) UnaryOp -> . SUB
    (152) UnaryOp -> . MULT
    (153) UnaryOp -> . AND
    (95) Operand -> . Literal
    (96) Operand -> . OperandName
    (97) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (154) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (98) Literal -> . BasicLit
    (110) OperandName -> . IDENTIFIER
    (99) BasicLit -> . I INTEGER
    (100) BasicLit -> . I OCTAL
    (101) BasicLit -> . I HEX
    (102) BasicLit -> . F FLOAT
    (103) BasicLit -> . C IMAGINARY
    (104) BasicLit -> . I RUNE
    (105) BasicLit -> . S STRING
    (106) I -> .
    (107) F -> .
    (108) C -> .
    (109) S -> .

    LEFT_BRACES     reduce using rule 255 (epsilon -> .)
    IDENTIFIER      shift and go to state 303
    NOT             shift and go to state 112
    ADD             shift and go to state 116
    SUB             shift and go to state 117
    MULT            shift and go to state 118
    AND             shift and go to state 119
    LEFT_PARANTHESIS shift and go to state 115
    TYPECAST        shift and go to state 122
    INTEGER         reduce using rule 106 (I -> .)
    OCTAL           reduce using rule 106 (I -> .)
    HEX             reduce using rule 106 (I -> .)
    RUNE            reduce using rule 106 (I -> .)
    FLOAT           reduce using rule 107 (F -> .)
    IMAGINARY       reduce using rule 108 (C -> .)
    STRING          reduce using rule 109 (S -> .)

    SimpleStmt                     shift and go to state 368
    epsilon                        shift and go to state 236
    ExpressionStmt                 shift and go to state 237
    IncDecStmt                     shift and go to state 238
    Assignment                     shift and go to state 239
    ShortVarDecl                   shift and go to state 240
    Expression                     shift and go to state 243
    ExpressionList                 shift and go to state 253
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 110
    UnaryOp                        shift and go to state 111
    Operand                        shift and go to state 113
    Conversion                     shift and go to state 114
    Literal                        shift and go to state 120
    OperandName                    shift and go to state 121
    BasicLit                       shift and go to state 123
    I                              shift and go to state 125
    F                              shift and go to state 126
    C                              shift and go to state 127
    S                              shift and go to state 128

state 358

    (205) ExprCaseClause -> ExprSwitchCase COLON . StatementList
    (50) StatementList -> . StatementRep
    (51) StatementRep -> . StatementRep Statement SEMICOLON
    (52) StatementRep -> . epsilon
    (255) epsilon -> .

    RETURN          reduce using rule 255 (epsilon -> .)
    SCAN            reduce using rule 255 (epsilon -> .)
    BREAK           reduce using rule 255 (epsilon -> .)
    CONTINUE        reduce using rule 255 (epsilon -> .)
    GOTO            reduce using rule 255 (epsilon -> .)
    PRINT           reduce using rule 255 (epsilon -> .)
    IF              reduce using rule 255 (epsilon -> .)
    FOR             reduce using rule 255 (epsilon -> .)
    CONST           reduce using rule 255 (epsilon -> .)
    TYPE            reduce using rule 255 (epsilon -> .)
    VAR             reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)
    SWITCH          reduce using rule 255 (epsilon -> .)
    NOT             reduce using rule 255 (epsilon -> .)
    ADD             reduce using rule 255 (epsilon -> .)
    SUB             reduce using rule 255 (epsilon -> .)
    MULT            reduce using rule 255 (epsilon -> .)
    AND             reduce using rule 255 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    TYPECAST        reduce using rule 255 (epsilon -> .)
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    LEFT_BRACES     reduce using rule 255 (epsilon -> .)
    INTEGER         reduce using rule 255 (epsilon -> .)
    OCTAL           reduce using rule 255 (epsilon -> .)
    HEX             reduce using rule 255 (epsilon -> .)
    RUNE            reduce using rule 255 (epsilon -> .)
    FLOAT           reduce using rule 255 (epsilon -> .)
    IMAGINARY       reduce using rule 255 (epsilon -> .)
    STRING          reduce using rule 255 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 255 (epsilon -> .)
    CASE            reduce using rule 255 (epsilon -> .)
    DEFAULT         reduce using rule 255 (epsilon -> .)

    StatementList                  shift and go to state 369
    StatementRep                   shift and go to state 198
    epsilon                        shift and go to state 199

state 359

    (206) ExprSwitchCase -> CASE ExpressionList .

    COLON           reduce using rule 206 (ExprSwitchCase -> CASE ExpressionList .)


state 360

    (208) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES .

    SEMICOLON       reduce using rule 208 (TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES .)


state 361

    (212) TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .

    RIGHT_BRACES    reduce using rule 212 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)
    CASE            reduce using rule 212 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)
    DEFAULT         reduce using rule 212 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)


state 362

    (214) TypeCaseClause -> TypeSwitchCase . COLON StatementList

    COLON           shift and go to state 370


state 363

    (215) TypeSwitchCase -> CASE . TypeList
    (217) TypeList -> . Type TypeRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    TypeList                       shift and go to state 371
    Type                           shift and go to state 372
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 364

    (216) TypeSwitchCase -> DEFAULT .

    COLON           reduce using rule 216 (TypeSwitchCase -> DEFAULT .)


state 365

    (209) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS . TYPE RIGHT_PARANTHESIS
    (123) TypeAssertion -> DOT LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    TYPE            shift and go to state 373
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 264
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 366

    (196) ElseOpt -> ELSE IfStmt .

    SEMICOLON       reduce using rule 196 (ElseOpt -> ELSE IfStmt .)


state 367

    (197) ElseOpt -> ELSE CreateScope . Block EndScope
    (49) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 134

    Block                          shift and go to state 374

state 368

    (225) ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt .

    LEFT_BRACES     reduce using rule 225 (ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt .)


state 369

    (205) ExprCaseClause -> ExprSwitchCase COLON StatementList .

    RIGHT_BRACES    reduce using rule 205 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    CASE            reduce using rule 205 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 205 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)


state 370

    (214) TypeCaseClause -> TypeSwitchCase COLON . StatementList
    (50) StatementList -> . StatementRep
    (51) StatementRep -> . StatementRep Statement SEMICOLON
    (52) StatementRep -> . epsilon
    (255) epsilon -> .

    RETURN          reduce using rule 255 (epsilon -> .)
    SCAN            reduce using rule 255 (epsilon -> .)
    BREAK           reduce using rule 255 (epsilon -> .)
    CONTINUE        reduce using rule 255 (epsilon -> .)
    GOTO            reduce using rule 255 (epsilon -> .)
    PRINT           reduce using rule 255 (epsilon -> .)
    IF              reduce using rule 255 (epsilon -> .)
    FOR             reduce using rule 255 (epsilon -> .)
    CONST           reduce using rule 255 (epsilon -> .)
    TYPE            reduce using rule 255 (epsilon -> .)
    VAR             reduce using rule 255 (epsilon -> .)
    IDENTIFIER      reduce using rule 255 (epsilon -> .)
    SWITCH          reduce using rule 255 (epsilon -> .)
    NOT             reduce using rule 255 (epsilon -> .)
    ADD             reduce using rule 255 (epsilon -> .)
    SUB             reduce using rule 255 (epsilon -> .)
    MULT            reduce using rule 255 (epsilon -> .)
    AND             reduce using rule 255 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 255 (epsilon -> .)
    TYPECAST        reduce using rule 255 (epsilon -> .)
    SEMICOLON       reduce using rule 255 (epsilon -> .)
    LEFT_BRACES     reduce using rule 255 (epsilon -> .)
    INTEGER         reduce using rule 255 (epsilon -> .)
    OCTAL           reduce using rule 255 (epsilon -> .)
    HEX             reduce using rule 255 (epsilon -> .)
    RUNE            reduce using rule 255 (epsilon -> .)
    FLOAT           reduce using rule 255 (epsilon -> .)
    IMAGINARY       reduce using rule 255 (epsilon -> .)
    STRING          reduce using rule 255 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 255 (epsilon -> .)
    CASE            reduce using rule 255 (epsilon -> .)
    DEFAULT         reduce using rule 255 (epsilon -> .)

    StatementList                  shift and go to state 375
    StatementRep                   shift and go to state 198
    epsilon                        shift and go to state 199

state 371

    (215) TypeSwitchCase -> CASE TypeList .

    COLON           reduce using rule 215 (TypeSwitchCase -> CASE TypeList .)


state 372

    (217) TypeList -> Type . TypeRep
    (218) TypeRep -> . TypeRep COMMA Type
    (219) TypeRep -> . epsilon
    (255) epsilon -> .

    COMMA           reduce using rule 255 (epsilon -> .)
    COLON           reduce using rule 255 (epsilon -> .)

    TypeRep                        shift and go to state 376
    epsilon                        shift and go to state 377

state 373

    (209) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE . RIGHT_PARANTHESIS
    (14) TypeToken -> TYPE . IDENTIFIER

    RIGHT_PARANTHESIS shift and go to state 378
    IDENTIFIER      shift and go to state 92


state 374

    (197) ElseOpt -> ELSE CreateScope Block . EndScope
    (91) EndScope -> .

    SEMICOLON       reduce using rule 91 (EndScope -> .)

    EndScope                       shift and go to state 379

state 375

    (214) TypeCaseClause -> TypeSwitchCase COLON StatementList .

    RIGHT_BRACES    reduce using rule 214 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)
    CASE            reduce using rule 214 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 214 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)


state 376

    (217) TypeList -> Type TypeRep .
    (218) TypeRep -> TypeRep . COMMA Type

    COLON           reduce using rule 217 (TypeList -> Type TypeRep .)
    COMMA           shift and go to state 380


state 377

    (219) TypeRep -> epsilon .

    COMMA           reduce using rule 219 (TypeRep -> epsilon .)
    COLON           reduce using rule 219 (TypeRep -> epsilon .)


state 378

    (209) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS .

    LEFT_BRACES     reduce using rule 209 (TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS .)


state 379

    (197) ElseOpt -> ELSE CreateScope Block EndScope .

    SEMICOLON       reduce using rule 197 (ElseOpt -> ELSE CreateScope Block EndScope .)


state 380

    (218) TypeRep -> TypeRep COMMA . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (111) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (26) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (33) PointerType -> . MULT BaseType
    (89) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 89 (CreateFuncScope -> .)

    Type                           shift and go to state 381
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 381

    (218) TypeRep -> TypeRep COMMA Type .

    COMMA           reduce using rule 218 (TypeRep -> TypeRep COMMA Type .)
    COLON           reduce using rule 218 (TypeRep -> TypeRep COMMA Type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOG_OR in state 209 resolved as shift
WARNING: shift/reduce conflict for LOG_AND in state 209 resolved as shift
WARNING: shift/reduce conflict for EQ in state 209 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 209 resolved as shift
WARNING: shift/reduce conflict for LT in state 209 resolved as shift
WARNING: shift/reduce conflict for GT in state 209 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 209 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 209 resolved as shift
WARNING: shift/reduce conflict for OR in state 209 resolved as shift
WARNING: shift/reduce conflict for XOR in state 209 resolved as shift
WARNING: shift/reduce conflict for DIV in state 209 resolved as shift
WARNING: shift/reduce conflict for MOD in state 209 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 209 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 209 resolved as shift
WARNING: shift/reduce conflict for ADD in state 209 resolved as shift
WARNING: shift/reduce conflict for SUB in state 209 resolved as shift
WARNING: shift/reduce conflict for MULT in state 209 resolved as shift
WARNING: shift/reduce conflict for AND in state 209 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 254 resolved as shift
WARNING: shift/reduce conflict for LEFT_PARANTHESIS in state 254 resolved as shift
WARNING: shift/reduce conflict for TYPECAST in state 254 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 299 resolved as shift
WARNING: reduce/reduce conflict in state 254 resolved using rule (I -> <empty>)
WARNING: rejected rule (epsilon -> <empty>) in state 254
WARNING: reduce/reduce conflict in state 254 resolved using rule (F -> <empty>)
WARNING: rejected rule (epsilon -> <empty>) in state 254
WARNING: reduce/reduce conflict in state 254 resolved using rule (C -> <empty>)
WARNING: rejected rule (epsilon -> <empty>) in state 254
WARNING: reduce/reduce conflict in state 254 resolved using rule (S -> <empty>)
WARNING: rejected rule (epsilon -> <empty>) in state 254
