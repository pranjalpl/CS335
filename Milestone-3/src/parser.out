Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RANGE

Grammar

Rule 0     S' -> start
Rule 1     start -> SourceFile
Rule 2     Type -> TypeName
Rule 3     Type -> TypeLit
Rule 4     Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
Rule 5     TypeName -> TypeToken
Rule 6     TypeName -> QualifiedIdent
Rule 7     TypeToken -> INT_T
Rule 8     TypeToken -> FLOAT_T
Rule 9     TypeToken -> UINT_T
Rule 10    TypeToken -> COMPLEX_T
Rule 11    TypeToken -> RUNE_T
Rule 12    TypeToken -> BOOL_T
Rule 13    TypeToken -> STRING_T
Rule 14    TypeToken -> TYPE IDENTIFIER
Rule 15    TypeLit -> ArrayType
Rule 16    TypeLit -> StructType
Rule 17    TypeLit -> PointerType
Rule 18    TypeOpt -> Type
Rule 19    TypeOpt -> epsilon
Rule 20    ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
Rule 21    ArrayLength -> Expression
Rule 22    ElementType -> Type
Rule 23    StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
Rule 24    FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON
Rule 25    FieldDeclRep -> epsilon
Rule 26    FieldDecl -> IdentifierList Type
Rule 27    TagOpt -> Tag
Rule 28    TagOpt -> epsilon
Rule 29    Tag -> STRING
Rule 30    PointerType -> MULT BaseType
Rule 31    BaseType -> Type
Rule 32    Signature -> Parameters TypeOpt
Rule 33    ResultOpt -> Result
Rule 34    ResultOpt -> epsilon
Rule 35    Result -> Parameters
Rule 36    Result -> Type
Rule 37    Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS
Rule 38    ParameterListOpt -> ParametersList
Rule 39    ParameterListOpt -> epsilon
Rule 40    ParametersList -> ParameterDecl
Rule 41    ParametersList -> ParameterDeclCommaRep
Rule 42    ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl
Rule 43    ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl
Rule 44    ParameterDecl -> IdentifierList Type
Rule 45    ParameterDecl -> Type
Rule 46    Block -> LEFT_BRACES StatementList RIGHT_BRACES
Rule 47    StatementList -> StatementRep
Rule 48    StatementRep -> StatementRep Statement SEMICOLON
Rule 49    StatementRep -> epsilon
Rule 50    Declaration -> ConstDecl
Rule 51    Declaration -> TypeDecl
Rule 52    Declaration -> VarDecl
Rule 53    TopLevelDecl -> Declaration
Rule 54    TopLevelDecl -> FunctionDecl
Rule 55    ConstDecl -> CONST ConstSpec
Rule 56    ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
Rule 57    ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON
Rule 58    ConstSpecRep -> epsilon
Rule 59    ConstSpec -> IdentifierList Type ASSIGN ExpressionList
Rule 60    TypeExprListOpt -> TypeOpt ASSIGN ExpressionList
Rule 61    TypeExprListOpt -> epsilon
Rule 62    IdentifierList -> IDENTIFIER IdentifierRep
Rule 63    IdentifierRep -> IdentifierRep COMMA IDENTIFIER
Rule 64    IdentifierRep -> epsilon
Rule 65    ExpressionList -> Expression ExpressionRep
Rule 66    ExpressionRep -> ExpressionRep COMMA Expression
Rule 67    ExpressionRep -> epsilon
Rule 68    TypeDecl -> TYPE TypeSpec
Rule 69    TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
Rule 70    TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON
Rule 71    TypeSpecRep -> epsilon
Rule 72    TypeSpec -> TypeDef
Rule 73    AliasDecl -> IDENTIFIER ASSIGN Type
Rule 74    TypeDef -> IDENTIFIER Type
Rule 75    VarDecl -> VAR VarSpec
Rule 76    VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
Rule 77    VarSpecRep -> VarSpecRep VarSpec SEMICOLON
Rule 78    VarSpecRep -> epsilon
Rule 79    VarSpec -> IdentifierList Type ExpressionListOpt
Rule 80    VarSpec -> IdentifierList ASSIGN ExpressionList
Rule 81    ExpressionListOpt -> ASSIGN ExpressionList
Rule 82    ExpressionListOpt -> epsilon
Rule 83    ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression
Rule 84    FunctionDecl -> FUNC FunctionName CreateScope Function EndScope
Rule 85    FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope
Rule 86    CreateFuncScope -> <empty>
Rule 87    CreateScope -> <empty>
Rule 88    EndScope -> <empty>
Rule 89    FunctionName -> IDENTIFIER
Rule 90    Function -> Signature FunctionBody
Rule 91    FunctionBody -> Block
Rule 92    Operand -> Literal
Rule 93    Operand -> OperandName
Rule 94    Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
Rule 95    Literal -> BasicLit
Rule 96    BasicLit -> I INTEGER
Rule 97    BasicLit -> I OCTAL
Rule 98    BasicLit -> I HEX
Rule 99    BasicLit -> F FLOAT
Rule 100   BasicLit -> C IMAGINARY
Rule 101   BasicLit -> I RUNE
Rule 102   BasicLit -> S STRING
Rule 103   I -> <empty>
Rule 104   F -> <empty>
Rule 105   C -> <empty>
Rule 106   S -> <empty>
Rule 107   OperandName -> IDENTIFIER
Rule 108   QualifiedIdent -> IDENTIFIER DOT TypeName
Rule 109   PrimaryExpr -> Operand
Rule 110   PrimaryExpr -> PrimaryExpr Selector
Rule 111   PrimaryExpr -> Conversion
Rule 112   PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
Rule 113   PrimaryExpr -> PrimaryExpr Slice
Rule 114   PrimaryExpr -> PrimaryExpr TypeAssertion
Rule 115   PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
Rule 116   Selector -> DOT IDENTIFIER
Rule 117   Index -> LEFT_BRACKET Expression RIGHT_BRACKET
Rule 118   Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
Rule 119   Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
Rule 120   TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
Rule 121   ExpressionListTypeOpt -> ExpressionList
Rule 122   ExpressionListTypeOpt -> epsilon
Rule 123   Expression -> UnaryExpr
Rule 124   Expression -> Expression BinaryOp Expression
Rule 125   ExpressionOpt -> Expression
Rule 126   ExpressionOpt -> epsilon
Rule 127   UnaryExpr -> PrimaryExpr
Rule 128   UnaryExpr -> UnaryOp UnaryExpr
Rule 129   UnaryExpr -> NOT UnaryExpr
Rule 130   BinaryOp -> LOG_OR
Rule 131   BinaryOp -> LOG_AND
Rule 132   BinaryOp -> RelOp
Rule 133   BinaryOp -> AddMulOp
Rule 134   RelOp -> EQ
Rule 135   RelOp -> NEQ
Rule 136   RelOp -> LT
Rule 137   RelOp -> GT
Rule 138   RelOp -> LEQ
Rule 139   RelOp -> GEQ
Rule 140   AddMulOp -> UnaryOp
Rule 141   AddMulOp -> OR
Rule 142   AddMulOp -> XOR
Rule 143   AddMulOp -> DIV
Rule 144   AddMulOp -> MOD
Rule 145   AddMulOp -> LSHIFT
Rule 146   AddMulOp -> RSHIFT
Rule 147   UnaryOp -> ADD
Rule 148   UnaryOp -> SUB
Rule 149   UnaryOp -> MULT
Rule 150   UnaryOp -> AND
Rule 151   Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
Rule 152   Statement -> Declaration
Rule 153   Statement -> LabeledStmt
Rule 154   Statement -> SimpleStmt
Rule 155   Statement -> ReturnStmt
Rule 156   Statement -> CreateScope Block EndScope
Rule 157   Statement -> ScanStmt
Rule 158   Statement -> BreakStmt
Rule 159   Statement -> ContinueStmt
Rule 160   Statement -> GotoStmt
Rule 161   Statement -> PrintStmt
Rule 162   Statement -> IfStmt
Rule 163   Statement -> SwitchStmt
Rule 164   Statement -> ForStmt
Rule 165   PrintStmt -> PRINT Expression
Rule 166   ScanStmt -> SCAN Expression
Rule 167   SimpleStmt -> epsilon
Rule 168   SimpleStmt -> ExpressionStmt
Rule 169   SimpleStmt -> IncDecStmt
Rule 170   SimpleStmt -> Assignment
Rule 171   SimpleStmt -> ShortVarDecl
Rule 172   LabeledStmt -> Label COLON Statement
Rule 173   Label -> IDENTIFIER
Rule 174   ExpressionStmt -> Expression
Rule 175   IncDecStmt -> Expression INC
Rule 176   IncDecStmt -> Expression DEC
Rule 177   Assignment -> ExpressionList assign_op ExpressionList
Rule 178   assign_op -> AssignOp
Rule 179   AssignOp -> PLUS_ASSIGN
Rule 180   AssignOp -> MINUS_ASSIGN
Rule 181   AssignOp -> MULT_ASSIGN
Rule 182   AssignOp -> DIV_ASSIGN
Rule 183   AssignOp -> MOD_ASSIGN
Rule 184   AssignOp -> AND_ASSIGN
Rule 185   AssignOp -> OR_ASSIGN
Rule 186   AssignOp -> XOR_ASSIGN
Rule 187   AssignOp -> LSHIFT_ASSIGN
Rule 188   AssignOp -> RSHIFT_ASSIGN
Rule 189   AssignOp -> ASSIGN
Rule 190   IfStmt -> IF Expression CreateScope Block EndScope ElseOpt
Rule 191   SimpleStmtOpt -> SimpleStmt SEMICOLON
Rule 192   SimpleStmtOpt -> epsilon
Rule 193   ElseOpt -> ELSE IfStmt
Rule 194   ElseOpt -> ELSE CreateScope Block EndScope
Rule 195   ElseOpt -> epsilon
Rule 196   SwitchStmt -> ExprSwitchStmt
Rule 197   SwitchStmt -> TypeSwitchStmt
Rule 198   ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
Rule 199   StartSwitch -> <empty>
Rule 200   ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause
Rule 201   ExprCaseClauseRep -> epsilon
Rule 202   ExprCaseClause -> ExprSwitchCase COLON StatementList
Rule 203   ExprSwitchCase -> CASE ExpressionList
Rule 204   ExprSwitchCase -> DEFAULT
Rule 205   TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
Rule 206   TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
Rule 207   IdentifierOpt -> IDENTIFIER QUICK_ASSIGN
Rule 208   IdentifierOpt -> epsilon
Rule 209   TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause
Rule 210   TypeCaseClauseOpt -> epsilon
Rule 211   TypeCaseClause -> TypeSwitchCase COLON StatementList
Rule 212   TypeSwitchCase -> CASE TypeList
Rule 213   TypeSwitchCase -> DEFAULT
Rule 214   TypeList -> Type TypeRep
Rule 215   TypeRep -> TypeRep COMMA Type
Rule 216   TypeRep -> epsilon
Rule 217   ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope
Rule 218   ConditionBlockOpt -> epsilon
Rule 219   ConditionBlockOpt -> Condition
Rule 220   ConditionBlockOpt -> ForClause
Rule 221   Condition -> Expression
Rule 222   ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt
Rule 223   ConditionOpt -> epsilon
Rule 224   ConditionOpt -> Condition
Rule 225   ExpressionIdentListOpt -> epsilon
Rule 226   ExpressionIdentListOpt -> ExpressionIdentifier
Rule 227   ExpressionIdentifier -> ExpressionList ASSIGN
Rule 228   ReturnStmt -> RETURN ExpressionListPureOpt
Rule 229   ExpressionListPureOpt -> ExpressionList
Rule 230   ExpressionListPureOpt -> epsilon
Rule 231   BreakStmt -> BREAK LabelOpt
Rule 232   ContinueStmt -> CONTINUE LabelOpt
Rule 233   LabelOpt -> Label
Rule 234   LabelOpt -> epsilon
Rule 235   GotoStmt -> GOTO Label
Rule 236   SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep
Rule 237   ImportDeclRep -> epsilon
Rule 238   ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON
Rule 239   TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON
Rule 240   TopLevelDeclRep -> epsilon
Rule 241   PackageClause -> PACKAGE PackageName
Rule 242   PackageName -> IDENTIFIER
Rule 243   ImportDecl -> IMPORT ImportSpec
Rule 244   ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
Rule 245   ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON
Rule 246   ImportSpecRep -> epsilon
Rule 247   ImportSpec -> PackageNameDotOpt ImportPath
Rule 248   PackageNameDotOpt -> DOT
Rule 249   PackageNameDotOpt -> PackageName
Rule 250   PackageNameDotOpt -> epsilon
Rule 251   ImportPath -> STRING
Rule 252   epsilon -> <empty>

Terminals, with rules where they appear

ADD                  : 147
AND                  : 150
AND_ASSIGN           : 184
ASSIGN               : 59 60 73 80 81 189 227
BOOL_T               : 12
BREAK                : 231
CASE                 : 203 212
COLON                : 118 119 119 172 202 211
COMMA                : 42 43 63 66 215
COMPLEX_T            : 10
CONST                : 55 56
CONTINUE             : 232
DEC                  : 176
DEFAULT              : 204 213
DIV                  : 143
DIV_ASSIGN           : 182
DOT                  : 108 116 120 206 248
ELSE                 : 193 194
EQ                   : 134
FLOAT                : 99
FLOAT_T              : 8
FOR                  : 217
FUNC                 : 84 85
GEQ                  : 139
GOTO                 : 235
GT                   : 137
HEX                  : 98
IDENTIFIER           : 14 62 63 73 74 83 89 107 108 116 173 207 242
IF                   : 190
IMAGINARY            : 100
IMPORT               : 243 244
INC                  : 175
INTEGER              : 96
INT_T                : 7
LEFT_BRACES          : 23 46 198 205
LEFT_BRACKET         : 20 112 117 118 119
LEFT_PARANTHESIS     : 4 37 56 69 76 94 115 120 151 206 244
LEQ                  : 138
LOG_AND              : 131
LOG_OR               : 130
LSHIFT               : 145
LSHIFT_ASSIGN        : 187
LT                   : 136
MINUS_ASSIGN         : 180
MOD                  : 144
MOD_ASSIGN           : 183
MULT                 : 30 149
MULT_ASSIGN          : 181
NEQ                  : 135
NOT                  : 129
OCTAL                : 97
OR                   : 141
OR_ASSIGN            : 185
PACKAGE              : 241
PLUS_ASSIGN          : 179
PRINT                : 165
QUICK_ASSIGN         : 83 207
RANGE                : 
RETURN               : 228
RIGHT_BRACES         : 23 46 198 205
RIGHT_BRACKET        : 20 112 117 118 119
RIGHT_PARANTHESIS    : 4 37 56 69 76 94 115 120 151 206 244
RSHIFT               : 146
RSHIFT_ASSIGN        : 188
RUNE                 : 101
RUNE_T               : 11
SCAN                 : 166
SEMICOLON            : 24 48 57 70 77 191 222 222 236 238 239 245
STRING               : 29 102 251
STRING_T             : 13
STRUCT               : 23
SUB                  : 148
SWITCH               : 198 205
TYPE                 : 14 68 69 206
TYPECAST             : 151
UINT_T               : 9
VAR                  : 75 76
XOR                  : 142
XOR_ASSIGN           : 186
error                : 

Nonterminals, with rules where they appear

AddMulOp             : 133
AliasDecl            : 
ArrayLength          : 20
ArrayType            : 15
AssignOp             : 178
Assignment           : 170
BaseType             : 30
BasicLit             : 95
BinaryOp             : 124
Block                : 91 156 190 194 217
BreakStmt            : 158
C                    : 100
Condition            : 219 224
ConditionBlockOpt    : 217
ConditionOpt         : 222
ConstDecl            : 50
ConstSpec            : 55 57
ConstSpecRep         : 56 57
ContinueStmt         : 159
Conversion           : 111
CreateFuncScope      : 23
CreateScope          : 84 85 156 190 194 217
Declaration          : 53 152
ElementType          : 20
ElseOpt              : 190
EndScope             : 23 84 85 156 190 194 217
ExprCaseClause       : 200
ExprCaseClauseRep    : 198 200
ExprSwitchCase       : 202
ExprSwitchStmt       : 196
Expression           : 21 65 66 83 94 112 117 119 119 124 124 125 151 165 166 174 175 176 190 221
ExpressionIdentListOpt : 
ExpressionIdentifier : 226
ExpressionList       : 59 60 80 81 121 177 177 203 227 229
ExpressionListOpt    : 79
ExpressionListPureOpt : 228
ExpressionListTypeOpt : 115
ExpressionOpt        : 118 118 119 198
ExpressionRep        : 65 66
ExpressionStmt       : 168
F                    : 99
FieldDecl            : 24
FieldDeclRep         : 23 24
ForClause            : 220
ForStmt              : 164
Function             : 84
FunctionBody         : 90
FunctionDecl         : 54
FunctionName         : 84 85
GotoStmt             : 160
I                    : 96 97 98 101
IdentifierList       : 26 44 59 79 80
IdentifierOpt        : 206
IdentifierRep        : 62 63
IfStmt               : 162 193
ImportDecl           : 238
ImportDeclRep        : 236 238
ImportPath           : 247
ImportSpec           : 243 245
ImportSpecRep        : 244 245
IncDecStmt           : 169
Index                : 
Label                : 172 233 235
LabelOpt             : 231 232
LabeledStmt          : 153
Literal              : 92
Operand              : 109
OperandName          : 93
PackageClause        : 236
PackageName          : 241 249
PackageNameDotOpt    : 247
ParameterDecl        : 40 42 43 43
ParameterDeclCommaRep : 41 42
ParameterListOpt     : 37
Parameters           : 32 35
ParametersList       : 38
PointerType          : 17
PrimaryExpr          : 110 112 113 114 115 127 206
PrintStmt            : 161
QualifiedIdent       : 6
RelOp                : 132
Result               : 33
ResultOpt            : 
ReturnStmt           : 155
S                    : 102
ScanStmt             : 157
Selector             : 110
ShortVarDecl         : 171
Signature            : 85 90
SimpleStmt           : 154 191 222 222
SimpleStmtOpt        : 205
Slice                : 113
SourceFile           : 1
StartSwitch          : 
Statement            : 48 172
StatementList        : 46 202 211
StatementRep         : 47 48
StructType           : 16
SwitchStmt           : 163
Tag                  : 27
TagOpt               : 
TopLevelDecl         : 239
TopLevelDeclRep      : 236 239
Type                 : 4 18 22 26 31 36 44 45 59 73 74 79 120 151 214 215
TypeAssertion        : 114
TypeCaseClause       : 209
TypeCaseClauseOpt    : 205 209
TypeDecl             : 51
TypeDef              : 72
TypeExprListOpt      : 
TypeList             : 212
TypeLit              : 3
TypeName             : 2 108
TypeOpt              : 32 60
TypeRep              : 214 215
TypeSpec             : 68 70
TypeSpecRep          : 69 70
TypeSwitchCase       : 211
TypeSwitchGuard      : 205
TypeSwitchStmt       : 197
TypeToken            : 5
UnaryExpr            : 123 128 129
UnaryOp              : 128 140
VarDecl              : 52
VarSpec              : 75 77
VarSpecRep           : 76 77
assign_op            : 177
epsilon              : 19 25 28 34 39 49 58 61 64 67 71 78 82 122 126 167 192 195 201 208 210 216 218 223 225 230 234 237 240 246 250
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . SourceFile
    (236) SourceFile -> . PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep
    (241) PackageClause -> . PACKAGE PackageName

    PACKAGE         shift and go to state 4

    start                          shift and go to state 1
    SourceFile                     shift and go to state 2
    PackageClause                  shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> SourceFile .

    $end            reduce using rule 1 (start -> SourceFile .)


state 3

    (236) SourceFile -> PackageClause . SEMICOLON ImportDeclRep TopLevelDeclRep

    SEMICOLON       shift and go to state 5


state 4

    (241) PackageClause -> PACKAGE . PackageName
    (242) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 7

    PackageName                    shift and go to state 6

state 5

    (236) SourceFile -> PackageClause SEMICOLON . ImportDeclRep TopLevelDeclRep
    (237) ImportDeclRep -> . epsilon
    (238) ImportDeclRep -> . ImportDeclRep ImportDecl SEMICOLON
    (252) epsilon -> .

    IMPORT          reduce using rule 252 (epsilon -> .)
    FUNC            reduce using rule 252 (epsilon -> .)
    CONST           reduce using rule 252 (epsilon -> .)
    TYPE            reduce using rule 252 (epsilon -> .)
    VAR             reduce using rule 252 (epsilon -> .)
    $end            reduce using rule 252 (epsilon -> .)

    ImportDeclRep                  shift and go to state 8
    epsilon                        shift and go to state 9

state 6

    (241) PackageClause -> PACKAGE PackageName .

    SEMICOLON       reduce using rule 241 (PackageClause -> PACKAGE PackageName .)


state 7

    (242) PackageName -> IDENTIFIER .

    SEMICOLON       reduce using rule 242 (PackageName -> IDENTIFIER .)
    STRING          reduce using rule 242 (PackageName -> IDENTIFIER .)


state 8

    (236) SourceFile -> PackageClause SEMICOLON ImportDeclRep . TopLevelDeclRep
    (238) ImportDeclRep -> ImportDeclRep . ImportDecl SEMICOLON
    (239) TopLevelDeclRep -> . TopLevelDeclRep TopLevelDecl SEMICOLON
    (240) TopLevelDeclRep -> . epsilon
    (243) ImportDecl -> . IMPORT ImportSpec
    (244) ImportDecl -> . IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
    (252) epsilon -> .

    IMPORT          shift and go to state 13
    FUNC            reduce using rule 252 (epsilon -> .)
    CONST           reduce using rule 252 (epsilon -> .)
    TYPE            reduce using rule 252 (epsilon -> .)
    VAR             reduce using rule 252 (epsilon -> .)
    $end            reduce using rule 252 (epsilon -> .)

    TopLevelDeclRep                shift and go to state 10
    ImportDecl                     shift and go to state 11
    epsilon                        shift and go to state 12

state 9

    (237) ImportDeclRep -> epsilon .

    IMPORT          reduce using rule 237 (ImportDeclRep -> epsilon .)
    FUNC            reduce using rule 237 (ImportDeclRep -> epsilon .)
    CONST           reduce using rule 237 (ImportDeclRep -> epsilon .)
    TYPE            reduce using rule 237 (ImportDeclRep -> epsilon .)
    VAR             reduce using rule 237 (ImportDeclRep -> epsilon .)
    $end            reduce using rule 237 (ImportDeclRep -> epsilon .)


state 10

    (236) SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep .
    (239) TopLevelDeclRep -> TopLevelDeclRep . TopLevelDecl SEMICOLON
    (53) TopLevelDecl -> . Declaration
    (54) TopLevelDecl -> . FunctionDecl
    (50) Declaration -> . ConstDecl
    (51) Declaration -> . TypeDecl
    (52) Declaration -> . VarDecl
    (84) FunctionDecl -> . FUNC FunctionName CreateScope Function EndScope
    (85) FunctionDecl -> . FUNC FunctionName CreateScope Signature EndScope
    (55) ConstDecl -> . CONST ConstSpec
    (56) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (68) TypeDecl -> . TYPE TypeSpec
    (69) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (75) VarDecl -> . VAR VarSpec
    (76) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS

    $end            reduce using rule 236 (SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep .)
    FUNC            shift and go to state 20
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23

    TopLevelDecl                   shift and go to state 14
    Declaration                    shift and go to state 15
    FunctionDecl                   shift and go to state 16
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19

state 11

    (238) ImportDeclRep -> ImportDeclRep ImportDecl . SEMICOLON

    SEMICOLON       shift and go to state 24


state 12

    (240) TopLevelDeclRep -> epsilon .

    FUNC            reduce using rule 240 (TopLevelDeclRep -> epsilon .)
    CONST           reduce using rule 240 (TopLevelDeclRep -> epsilon .)
    TYPE            reduce using rule 240 (TopLevelDeclRep -> epsilon .)
    VAR             reduce using rule 240 (TopLevelDeclRep -> epsilon .)
    $end            reduce using rule 240 (TopLevelDeclRep -> epsilon .)


state 13

    (243) ImportDecl -> IMPORT . ImportSpec
    (244) ImportDecl -> IMPORT . LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
    (247) ImportSpec -> . PackageNameDotOpt ImportPath
    (248) PackageNameDotOpt -> . DOT
    (249) PackageNameDotOpt -> . PackageName
    (250) PackageNameDotOpt -> . epsilon
    (242) PackageName -> . IDENTIFIER
    (252) epsilon -> .

    LEFT_PARANTHESIS shift and go to state 26
    DOT             shift and go to state 28
    IDENTIFIER      shift and go to state 7
    STRING          reduce using rule 252 (epsilon -> .)

    ImportSpec                     shift and go to state 25
    PackageNameDotOpt              shift and go to state 27
    PackageName                    shift and go to state 29
    epsilon                        shift and go to state 30

state 14

    (239) TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl . SEMICOLON

    SEMICOLON       shift and go to state 31


state 15

    (53) TopLevelDecl -> Declaration .

    SEMICOLON       reduce using rule 53 (TopLevelDecl -> Declaration .)


state 16

    (54) TopLevelDecl -> FunctionDecl .

    SEMICOLON       reduce using rule 54 (TopLevelDecl -> FunctionDecl .)


state 17

    (50) Declaration -> ConstDecl .

    SEMICOLON       reduce using rule 50 (Declaration -> ConstDecl .)


state 18

    (51) Declaration -> TypeDecl .

    SEMICOLON       reduce using rule 51 (Declaration -> TypeDecl .)


state 19

    (52) Declaration -> VarDecl .

    SEMICOLON       reduce using rule 52 (Declaration -> VarDecl .)


state 20

    (84) FunctionDecl -> FUNC . FunctionName CreateScope Function EndScope
    (85) FunctionDecl -> FUNC . FunctionName CreateScope Signature EndScope
    (89) FunctionName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 33

    FunctionName                   shift and go to state 32

state 21

    (55) ConstDecl -> CONST . ConstSpec
    (56) ConstDecl -> CONST . LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (59) ConstSpec -> . IdentifierList Type ASSIGN ExpressionList
    (62) IdentifierList -> . IDENTIFIER IdentifierRep

    LEFT_PARANTHESIS shift and go to state 35
    IDENTIFIER      shift and go to state 37

    ConstSpec                      shift and go to state 34
    IdentifierList                 shift and go to state 36

state 22

    (68) TypeDecl -> TYPE . TypeSpec
    (69) TypeDecl -> TYPE . LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (72) TypeSpec -> . TypeDef
    (74) TypeDef -> . IDENTIFIER Type

    LEFT_PARANTHESIS shift and go to state 39
    IDENTIFIER      shift and go to state 41

    TypeSpec                       shift and go to state 38
    TypeDef                        shift and go to state 40

state 23

    (75) VarDecl -> VAR . VarSpec
    (76) VarDecl -> VAR . LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (79) VarSpec -> . IdentifierList Type ExpressionListOpt
    (80) VarSpec -> . IdentifierList ASSIGN ExpressionList
    (62) IdentifierList -> . IDENTIFIER IdentifierRep

    LEFT_PARANTHESIS shift and go to state 43
    IDENTIFIER      shift and go to state 37

    VarSpec                        shift and go to state 42
    IdentifierList                 shift and go to state 44

state 24

    (238) ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .

    IMPORT          reduce using rule 238 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    FUNC            reduce using rule 238 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    CONST           reduce using rule 238 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    TYPE            reduce using rule 238 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    VAR             reduce using rule 238 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    $end            reduce using rule 238 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)


state 25

    (243) ImportDecl -> IMPORT ImportSpec .

    SEMICOLON       reduce using rule 243 (ImportDecl -> IMPORT ImportSpec .)


state 26

    (244) ImportDecl -> IMPORT LEFT_PARANTHESIS . ImportSpecRep RIGHT_PARANTHESIS
    (245) ImportSpecRep -> . ImportSpecRep ImportSpec SEMICOLON
    (246) ImportSpecRep -> . epsilon
    (252) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    DOT             reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)
    STRING          reduce using rule 252 (epsilon -> .)

    ImportSpecRep                  shift and go to state 45
    epsilon                        shift and go to state 46

state 27

    (247) ImportSpec -> PackageNameDotOpt . ImportPath
    (251) ImportPath -> . STRING

    STRING          shift and go to state 48

    ImportPath                     shift and go to state 47

state 28

    (248) PackageNameDotOpt -> DOT .

    STRING          reduce using rule 248 (PackageNameDotOpt -> DOT .)


state 29

    (249) PackageNameDotOpt -> PackageName .

    STRING          reduce using rule 249 (PackageNameDotOpt -> PackageName .)


state 30

    (250) PackageNameDotOpt -> epsilon .

    STRING          reduce using rule 250 (PackageNameDotOpt -> epsilon .)


state 31

    (239) TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .

    FUNC            reduce using rule 239 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    CONST           reduce using rule 239 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    TYPE            reduce using rule 239 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    VAR             reduce using rule 239 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    $end            reduce using rule 239 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)


state 32

    (84) FunctionDecl -> FUNC FunctionName . CreateScope Function EndScope
    (85) FunctionDecl -> FUNC FunctionName . CreateScope Signature EndScope
    (87) CreateScope -> .

    LEFT_PARANTHESIS reduce using rule 87 (CreateScope -> .)

    CreateScope                    shift and go to state 49

state 33

    (89) FunctionName -> IDENTIFIER .

    LEFT_PARANTHESIS reduce using rule 89 (FunctionName -> IDENTIFIER .)


state 34

    (55) ConstDecl -> CONST ConstSpec .

    SEMICOLON       reduce using rule 55 (ConstDecl -> CONST ConstSpec .)


state 35

    (56) ConstDecl -> CONST LEFT_PARANTHESIS . ConstSpecRep RIGHT_PARANTHESIS
    (57) ConstSpecRep -> . ConstSpecRep ConstSpec SEMICOLON
    (58) ConstSpecRep -> . epsilon
    (252) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)

    ConstSpecRep                   shift and go to state 50
    epsilon                        shift and go to state 51

state 36

    (59) ConstSpec -> IdentifierList . Type ASSIGN ExpressionList
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 52
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 37

    (62) IdentifierList -> IDENTIFIER . IdentifierRep
    (63) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (64) IdentifierRep -> . epsilon
    (252) epsilon -> .

    COMMA           reduce using rule 252 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    INT_T           reduce using rule 252 (epsilon -> .)
    FLOAT_T         reduce using rule 252 (epsilon -> .)
    UINT_T          reduce using rule 252 (epsilon -> .)
    COMPLEX_T       reduce using rule 252 (epsilon -> .)
    RUNE_T          reduce using rule 252 (epsilon -> .)
    BOOL_T          reduce using rule 252 (epsilon -> .)
    STRING_T        reduce using rule 252 (epsilon -> .)
    TYPE            reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)
    LEFT_BRACKET    reduce using rule 252 (epsilon -> .)
    MULT            reduce using rule 252 (epsilon -> .)
    STRUCT          reduce using rule 252 (epsilon -> .)
    ASSIGN          reduce using rule 252 (epsilon -> .)

    IdentifierRep                  shift and go to state 73
    epsilon                        shift and go to state 74

state 38

    (68) TypeDecl -> TYPE TypeSpec .

    SEMICOLON       reduce using rule 68 (TypeDecl -> TYPE TypeSpec .)


state 39

    (69) TypeDecl -> TYPE LEFT_PARANTHESIS . TypeSpecRep RIGHT_PARANTHESIS
    (70) TypeSpecRep -> . TypeSpecRep TypeSpec SEMICOLON
    (71) TypeSpecRep -> . epsilon
    (252) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)

    TypeSpecRep                    shift and go to state 75
    epsilon                        shift and go to state 76

state 40

    (72) TypeSpec -> TypeDef .

    SEMICOLON       reduce using rule 72 (TypeSpec -> TypeDef .)


state 41

    (74) TypeDef -> IDENTIFIER . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 77
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 42

    (75) VarDecl -> VAR VarSpec .

    SEMICOLON       reduce using rule 75 (VarDecl -> VAR VarSpec .)


state 43

    (76) VarDecl -> VAR LEFT_PARANTHESIS . VarSpecRep RIGHT_PARANTHESIS
    (77) VarSpecRep -> . VarSpecRep VarSpec SEMICOLON
    (78) VarSpecRep -> . epsilon
    (252) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)

    VarSpecRep                     shift and go to state 78
    epsilon                        shift and go to state 79

state 44

    (79) VarSpec -> IdentifierList . Type ExpressionListOpt
    (80) VarSpec -> IdentifierList . ASSIGN ExpressionList
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    ASSIGN          shift and go to state 81
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 80
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 45

    (244) ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep . RIGHT_PARANTHESIS
    (245) ImportSpecRep -> ImportSpecRep . ImportSpec SEMICOLON
    (247) ImportSpec -> . PackageNameDotOpt ImportPath
    (248) PackageNameDotOpt -> . DOT
    (249) PackageNameDotOpt -> . PackageName
    (250) PackageNameDotOpt -> . epsilon
    (242) PackageName -> . IDENTIFIER
    (252) epsilon -> .

    RIGHT_PARANTHESIS shift and go to state 82
    DOT             shift and go to state 28
    IDENTIFIER      shift and go to state 7
    STRING          reduce using rule 252 (epsilon -> .)

    ImportSpec                     shift and go to state 83
    PackageNameDotOpt              shift and go to state 27
    PackageName                    shift and go to state 29
    epsilon                        shift and go to state 30

state 46

    (246) ImportSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 246 (ImportSpecRep -> epsilon .)
    DOT             reduce using rule 246 (ImportSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 246 (ImportSpecRep -> epsilon .)
    STRING          reduce using rule 246 (ImportSpecRep -> epsilon .)


state 47

    (247) ImportSpec -> PackageNameDotOpt ImportPath .

    SEMICOLON       reduce using rule 247 (ImportSpec -> PackageNameDotOpt ImportPath .)


state 48

    (251) ImportPath -> STRING .

    SEMICOLON       reduce using rule 251 (ImportPath -> STRING .)


state 49

    (84) FunctionDecl -> FUNC FunctionName CreateScope . Function EndScope
    (85) FunctionDecl -> FUNC FunctionName CreateScope . Signature EndScope
    (90) Function -> . Signature FunctionBody
    (32) Signature -> . Parameters TypeOpt
    (37) Parameters -> . LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 87

    Function                       shift and go to state 84
    Signature                      shift and go to state 85
    Parameters                     shift and go to state 86

state 50

    (56) ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep . RIGHT_PARANTHESIS
    (57) ConstSpecRep -> ConstSpecRep . ConstSpec SEMICOLON
    (59) ConstSpec -> . IdentifierList Type ASSIGN ExpressionList
    (62) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_PARANTHESIS shift and go to state 88
    IDENTIFIER      shift and go to state 37

    ConstSpec                      shift and go to state 89
    IdentifierList                 shift and go to state 36

state 51

    (58) ConstSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 58 (ConstSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 58 (ConstSpecRep -> epsilon .)


state 52

    (59) ConstSpec -> IdentifierList Type . ASSIGN ExpressionList

    ASSIGN          shift and go to state 90


state 53

    (2) Type -> TypeName .

    ASSIGN          reduce using rule 2 (Type -> TypeName .)
    SEMICOLON       reduce using rule 2 (Type -> TypeName .)
    RIGHT_PARANTHESIS reduce using rule 2 (Type -> TypeName .)
    LEFT_BRACES     reduce using rule 2 (Type -> TypeName .)
    COMMA           reduce using rule 2 (Type -> TypeName .)
    LEFT_PARANTHESIS reduce using rule 2 (Type -> TypeName .)
    COLON           reduce using rule 2 (Type -> TypeName .)


state 54

    (3) Type -> TypeLit .

    ASSIGN          reduce using rule 3 (Type -> TypeLit .)
    SEMICOLON       reduce using rule 3 (Type -> TypeLit .)
    RIGHT_PARANTHESIS reduce using rule 3 (Type -> TypeLit .)
    LEFT_BRACES     reduce using rule 3 (Type -> TypeLit .)
    COMMA           reduce using rule 3 (Type -> TypeLit .)
    LEFT_PARANTHESIS reduce using rule 3 (Type -> TypeLit .)
    COLON           reduce using rule 3 (Type -> TypeLit .)


state 55

    (4) Type -> LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 91
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 56

    (5) TypeName -> TypeToken .

    ASSIGN          reduce using rule 5 (TypeName -> TypeToken .)
    SEMICOLON       reduce using rule 5 (TypeName -> TypeToken .)
    RIGHT_PARANTHESIS reduce using rule 5 (TypeName -> TypeToken .)
    LEFT_BRACES     reduce using rule 5 (TypeName -> TypeToken .)
    COMMA           reduce using rule 5 (TypeName -> TypeToken .)
    LEFT_PARANTHESIS reduce using rule 5 (TypeName -> TypeToken .)
    COLON           reduce using rule 5 (TypeName -> TypeToken .)


state 57

    (6) TypeName -> QualifiedIdent .

    ASSIGN          reduce using rule 6 (TypeName -> QualifiedIdent .)
    SEMICOLON       reduce using rule 6 (TypeName -> QualifiedIdent .)
    RIGHT_PARANTHESIS reduce using rule 6 (TypeName -> QualifiedIdent .)
    LEFT_BRACES     reduce using rule 6 (TypeName -> QualifiedIdent .)
    COMMA           reduce using rule 6 (TypeName -> QualifiedIdent .)
    LEFT_PARANTHESIS reduce using rule 6 (TypeName -> QualifiedIdent .)
    COLON           reduce using rule 6 (TypeName -> QualifiedIdent .)


state 58

    (15) TypeLit -> ArrayType .

    ASSIGN          reduce using rule 15 (TypeLit -> ArrayType .)
    SEMICOLON       reduce using rule 15 (TypeLit -> ArrayType .)
    RIGHT_PARANTHESIS reduce using rule 15 (TypeLit -> ArrayType .)
    LEFT_BRACES     reduce using rule 15 (TypeLit -> ArrayType .)
    COMMA           reduce using rule 15 (TypeLit -> ArrayType .)
    LEFT_PARANTHESIS reduce using rule 15 (TypeLit -> ArrayType .)
    COLON           reduce using rule 15 (TypeLit -> ArrayType .)


state 59

    (16) TypeLit -> StructType .

    ASSIGN          reduce using rule 16 (TypeLit -> StructType .)
    SEMICOLON       reduce using rule 16 (TypeLit -> StructType .)
    RIGHT_PARANTHESIS reduce using rule 16 (TypeLit -> StructType .)
    LEFT_BRACES     reduce using rule 16 (TypeLit -> StructType .)
    COMMA           reduce using rule 16 (TypeLit -> StructType .)
    LEFT_PARANTHESIS reduce using rule 16 (TypeLit -> StructType .)
    COLON           reduce using rule 16 (TypeLit -> StructType .)


state 60

    (17) TypeLit -> PointerType .

    ASSIGN          reduce using rule 17 (TypeLit -> PointerType .)
    SEMICOLON       reduce using rule 17 (TypeLit -> PointerType .)
    RIGHT_PARANTHESIS reduce using rule 17 (TypeLit -> PointerType .)
    LEFT_BRACES     reduce using rule 17 (TypeLit -> PointerType .)
    COMMA           reduce using rule 17 (TypeLit -> PointerType .)
    LEFT_PARANTHESIS reduce using rule 17 (TypeLit -> PointerType .)
    COLON           reduce using rule 17 (TypeLit -> PointerType .)


state 61

    (7) TypeToken -> INT_T .

    ASSIGN          reduce using rule 7 (TypeToken -> INT_T .)
    SEMICOLON       reduce using rule 7 (TypeToken -> INT_T .)
    RIGHT_PARANTHESIS reduce using rule 7 (TypeToken -> INT_T .)
    LEFT_BRACES     reduce using rule 7 (TypeToken -> INT_T .)
    COMMA           reduce using rule 7 (TypeToken -> INT_T .)
    LEFT_PARANTHESIS reduce using rule 7 (TypeToken -> INT_T .)
    COLON           reduce using rule 7 (TypeToken -> INT_T .)


state 62

    (8) TypeToken -> FLOAT_T .

    ASSIGN          reduce using rule 8 (TypeToken -> FLOAT_T .)
    SEMICOLON       reduce using rule 8 (TypeToken -> FLOAT_T .)
    RIGHT_PARANTHESIS reduce using rule 8 (TypeToken -> FLOAT_T .)
    LEFT_BRACES     reduce using rule 8 (TypeToken -> FLOAT_T .)
    COMMA           reduce using rule 8 (TypeToken -> FLOAT_T .)
    LEFT_PARANTHESIS reduce using rule 8 (TypeToken -> FLOAT_T .)
    COLON           reduce using rule 8 (TypeToken -> FLOAT_T .)


state 63

    (9) TypeToken -> UINT_T .

    ASSIGN          reduce using rule 9 (TypeToken -> UINT_T .)
    SEMICOLON       reduce using rule 9 (TypeToken -> UINT_T .)
    RIGHT_PARANTHESIS reduce using rule 9 (TypeToken -> UINT_T .)
    LEFT_BRACES     reduce using rule 9 (TypeToken -> UINT_T .)
    COMMA           reduce using rule 9 (TypeToken -> UINT_T .)
    LEFT_PARANTHESIS reduce using rule 9 (TypeToken -> UINT_T .)
    COLON           reduce using rule 9 (TypeToken -> UINT_T .)


state 64

    (10) TypeToken -> COMPLEX_T .

    ASSIGN          reduce using rule 10 (TypeToken -> COMPLEX_T .)
    SEMICOLON       reduce using rule 10 (TypeToken -> COMPLEX_T .)
    RIGHT_PARANTHESIS reduce using rule 10 (TypeToken -> COMPLEX_T .)
    LEFT_BRACES     reduce using rule 10 (TypeToken -> COMPLEX_T .)
    COMMA           reduce using rule 10 (TypeToken -> COMPLEX_T .)
    LEFT_PARANTHESIS reduce using rule 10 (TypeToken -> COMPLEX_T .)
    COLON           reduce using rule 10 (TypeToken -> COMPLEX_T .)


state 65

    (11) TypeToken -> RUNE_T .

    ASSIGN          reduce using rule 11 (TypeToken -> RUNE_T .)
    SEMICOLON       reduce using rule 11 (TypeToken -> RUNE_T .)
    RIGHT_PARANTHESIS reduce using rule 11 (TypeToken -> RUNE_T .)
    LEFT_BRACES     reduce using rule 11 (TypeToken -> RUNE_T .)
    COMMA           reduce using rule 11 (TypeToken -> RUNE_T .)
    LEFT_PARANTHESIS reduce using rule 11 (TypeToken -> RUNE_T .)
    COLON           reduce using rule 11 (TypeToken -> RUNE_T .)


state 66

    (12) TypeToken -> BOOL_T .

    ASSIGN          reduce using rule 12 (TypeToken -> BOOL_T .)
    SEMICOLON       reduce using rule 12 (TypeToken -> BOOL_T .)
    RIGHT_PARANTHESIS reduce using rule 12 (TypeToken -> BOOL_T .)
    LEFT_BRACES     reduce using rule 12 (TypeToken -> BOOL_T .)
    COMMA           reduce using rule 12 (TypeToken -> BOOL_T .)
    LEFT_PARANTHESIS reduce using rule 12 (TypeToken -> BOOL_T .)
    COLON           reduce using rule 12 (TypeToken -> BOOL_T .)


state 67

    (13) TypeToken -> STRING_T .

    ASSIGN          reduce using rule 13 (TypeToken -> STRING_T .)
    SEMICOLON       reduce using rule 13 (TypeToken -> STRING_T .)
    RIGHT_PARANTHESIS reduce using rule 13 (TypeToken -> STRING_T .)
    LEFT_BRACES     reduce using rule 13 (TypeToken -> STRING_T .)
    COMMA           reduce using rule 13 (TypeToken -> STRING_T .)
    LEFT_PARANTHESIS reduce using rule 13 (TypeToken -> STRING_T .)
    COLON           reduce using rule 13 (TypeToken -> STRING_T .)


state 68

    (14) TypeToken -> TYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 92


state 69

    (108) QualifiedIdent -> IDENTIFIER . DOT TypeName

    DOT             shift and go to state 93


state 70

    (20) ArrayType -> LEFT_BRACKET . ArrayLength RIGHT_BRACKET ElementType
    (21) ArrayLength -> . Expression
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ArrayLength                    shift and go to state 94
    Expression                     shift and go to state 95
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 71

    (23) StructType -> CreateFuncScope . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope

    STRUCT          shift and go to state 116


state 72

    (30) PointerType -> MULT . BaseType
    (31) BaseType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    BaseType                       shift and go to state 117
    Type                           shift and go to state 118
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 73

    (62) IdentifierList -> IDENTIFIER IdentifierRep .
    (63) IdentifierRep -> IdentifierRep . COMMA IDENTIFIER

    LEFT_PARANTHESIS reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    INT_T           reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    FLOAT_T         reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    UINT_T          reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    COMPLEX_T       reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    RUNE_T          reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    BOOL_T          reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    STRING_T        reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    TYPE            reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    IDENTIFIER      reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    LEFT_BRACKET    reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    MULT            reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    STRUCT          reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    ASSIGN          reduce using rule 62 (IdentifierList -> IDENTIFIER IdentifierRep .)
    COMMA           shift and go to state 119


state 74

    (64) IdentifierRep -> epsilon .

    COMMA           reduce using rule 64 (IdentifierRep -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 64 (IdentifierRep -> epsilon .)
    INT_T           reduce using rule 64 (IdentifierRep -> epsilon .)
    FLOAT_T         reduce using rule 64 (IdentifierRep -> epsilon .)
    UINT_T          reduce using rule 64 (IdentifierRep -> epsilon .)
    COMPLEX_T       reduce using rule 64 (IdentifierRep -> epsilon .)
    RUNE_T          reduce using rule 64 (IdentifierRep -> epsilon .)
    BOOL_T          reduce using rule 64 (IdentifierRep -> epsilon .)
    STRING_T        reduce using rule 64 (IdentifierRep -> epsilon .)
    TYPE            reduce using rule 64 (IdentifierRep -> epsilon .)
    IDENTIFIER      reduce using rule 64 (IdentifierRep -> epsilon .)
    LEFT_BRACKET    reduce using rule 64 (IdentifierRep -> epsilon .)
    MULT            reduce using rule 64 (IdentifierRep -> epsilon .)
    STRUCT          reduce using rule 64 (IdentifierRep -> epsilon .)
    ASSIGN          reduce using rule 64 (IdentifierRep -> epsilon .)


state 75

    (69) TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep . RIGHT_PARANTHESIS
    (70) TypeSpecRep -> TypeSpecRep . TypeSpec SEMICOLON
    (72) TypeSpec -> . TypeDef
    (74) TypeDef -> . IDENTIFIER Type

    RIGHT_PARANTHESIS shift and go to state 120
    IDENTIFIER      shift and go to state 41

    TypeSpec                       shift and go to state 121
    TypeDef                        shift and go to state 40

state 76

    (71) TypeSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 71 (TypeSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 71 (TypeSpecRep -> epsilon .)


state 77

    (74) TypeDef -> IDENTIFIER Type .

    SEMICOLON       reduce using rule 74 (TypeDef -> IDENTIFIER Type .)


state 78

    (76) VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep . RIGHT_PARANTHESIS
    (77) VarSpecRep -> VarSpecRep . VarSpec SEMICOLON
    (79) VarSpec -> . IdentifierList Type ExpressionListOpt
    (80) VarSpec -> . IdentifierList ASSIGN ExpressionList
    (62) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_PARANTHESIS shift and go to state 122
    IDENTIFIER      shift and go to state 37

    VarSpec                        shift and go to state 123
    IdentifierList                 shift and go to state 44

state 79

    (78) VarSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 78 (VarSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 78 (VarSpecRep -> epsilon .)


state 80

    (79) VarSpec -> IdentifierList Type . ExpressionListOpt
    (81) ExpressionListOpt -> . ASSIGN ExpressionList
    (82) ExpressionListOpt -> . epsilon
    (252) epsilon -> .

    ASSIGN          shift and go to state 125
    SEMICOLON       reduce using rule 252 (epsilon -> .)

    ExpressionListOpt              shift and go to state 124
    epsilon                        shift and go to state 126

state 81

    (80) VarSpec -> IdentifierList ASSIGN . ExpressionList
    (65) ExpressionList -> . Expression ExpressionRep
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ExpressionList                 shift and go to state 127
    Expression                     shift and go to state 128
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 82

    (244) ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 244 (ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS .)


state 83

    (245) ImportSpecRep -> ImportSpecRep ImportSpec . SEMICOLON

    SEMICOLON       shift and go to state 129


state 84

    (84) FunctionDecl -> FUNC FunctionName CreateScope Function . EndScope
    (88) EndScope -> .

    SEMICOLON       reduce using rule 88 (EndScope -> .)

    EndScope                       shift and go to state 130

state 85

    (85) FunctionDecl -> FUNC FunctionName CreateScope Signature . EndScope
    (90) Function -> Signature . FunctionBody
    (88) EndScope -> .
    (91) FunctionBody -> . Block
    (46) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    SEMICOLON       reduce using rule 88 (EndScope -> .)
    LEFT_BRACES     shift and go to state 134

    EndScope                       shift and go to state 131
    FunctionBody                   shift and go to state 132
    Block                          shift and go to state 133

state 86

    (32) Signature -> Parameters . TypeOpt
    (18) TypeOpt -> . Type
    (19) TypeOpt -> . epsilon
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (252) epsilon -> .
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    LEFT_BRACES     reduce using rule 252 (epsilon -> .)
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    TypeOpt                        shift and go to state 135
    Type                           shift and go to state 136
    epsilon                        shift and go to state 137
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 87

    (37) Parameters -> LEFT_PARANTHESIS . ParameterListOpt RIGHT_PARANTHESIS
    (38) ParameterListOpt -> . ParametersList
    (39) ParameterListOpt -> . epsilon
    (40) ParametersList -> . ParameterDecl
    (41) ParametersList -> . ParameterDeclCommaRep
    (252) epsilon -> .
    (44) ParameterDecl -> . IdentifierList Type
    (45) ParameterDecl -> . Type
    (42) ParameterDeclCommaRep -> . ParameterDeclCommaRep COMMA ParameterDecl
    (43) ParameterDeclCommaRep -> . ParameterDecl COMMA ParameterDecl
    (62) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    RIGHT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    IDENTIFIER      shift and go to state 145
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    ParameterListOpt               shift and go to state 138
    ParametersList                 shift and go to state 139
    epsilon                        shift and go to state 140
    ParameterDecl                  shift and go to state 141
    ParameterDeclCommaRep          shift and go to state 142
    IdentifierList                 shift and go to state 143
    Type                           shift and go to state 144
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 88

    (56) ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 56 (ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS .)


state 89

    (57) ConstSpecRep -> ConstSpecRep ConstSpec . SEMICOLON

    SEMICOLON       shift and go to state 146


state 90

    (59) ConstSpec -> IdentifierList Type ASSIGN . ExpressionList
    (65) ExpressionList -> . Expression ExpressionRep
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ExpressionList                 shift and go to state 147
    Expression                     shift and go to state 128
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 91

    (4) Type -> LEFT_PARANTHESIS Type . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 148


state 92

    (14) TypeToken -> TYPE IDENTIFIER .

    ASSIGN          reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    SEMICOLON       reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    LEFT_BRACES     reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    COLON           reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)


state 93

    (108) QualifiedIdent -> IDENTIFIER DOT . TypeName
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName

    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69

    TypeName                       shift and go to state 149
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57

state 94

    (20) ArrayType -> LEFT_BRACKET ArrayLength . RIGHT_BRACKET ElementType

    RIGHT_BRACKET   shift and go to state 150


state 95

    (21) ArrayLength -> Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    RIGHT_BRACKET   reduce using rule 21 (ArrayLength -> Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 96

    (123) Expression -> UnaryExpr .

    LOG_OR          reduce using rule 123 (Expression -> UnaryExpr .)
    LOG_AND         reduce using rule 123 (Expression -> UnaryExpr .)
    EQ              reduce using rule 123 (Expression -> UnaryExpr .)
    NEQ             reduce using rule 123 (Expression -> UnaryExpr .)
    LT              reduce using rule 123 (Expression -> UnaryExpr .)
    GT              reduce using rule 123 (Expression -> UnaryExpr .)
    LEQ             reduce using rule 123 (Expression -> UnaryExpr .)
    GEQ             reduce using rule 123 (Expression -> UnaryExpr .)
    OR              reduce using rule 123 (Expression -> UnaryExpr .)
    XOR             reduce using rule 123 (Expression -> UnaryExpr .)
    DIV             reduce using rule 123 (Expression -> UnaryExpr .)
    MOD             reduce using rule 123 (Expression -> UnaryExpr .)
    LSHIFT          reduce using rule 123 (Expression -> UnaryExpr .)
    RSHIFT          reduce using rule 123 (Expression -> UnaryExpr .)
    ADD             reduce using rule 123 (Expression -> UnaryExpr .)
    SUB             reduce using rule 123 (Expression -> UnaryExpr .)
    MULT            reduce using rule 123 (Expression -> UnaryExpr .)
    AND             reduce using rule 123 (Expression -> UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 123 (Expression -> UnaryExpr .)
    COMMA           reduce using rule 123 (Expression -> UnaryExpr .)
    SEMICOLON       reduce using rule 123 (Expression -> UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 123 (Expression -> UnaryExpr .)
    COLON           reduce using rule 123 (Expression -> UnaryExpr .)
    INC             reduce using rule 123 (Expression -> UnaryExpr .)
    DEC             reduce using rule 123 (Expression -> UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 123 (Expression -> UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 123 (Expression -> UnaryExpr .)
    MULT_ASSIGN     reduce using rule 123 (Expression -> UnaryExpr .)
    DIV_ASSIGN      reduce using rule 123 (Expression -> UnaryExpr .)
    MOD_ASSIGN      reduce using rule 123 (Expression -> UnaryExpr .)
    AND_ASSIGN      reduce using rule 123 (Expression -> UnaryExpr .)
    OR_ASSIGN       reduce using rule 123 (Expression -> UnaryExpr .)
    XOR_ASSIGN      reduce using rule 123 (Expression -> UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 123 (Expression -> UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 123 (Expression -> UnaryExpr .)
    ASSIGN          reduce using rule 123 (Expression -> UnaryExpr .)
    LEFT_BRACES     reduce using rule 123 (Expression -> UnaryExpr .)


state 97

    (127) UnaryExpr -> PrimaryExpr .
    (110) PrimaryExpr -> PrimaryExpr . Selector
    (112) PrimaryExpr -> PrimaryExpr . LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> PrimaryExpr . Slice
    (114) PrimaryExpr -> PrimaryExpr . TypeAssertion
    (115) PrimaryExpr -> PrimaryExpr . LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (116) Selector -> . DOT IDENTIFIER
    (118) Slice -> . LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (119) Slice -> . LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (120) TypeAssertion -> . DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    LOG_OR          reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    LOG_AND         reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    EQ              reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    NEQ             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    LT              reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    GT              reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    LEQ             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    GEQ             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    OR              reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    XOR             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    DIV             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    MOD             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    LSHIFT          reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    RSHIFT          reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    ADD             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    SUB             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    MULT            reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    AND             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    RIGHT_BRACKET   reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    COMMA           reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    SEMICOLON       reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    COLON           reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    INC             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    DEC             reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    PLUS_ASSIGN     reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    MINUS_ASSIGN    reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    MULT_ASSIGN     reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    DIV_ASSIGN      reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    MOD_ASSIGN      reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    AND_ASSIGN      reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    OR_ASSIGN       reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    XOR_ASSIGN      reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    ASSIGN          reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    LEFT_BRACES     reduce using rule 127 (UnaryExpr -> PrimaryExpr .)
    LEFT_BRACKET    shift and go to state 170
    LEFT_PARANTHESIS shift and go to state 173
    DOT             shift and go to state 174

    Selector                       shift and go to state 169
    Slice                          shift and go to state 171
    TypeAssertion                  shift and go to state 172

state 98

    (128) UnaryExpr -> UnaryOp . UnaryExpr
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    UnaryOp                        shift and go to state 98
    UnaryExpr                      shift and go to state 175
    PrimaryExpr                    shift and go to state 97
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 99

    (129) UnaryExpr -> NOT . UnaryExpr
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    UnaryExpr                      shift and go to state 176
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 100

    (109) PrimaryExpr -> Operand .

    LEFT_BRACKET    reduce using rule 109 (PrimaryExpr -> Operand .)
    LEFT_PARANTHESIS reduce using rule 109 (PrimaryExpr -> Operand .)
    DOT             reduce using rule 109 (PrimaryExpr -> Operand .)
    LOG_OR          reduce using rule 109 (PrimaryExpr -> Operand .)
    LOG_AND         reduce using rule 109 (PrimaryExpr -> Operand .)
    EQ              reduce using rule 109 (PrimaryExpr -> Operand .)
    NEQ             reduce using rule 109 (PrimaryExpr -> Operand .)
    LT              reduce using rule 109 (PrimaryExpr -> Operand .)
    GT              reduce using rule 109 (PrimaryExpr -> Operand .)
    LEQ             reduce using rule 109 (PrimaryExpr -> Operand .)
    GEQ             reduce using rule 109 (PrimaryExpr -> Operand .)
    OR              reduce using rule 109 (PrimaryExpr -> Operand .)
    XOR             reduce using rule 109 (PrimaryExpr -> Operand .)
    DIV             reduce using rule 109 (PrimaryExpr -> Operand .)
    MOD             reduce using rule 109 (PrimaryExpr -> Operand .)
    LSHIFT          reduce using rule 109 (PrimaryExpr -> Operand .)
    RSHIFT          reduce using rule 109 (PrimaryExpr -> Operand .)
    ADD             reduce using rule 109 (PrimaryExpr -> Operand .)
    SUB             reduce using rule 109 (PrimaryExpr -> Operand .)
    MULT            reduce using rule 109 (PrimaryExpr -> Operand .)
    AND             reduce using rule 109 (PrimaryExpr -> Operand .)
    RIGHT_BRACKET   reduce using rule 109 (PrimaryExpr -> Operand .)
    COMMA           reduce using rule 109 (PrimaryExpr -> Operand .)
    SEMICOLON       reduce using rule 109 (PrimaryExpr -> Operand .)
    RIGHT_PARANTHESIS reduce using rule 109 (PrimaryExpr -> Operand .)
    COLON           reduce using rule 109 (PrimaryExpr -> Operand .)
    INC             reduce using rule 109 (PrimaryExpr -> Operand .)
    DEC             reduce using rule 109 (PrimaryExpr -> Operand .)
    PLUS_ASSIGN     reduce using rule 109 (PrimaryExpr -> Operand .)
    MINUS_ASSIGN    reduce using rule 109 (PrimaryExpr -> Operand .)
    MULT_ASSIGN     reduce using rule 109 (PrimaryExpr -> Operand .)
    DIV_ASSIGN      reduce using rule 109 (PrimaryExpr -> Operand .)
    MOD_ASSIGN      reduce using rule 109 (PrimaryExpr -> Operand .)
    AND_ASSIGN      reduce using rule 109 (PrimaryExpr -> Operand .)
    OR_ASSIGN       reduce using rule 109 (PrimaryExpr -> Operand .)
    XOR_ASSIGN      reduce using rule 109 (PrimaryExpr -> Operand .)
    LSHIFT_ASSIGN   reduce using rule 109 (PrimaryExpr -> Operand .)
    RSHIFT_ASSIGN   reduce using rule 109 (PrimaryExpr -> Operand .)
    ASSIGN          reduce using rule 109 (PrimaryExpr -> Operand .)
    LEFT_BRACES     reduce using rule 109 (PrimaryExpr -> Operand .)


state 101

    (111) PrimaryExpr -> Conversion .

    LEFT_BRACKET    reduce using rule 111 (PrimaryExpr -> Conversion .)
    LEFT_PARANTHESIS reduce using rule 111 (PrimaryExpr -> Conversion .)
    DOT             reduce using rule 111 (PrimaryExpr -> Conversion .)
    LOG_OR          reduce using rule 111 (PrimaryExpr -> Conversion .)
    LOG_AND         reduce using rule 111 (PrimaryExpr -> Conversion .)
    EQ              reduce using rule 111 (PrimaryExpr -> Conversion .)
    NEQ             reduce using rule 111 (PrimaryExpr -> Conversion .)
    LT              reduce using rule 111 (PrimaryExpr -> Conversion .)
    GT              reduce using rule 111 (PrimaryExpr -> Conversion .)
    LEQ             reduce using rule 111 (PrimaryExpr -> Conversion .)
    GEQ             reduce using rule 111 (PrimaryExpr -> Conversion .)
    OR              reduce using rule 111 (PrimaryExpr -> Conversion .)
    XOR             reduce using rule 111 (PrimaryExpr -> Conversion .)
    DIV             reduce using rule 111 (PrimaryExpr -> Conversion .)
    MOD             reduce using rule 111 (PrimaryExpr -> Conversion .)
    LSHIFT          reduce using rule 111 (PrimaryExpr -> Conversion .)
    RSHIFT          reduce using rule 111 (PrimaryExpr -> Conversion .)
    ADD             reduce using rule 111 (PrimaryExpr -> Conversion .)
    SUB             reduce using rule 111 (PrimaryExpr -> Conversion .)
    MULT            reduce using rule 111 (PrimaryExpr -> Conversion .)
    AND             reduce using rule 111 (PrimaryExpr -> Conversion .)
    RIGHT_BRACKET   reduce using rule 111 (PrimaryExpr -> Conversion .)
    COMMA           reduce using rule 111 (PrimaryExpr -> Conversion .)
    SEMICOLON       reduce using rule 111 (PrimaryExpr -> Conversion .)
    RIGHT_PARANTHESIS reduce using rule 111 (PrimaryExpr -> Conversion .)
    COLON           reduce using rule 111 (PrimaryExpr -> Conversion .)
    INC             reduce using rule 111 (PrimaryExpr -> Conversion .)
    DEC             reduce using rule 111 (PrimaryExpr -> Conversion .)
    PLUS_ASSIGN     reduce using rule 111 (PrimaryExpr -> Conversion .)
    MINUS_ASSIGN    reduce using rule 111 (PrimaryExpr -> Conversion .)
    MULT_ASSIGN     reduce using rule 111 (PrimaryExpr -> Conversion .)
    DIV_ASSIGN      reduce using rule 111 (PrimaryExpr -> Conversion .)
    MOD_ASSIGN      reduce using rule 111 (PrimaryExpr -> Conversion .)
    AND_ASSIGN      reduce using rule 111 (PrimaryExpr -> Conversion .)
    OR_ASSIGN       reduce using rule 111 (PrimaryExpr -> Conversion .)
    XOR_ASSIGN      reduce using rule 111 (PrimaryExpr -> Conversion .)
    LSHIFT_ASSIGN   reduce using rule 111 (PrimaryExpr -> Conversion .)
    RSHIFT_ASSIGN   reduce using rule 111 (PrimaryExpr -> Conversion .)
    ASSIGN          reduce using rule 111 (PrimaryExpr -> Conversion .)
    LEFT_BRACES     reduce using rule 111 (PrimaryExpr -> Conversion .)


state 102

    (94) Operand -> LEFT_PARANTHESIS . Expression RIGHT_PARANTHESIS
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 177
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 103

    (147) UnaryOp -> ADD .

    NOT             reduce using rule 147 (UnaryOp -> ADD .)
    ADD             reduce using rule 147 (UnaryOp -> ADD .)
    SUB             reduce using rule 147 (UnaryOp -> ADD .)
    MULT            reduce using rule 147 (UnaryOp -> ADD .)
    AND             reduce using rule 147 (UnaryOp -> ADD .)
    LEFT_PARANTHESIS reduce using rule 147 (UnaryOp -> ADD .)
    TYPECAST        reduce using rule 147 (UnaryOp -> ADD .)
    IDENTIFIER      reduce using rule 147 (UnaryOp -> ADD .)
    INTEGER         reduce using rule 147 (UnaryOp -> ADD .)
    OCTAL           reduce using rule 147 (UnaryOp -> ADD .)
    HEX             reduce using rule 147 (UnaryOp -> ADD .)
    RUNE            reduce using rule 147 (UnaryOp -> ADD .)
    FLOAT           reduce using rule 147 (UnaryOp -> ADD .)
    IMAGINARY       reduce using rule 147 (UnaryOp -> ADD .)
    STRING          reduce using rule 147 (UnaryOp -> ADD .)


state 104

    (148) UnaryOp -> SUB .

    NOT             reduce using rule 148 (UnaryOp -> SUB .)
    ADD             reduce using rule 148 (UnaryOp -> SUB .)
    SUB             reduce using rule 148 (UnaryOp -> SUB .)
    MULT            reduce using rule 148 (UnaryOp -> SUB .)
    AND             reduce using rule 148 (UnaryOp -> SUB .)
    LEFT_PARANTHESIS reduce using rule 148 (UnaryOp -> SUB .)
    TYPECAST        reduce using rule 148 (UnaryOp -> SUB .)
    IDENTIFIER      reduce using rule 148 (UnaryOp -> SUB .)
    INTEGER         reduce using rule 148 (UnaryOp -> SUB .)
    OCTAL           reduce using rule 148 (UnaryOp -> SUB .)
    HEX             reduce using rule 148 (UnaryOp -> SUB .)
    RUNE            reduce using rule 148 (UnaryOp -> SUB .)
    FLOAT           reduce using rule 148 (UnaryOp -> SUB .)
    IMAGINARY       reduce using rule 148 (UnaryOp -> SUB .)
    STRING          reduce using rule 148 (UnaryOp -> SUB .)


state 105

    (149) UnaryOp -> MULT .

    NOT             reduce using rule 149 (UnaryOp -> MULT .)
    ADD             reduce using rule 149 (UnaryOp -> MULT .)
    SUB             reduce using rule 149 (UnaryOp -> MULT .)
    MULT            reduce using rule 149 (UnaryOp -> MULT .)
    AND             reduce using rule 149 (UnaryOp -> MULT .)
    LEFT_PARANTHESIS reduce using rule 149 (UnaryOp -> MULT .)
    TYPECAST        reduce using rule 149 (UnaryOp -> MULT .)
    IDENTIFIER      reduce using rule 149 (UnaryOp -> MULT .)
    INTEGER         reduce using rule 149 (UnaryOp -> MULT .)
    OCTAL           reduce using rule 149 (UnaryOp -> MULT .)
    HEX             reduce using rule 149 (UnaryOp -> MULT .)
    RUNE            reduce using rule 149 (UnaryOp -> MULT .)
    FLOAT           reduce using rule 149 (UnaryOp -> MULT .)
    IMAGINARY       reduce using rule 149 (UnaryOp -> MULT .)
    STRING          reduce using rule 149 (UnaryOp -> MULT .)


state 106

    (150) UnaryOp -> AND .

    NOT             reduce using rule 150 (UnaryOp -> AND .)
    ADD             reduce using rule 150 (UnaryOp -> AND .)
    SUB             reduce using rule 150 (UnaryOp -> AND .)
    MULT            reduce using rule 150 (UnaryOp -> AND .)
    AND             reduce using rule 150 (UnaryOp -> AND .)
    LEFT_PARANTHESIS reduce using rule 150 (UnaryOp -> AND .)
    TYPECAST        reduce using rule 150 (UnaryOp -> AND .)
    IDENTIFIER      reduce using rule 150 (UnaryOp -> AND .)
    INTEGER         reduce using rule 150 (UnaryOp -> AND .)
    OCTAL           reduce using rule 150 (UnaryOp -> AND .)
    HEX             reduce using rule 150 (UnaryOp -> AND .)
    RUNE            reduce using rule 150 (UnaryOp -> AND .)
    FLOAT           reduce using rule 150 (UnaryOp -> AND .)
    IMAGINARY       reduce using rule 150 (UnaryOp -> AND .)
    STRING          reduce using rule 150 (UnaryOp -> AND .)


state 107

    (92) Operand -> Literal .

    LEFT_BRACKET    reduce using rule 92 (Operand -> Literal .)
    LEFT_PARANTHESIS reduce using rule 92 (Operand -> Literal .)
    DOT             reduce using rule 92 (Operand -> Literal .)
    LOG_OR          reduce using rule 92 (Operand -> Literal .)
    LOG_AND         reduce using rule 92 (Operand -> Literal .)
    EQ              reduce using rule 92 (Operand -> Literal .)
    NEQ             reduce using rule 92 (Operand -> Literal .)
    LT              reduce using rule 92 (Operand -> Literal .)
    GT              reduce using rule 92 (Operand -> Literal .)
    LEQ             reduce using rule 92 (Operand -> Literal .)
    GEQ             reduce using rule 92 (Operand -> Literal .)
    OR              reduce using rule 92 (Operand -> Literal .)
    XOR             reduce using rule 92 (Operand -> Literal .)
    DIV             reduce using rule 92 (Operand -> Literal .)
    MOD             reduce using rule 92 (Operand -> Literal .)
    LSHIFT          reduce using rule 92 (Operand -> Literal .)
    RSHIFT          reduce using rule 92 (Operand -> Literal .)
    ADD             reduce using rule 92 (Operand -> Literal .)
    SUB             reduce using rule 92 (Operand -> Literal .)
    MULT            reduce using rule 92 (Operand -> Literal .)
    AND             reduce using rule 92 (Operand -> Literal .)
    RIGHT_BRACKET   reduce using rule 92 (Operand -> Literal .)
    COMMA           reduce using rule 92 (Operand -> Literal .)
    SEMICOLON       reduce using rule 92 (Operand -> Literal .)
    RIGHT_PARANTHESIS reduce using rule 92 (Operand -> Literal .)
    COLON           reduce using rule 92 (Operand -> Literal .)
    INC             reduce using rule 92 (Operand -> Literal .)
    DEC             reduce using rule 92 (Operand -> Literal .)
    PLUS_ASSIGN     reduce using rule 92 (Operand -> Literal .)
    MINUS_ASSIGN    reduce using rule 92 (Operand -> Literal .)
    MULT_ASSIGN     reduce using rule 92 (Operand -> Literal .)
    DIV_ASSIGN      reduce using rule 92 (Operand -> Literal .)
    MOD_ASSIGN      reduce using rule 92 (Operand -> Literal .)
    AND_ASSIGN      reduce using rule 92 (Operand -> Literal .)
    OR_ASSIGN       reduce using rule 92 (Operand -> Literal .)
    XOR_ASSIGN      reduce using rule 92 (Operand -> Literal .)
    LSHIFT_ASSIGN   reduce using rule 92 (Operand -> Literal .)
    RSHIFT_ASSIGN   reduce using rule 92 (Operand -> Literal .)
    ASSIGN          reduce using rule 92 (Operand -> Literal .)
    LEFT_BRACES     reduce using rule 92 (Operand -> Literal .)


state 108

    (93) Operand -> OperandName .

    LEFT_BRACKET    reduce using rule 93 (Operand -> OperandName .)
    LEFT_PARANTHESIS reduce using rule 93 (Operand -> OperandName .)
    DOT             reduce using rule 93 (Operand -> OperandName .)
    LOG_OR          reduce using rule 93 (Operand -> OperandName .)
    LOG_AND         reduce using rule 93 (Operand -> OperandName .)
    EQ              reduce using rule 93 (Operand -> OperandName .)
    NEQ             reduce using rule 93 (Operand -> OperandName .)
    LT              reduce using rule 93 (Operand -> OperandName .)
    GT              reduce using rule 93 (Operand -> OperandName .)
    LEQ             reduce using rule 93 (Operand -> OperandName .)
    GEQ             reduce using rule 93 (Operand -> OperandName .)
    OR              reduce using rule 93 (Operand -> OperandName .)
    XOR             reduce using rule 93 (Operand -> OperandName .)
    DIV             reduce using rule 93 (Operand -> OperandName .)
    MOD             reduce using rule 93 (Operand -> OperandName .)
    LSHIFT          reduce using rule 93 (Operand -> OperandName .)
    RSHIFT          reduce using rule 93 (Operand -> OperandName .)
    ADD             reduce using rule 93 (Operand -> OperandName .)
    SUB             reduce using rule 93 (Operand -> OperandName .)
    MULT            reduce using rule 93 (Operand -> OperandName .)
    AND             reduce using rule 93 (Operand -> OperandName .)
    RIGHT_BRACKET   reduce using rule 93 (Operand -> OperandName .)
    COMMA           reduce using rule 93 (Operand -> OperandName .)
    SEMICOLON       reduce using rule 93 (Operand -> OperandName .)
    RIGHT_PARANTHESIS reduce using rule 93 (Operand -> OperandName .)
    COLON           reduce using rule 93 (Operand -> OperandName .)
    INC             reduce using rule 93 (Operand -> OperandName .)
    DEC             reduce using rule 93 (Operand -> OperandName .)
    PLUS_ASSIGN     reduce using rule 93 (Operand -> OperandName .)
    MINUS_ASSIGN    reduce using rule 93 (Operand -> OperandName .)
    MULT_ASSIGN     reduce using rule 93 (Operand -> OperandName .)
    DIV_ASSIGN      reduce using rule 93 (Operand -> OperandName .)
    MOD_ASSIGN      reduce using rule 93 (Operand -> OperandName .)
    AND_ASSIGN      reduce using rule 93 (Operand -> OperandName .)
    OR_ASSIGN       reduce using rule 93 (Operand -> OperandName .)
    XOR_ASSIGN      reduce using rule 93 (Operand -> OperandName .)
    LSHIFT_ASSIGN   reduce using rule 93 (Operand -> OperandName .)
    RSHIFT_ASSIGN   reduce using rule 93 (Operand -> OperandName .)
    ASSIGN          reduce using rule 93 (Operand -> OperandName .)
    LEFT_BRACES     reduce using rule 93 (Operand -> OperandName .)


state 109

    (151) Conversion -> TYPECAST . Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 178
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 110

    (95) Literal -> BasicLit .

    LEFT_BRACKET    reduce using rule 95 (Literal -> BasicLit .)
    LEFT_PARANTHESIS reduce using rule 95 (Literal -> BasicLit .)
    DOT             reduce using rule 95 (Literal -> BasicLit .)
    LOG_OR          reduce using rule 95 (Literal -> BasicLit .)
    LOG_AND         reduce using rule 95 (Literal -> BasicLit .)
    EQ              reduce using rule 95 (Literal -> BasicLit .)
    NEQ             reduce using rule 95 (Literal -> BasicLit .)
    LT              reduce using rule 95 (Literal -> BasicLit .)
    GT              reduce using rule 95 (Literal -> BasicLit .)
    LEQ             reduce using rule 95 (Literal -> BasicLit .)
    GEQ             reduce using rule 95 (Literal -> BasicLit .)
    OR              reduce using rule 95 (Literal -> BasicLit .)
    XOR             reduce using rule 95 (Literal -> BasicLit .)
    DIV             reduce using rule 95 (Literal -> BasicLit .)
    MOD             reduce using rule 95 (Literal -> BasicLit .)
    LSHIFT          reduce using rule 95 (Literal -> BasicLit .)
    RSHIFT          reduce using rule 95 (Literal -> BasicLit .)
    ADD             reduce using rule 95 (Literal -> BasicLit .)
    SUB             reduce using rule 95 (Literal -> BasicLit .)
    MULT            reduce using rule 95 (Literal -> BasicLit .)
    AND             reduce using rule 95 (Literal -> BasicLit .)
    RIGHT_BRACKET   reduce using rule 95 (Literal -> BasicLit .)
    COMMA           reduce using rule 95 (Literal -> BasicLit .)
    SEMICOLON       reduce using rule 95 (Literal -> BasicLit .)
    RIGHT_PARANTHESIS reduce using rule 95 (Literal -> BasicLit .)
    COLON           reduce using rule 95 (Literal -> BasicLit .)
    INC             reduce using rule 95 (Literal -> BasicLit .)
    DEC             reduce using rule 95 (Literal -> BasicLit .)
    PLUS_ASSIGN     reduce using rule 95 (Literal -> BasicLit .)
    MINUS_ASSIGN    reduce using rule 95 (Literal -> BasicLit .)
    MULT_ASSIGN     reduce using rule 95 (Literal -> BasicLit .)
    DIV_ASSIGN      reduce using rule 95 (Literal -> BasicLit .)
    MOD_ASSIGN      reduce using rule 95 (Literal -> BasicLit .)
    AND_ASSIGN      reduce using rule 95 (Literal -> BasicLit .)
    OR_ASSIGN       reduce using rule 95 (Literal -> BasicLit .)
    XOR_ASSIGN      reduce using rule 95 (Literal -> BasicLit .)
    LSHIFT_ASSIGN   reduce using rule 95 (Literal -> BasicLit .)
    RSHIFT_ASSIGN   reduce using rule 95 (Literal -> BasicLit .)
    ASSIGN          reduce using rule 95 (Literal -> BasicLit .)
    LEFT_BRACES     reduce using rule 95 (Literal -> BasicLit .)


state 111

    (107) OperandName -> IDENTIFIER .

    LEFT_BRACKET    reduce using rule 107 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 107 (OperandName -> IDENTIFIER .)
    DOT             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 107 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 107 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 107 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 107 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 107 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 107 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 107 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 107 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 107 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 107 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 107 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 107 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 107 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 107 (OperandName -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 107 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 107 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 107 (OperandName -> IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 107 (OperandName -> IDENTIFIER .)
    COLON           reduce using rule 107 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 107 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 107 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 107 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 107 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 107 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 107 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 107 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 107 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 107 (OperandName -> IDENTIFIER .)
    LEFT_BRACES     reduce using rule 107 (OperandName -> IDENTIFIER .)


state 112

    (96) BasicLit -> I . INTEGER
    (97) BasicLit -> I . OCTAL
    (98) BasicLit -> I . HEX
    (101) BasicLit -> I . RUNE

    INTEGER         shift and go to state 179
    OCTAL           shift and go to state 180
    HEX             shift and go to state 181
    RUNE            shift and go to state 182


state 113

    (99) BasicLit -> F . FLOAT

    FLOAT           shift and go to state 183


state 114

    (100) BasicLit -> C . IMAGINARY

    IMAGINARY       shift and go to state 184


state 115

    (102) BasicLit -> S . STRING

    STRING          shift and go to state 185


state 116

    (23) StructType -> CreateFuncScope STRUCT . LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope

    LEFT_BRACES     shift and go to state 186


state 117

    (30) PointerType -> MULT BaseType .

    ASSIGN          reduce using rule 30 (PointerType -> MULT BaseType .)
    SEMICOLON       reduce using rule 30 (PointerType -> MULT BaseType .)
    RIGHT_PARANTHESIS reduce using rule 30 (PointerType -> MULT BaseType .)
    LEFT_BRACES     reduce using rule 30 (PointerType -> MULT BaseType .)
    COMMA           reduce using rule 30 (PointerType -> MULT BaseType .)
    LEFT_PARANTHESIS reduce using rule 30 (PointerType -> MULT BaseType .)
    COLON           reduce using rule 30 (PointerType -> MULT BaseType .)


state 118

    (31) BaseType -> Type .

    ASSIGN          reduce using rule 31 (BaseType -> Type .)
    SEMICOLON       reduce using rule 31 (BaseType -> Type .)
    RIGHT_PARANTHESIS reduce using rule 31 (BaseType -> Type .)
    LEFT_BRACES     reduce using rule 31 (BaseType -> Type .)
    COMMA           reduce using rule 31 (BaseType -> Type .)
    LEFT_PARANTHESIS reduce using rule 31 (BaseType -> Type .)
    COLON           reduce using rule 31 (BaseType -> Type .)


state 119

    (63) IdentifierRep -> IdentifierRep COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 187


state 120

    (69) TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 69 (TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS .)


state 121

    (70) TypeSpecRep -> TypeSpecRep TypeSpec . SEMICOLON

    SEMICOLON       shift and go to state 188


state 122

    (76) VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 76 (VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS .)


state 123

    (77) VarSpecRep -> VarSpecRep VarSpec . SEMICOLON

    SEMICOLON       shift and go to state 189


state 124

    (79) VarSpec -> IdentifierList Type ExpressionListOpt .

    SEMICOLON       reduce using rule 79 (VarSpec -> IdentifierList Type ExpressionListOpt .)


state 125

    (81) ExpressionListOpt -> ASSIGN . ExpressionList
    (65) ExpressionList -> . Expression ExpressionRep
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ExpressionList                 shift and go to state 190
    Expression                     shift and go to state 128
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 126

    (82) ExpressionListOpt -> epsilon .

    SEMICOLON       reduce using rule 82 (ExpressionListOpt -> epsilon .)


state 127

    (80) VarSpec -> IdentifierList ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 80 (VarSpec -> IdentifierList ASSIGN ExpressionList .)


state 128

    (65) ExpressionList -> Expression . ExpressionRep
    (124) Expression -> Expression . BinaryOp Expression
    (66) ExpressionRep -> . ExpressionRep COMMA Expression
    (67) ExpressionRep -> . epsilon
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (252) epsilon -> .
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    COMMA           reduce using rule 252 (epsilon -> .)
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    RIGHT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    LEFT_BRACES     reduce using rule 252 (epsilon -> .)
    COLON           reduce using rule 252 (epsilon -> .)
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    ExpressionRep                  shift and go to state 191
    BinaryOp                       shift and go to state 151
    epsilon                        shift and go to state 192
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 129

    (245) ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 245 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    DOT             reduce using rule 245 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 245 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    STRING          reduce using rule 245 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)


state 130

    (84) FunctionDecl -> FUNC FunctionName CreateScope Function EndScope .

    SEMICOLON       reduce using rule 84 (FunctionDecl -> FUNC FunctionName CreateScope Function EndScope .)


state 131

    (85) FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope .

    SEMICOLON       reduce using rule 85 (FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope .)


state 132

    (90) Function -> Signature FunctionBody .

    SEMICOLON       reduce using rule 90 (Function -> Signature FunctionBody .)


state 133

    (91) FunctionBody -> Block .

    SEMICOLON       reduce using rule 91 (FunctionBody -> Block .)


state 134

    (46) Block -> LEFT_BRACES . StatementList RIGHT_BRACES
    (47) StatementList -> . StatementRep
    (48) StatementRep -> . StatementRep Statement SEMICOLON
    (49) StatementRep -> . epsilon
    (252) epsilon -> .

    RETURN          reduce using rule 252 (epsilon -> .)
    SCAN            reduce using rule 252 (epsilon -> .)
    BREAK           reduce using rule 252 (epsilon -> .)
    CONTINUE        reduce using rule 252 (epsilon -> .)
    GOTO            reduce using rule 252 (epsilon -> .)
    PRINT           reduce using rule 252 (epsilon -> .)
    IF              reduce using rule 252 (epsilon -> .)
    FOR             reduce using rule 252 (epsilon -> .)
    CONST           reduce using rule 252 (epsilon -> .)
    TYPE            reduce using rule 252 (epsilon -> .)
    VAR             reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)
    SWITCH          reduce using rule 252 (epsilon -> .)
    NOT             reduce using rule 252 (epsilon -> .)
    ADD             reduce using rule 252 (epsilon -> .)
    SUB             reduce using rule 252 (epsilon -> .)
    MULT            reduce using rule 252 (epsilon -> .)
    AND             reduce using rule 252 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    TYPECAST        reduce using rule 252 (epsilon -> .)
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    LEFT_BRACES     reduce using rule 252 (epsilon -> .)
    INTEGER         reduce using rule 252 (epsilon -> .)
    OCTAL           reduce using rule 252 (epsilon -> .)
    HEX             reduce using rule 252 (epsilon -> .)
    RUNE            reduce using rule 252 (epsilon -> .)
    FLOAT           reduce using rule 252 (epsilon -> .)
    IMAGINARY       reduce using rule 252 (epsilon -> .)
    STRING          reduce using rule 252 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 252 (epsilon -> .)

    StatementList                  shift and go to state 193
    StatementRep                   shift and go to state 194
    epsilon                        shift and go to state 195

state 135

    (32) Signature -> Parameters TypeOpt .

    LEFT_BRACES     reduce using rule 32 (Signature -> Parameters TypeOpt .)
    SEMICOLON       reduce using rule 32 (Signature -> Parameters TypeOpt .)


state 136

    (18) TypeOpt -> Type .

    LEFT_BRACES     reduce using rule 18 (TypeOpt -> Type .)
    SEMICOLON       reduce using rule 18 (TypeOpt -> Type .)


state 137

    (19) TypeOpt -> epsilon .

    LEFT_BRACES     reduce using rule 19 (TypeOpt -> epsilon .)
    SEMICOLON       reduce using rule 19 (TypeOpt -> epsilon .)


state 138

    (37) Parameters -> LEFT_PARANTHESIS ParameterListOpt . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 196


state 139

    (38) ParameterListOpt -> ParametersList .

    RIGHT_PARANTHESIS reduce using rule 38 (ParameterListOpt -> ParametersList .)


state 140

    (39) ParameterListOpt -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 39 (ParameterListOpt -> epsilon .)


state 141

    (40) ParametersList -> ParameterDecl .
    (43) ParameterDeclCommaRep -> ParameterDecl . COMMA ParameterDecl

    RIGHT_PARANTHESIS reduce using rule 40 (ParametersList -> ParameterDecl .)
    COMMA           shift and go to state 197


state 142

    (41) ParametersList -> ParameterDeclCommaRep .
    (42) ParameterDeclCommaRep -> ParameterDeclCommaRep . COMMA ParameterDecl

    RIGHT_PARANTHESIS reduce using rule 41 (ParametersList -> ParameterDeclCommaRep .)
    COMMA           shift and go to state 198


state 143

    (44) ParameterDecl -> IdentifierList . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 199
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 144

    (45) ParameterDecl -> Type .

    COMMA           reduce using rule 45 (ParameterDecl -> Type .)
    RIGHT_PARANTHESIS reduce using rule 45 (ParameterDecl -> Type .)


state 145

    (62) IdentifierList -> IDENTIFIER . IdentifierRep
    (108) QualifiedIdent -> IDENTIFIER . DOT TypeName
    (63) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (64) IdentifierRep -> . epsilon
    (252) epsilon -> .

    DOT             shift and go to state 93
    COMMA           reduce using rule 252 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    INT_T           reduce using rule 252 (epsilon -> .)
    FLOAT_T         reduce using rule 252 (epsilon -> .)
    UINT_T          reduce using rule 252 (epsilon -> .)
    COMPLEX_T       reduce using rule 252 (epsilon -> .)
    RUNE_T          reduce using rule 252 (epsilon -> .)
    BOOL_T          reduce using rule 252 (epsilon -> .)
    STRING_T        reduce using rule 252 (epsilon -> .)
    TYPE            reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)
    LEFT_BRACKET    reduce using rule 252 (epsilon -> .)
    MULT            reduce using rule 252 (epsilon -> .)
    STRUCT          reduce using rule 252 (epsilon -> .)

    IdentifierRep                  shift and go to state 73
    epsilon                        shift and go to state 74

state 146

    (57) ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 57 (ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 57 (ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .)


state 147

    (59) ConstSpec -> IdentifierList Type ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 59 (ConstSpec -> IdentifierList Type ASSIGN ExpressionList .)


state 148

    (4) Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .

    ASSIGN          reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COLON           reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)


state 149

    (108) QualifiedIdent -> IDENTIFIER DOT TypeName .

    ASSIGN          reduce using rule 108 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    SEMICOLON       reduce using rule 108 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    RIGHT_PARANTHESIS reduce using rule 108 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    LEFT_BRACES     reduce using rule 108 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    COMMA           reduce using rule 108 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    LEFT_PARANTHESIS reduce using rule 108 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    COLON           reduce using rule 108 (QualifiedIdent -> IDENTIFIER DOT TypeName .)


state 150

    (20) ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET . ElementType
    (22) ElementType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    ElementType                    shift and go to state 200
    Type                           shift and go to state 201
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 151

    (124) Expression -> Expression BinaryOp . Expression
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 202
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 152

    (130) BinaryOp -> LOG_OR .

    NOT             reduce using rule 130 (BinaryOp -> LOG_OR .)
    ADD             reduce using rule 130 (BinaryOp -> LOG_OR .)
    SUB             reduce using rule 130 (BinaryOp -> LOG_OR .)
    MULT            reduce using rule 130 (BinaryOp -> LOG_OR .)
    AND             reduce using rule 130 (BinaryOp -> LOG_OR .)
    LEFT_PARANTHESIS reduce using rule 130 (BinaryOp -> LOG_OR .)
    TYPECAST        reduce using rule 130 (BinaryOp -> LOG_OR .)
    IDENTIFIER      reduce using rule 130 (BinaryOp -> LOG_OR .)
    INTEGER         reduce using rule 130 (BinaryOp -> LOG_OR .)
    OCTAL           reduce using rule 130 (BinaryOp -> LOG_OR .)
    HEX             reduce using rule 130 (BinaryOp -> LOG_OR .)
    RUNE            reduce using rule 130 (BinaryOp -> LOG_OR .)
    FLOAT           reduce using rule 130 (BinaryOp -> LOG_OR .)
    IMAGINARY       reduce using rule 130 (BinaryOp -> LOG_OR .)
    STRING          reduce using rule 130 (BinaryOp -> LOG_OR .)


state 153

    (131) BinaryOp -> LOG_AND .

    NOT             reduce using rule 131 (BinaryOp -> LOG_AND .)
    ADD             reduce using rule 131 (BinaryOp -> LOG_AND .)
    SUB             reduce using rule 131 (BinaryOp -> LOG_AND .)
    MULT            reduce using rule 131 (BinaryOp -> LOG_AND .)
    AND             reduce using rule 131 (BinaryOp -> LOG_AND .)
    LEFT_PARANTHESIS reduce using rule 131 (BinaryOp -> LOG_AND .)
    TYPECAST        reduce using rule 131 (BinaryOp -> LOG_AND .)
    IDENTIFIER      reduce using rule 131 (BinaryOp -> LOG_AND .)
    INTEGER         reduce using rule 131 (BinaryOp -> LOG_AND .)
    OCTAL           reduce using rule 131 (BinaryOp -> LOG_AND .)
    HEX             reduce using rule 131 (BinaryOp -> LOG_AND .)
    RUNE            reduce using rule 131 (BinaryOp -> LOG_AND .)
    FLOAT           reduce using rule 131 (BinaryOp -> LOG_AND .)
    IMAGINARY       reduce using rule 131 (BinaryOp -> LOG_AND .)
    STRING          reduce using rule 131 (BinaryOp -> LOG_AND .)


state 154

    (132) BinaryOp -> RelOp .

    NOT             reduce using rule 132 (BinaryOp -> RelOp .)
    ADD             reduce using rule 132 (BinaryOp -> RelOp .)
    SUB             reduce using rule 132 (BinaryOp -> RelOp .)
    MULT            reduce using rule 132 (BinaryOp -> RelOp .)
    AND             reduce using rule 132 (BinaryOp -> RelOp .)
    LEFT_PARANTHESIS reduce using rule 132 (BinaryOp -> RelOp .)
    TYPECAST        reduce using rule 132 (BinaryOp -> RelOp .)
    IDENTIFIER      reduce using rule 132 (BinaryOp -> RelOp .)
    INTEGER         reduce using rule 132 (BinaryOp -> RelOp .)
    OCTAL           reduce using rule 132 (BinaryOp -> RelOp .)
    HEX             reduce using rule 132 (BinaryOp -> RelOp .)
    RUNE            reduce using rule 132 (BinaryOp -> RelOp .)
    FLOAT           reduce using rule 132 (BinaryOp -> RelOp .)
    IMAGINARY       reduce using rule 132 (BinaryOp -> RelOp .)
    STRING          reduce using rule 132 (BinaryOp -> RelOp .)


state 155

    (133) BinaryOp -> AddMulOp .

    NOT             reduce using rule 133 (BinaryOp -> AddMulOp .)
    ADD             reduce using rule 133 (BinaryOp -> AddMulOp .)
    SUB             reduce using rule 133 (BinaryOp -> AddMulOp .)
    MULT            reduce using rule 133 (BinaryOp -> AddMulOp .)
    AND             reduce using rule 133 (BinaryOp -> AddMulOp .)
    LEFT_PARANTHESIS reduce using rule 133 (BinaryOp -> AddMulOp .)
    TYPECAST        reduce using rule 133 (BinaryOp -> AddMulOp .)
    IDENTIFIER      reduce using rule 133 (BinaryOp -> AddMulOp .)
    INTEGER         reduce using rule 133 (BinaryOp -> AddMulOp .)
    OCTAL           reduce using rule 133 (BinaryOp -> AddMulOp .)
    HEX             reduce using rule 133 (BinaryOp -> AddMulOp .)
    RUNE            reduce using rule 133 (BinaryOp -> AddMulOp .)
    FLOAT           reduce using rule 133 (BinaryOp -> AddMulOp .)
    IMAGINARY       reduce using rule 133 (BinaryOp -> AddMulOp .)
    STRING          reduce using rule 133 (BinaryOp -> AddMulOp .)


state 156

    (134) RelOp -> EQ .

    NOT             reduce using rule 134 (RelOp -> EQ .)
    ADD             reduce using rule 134 (RelOp -> EQ .)
    SUB             reduce using rule 134 (RelOp -> EQ .)
    MULT            reduce using rule 134 (RelOp -> EQ .)
    AND             reduce using rule 134 (RelOp -> EQ .)
    LEFT_PARANTHESIS reduce using rule 134 (RelOp -> EQ .)
    TYPECAST        reduce using rule 134 (RelOp -> EQ .)
    IDENTIFIER      reduce using rule 134 (RelOp -> EQ .)
    INTEGER         reduce using rule 134 (RelOp -> EQ .)
    OCTAL           reduce using rule 134 (RelOp -> EQ .)
    HEX             reduce using rule 134 (RelOp -> EQ .)
    RUNE            reduce using rule 134 (RelOp -> EQ .)
    FLOAT           reduce using rule 134 (RelOp -> EQ .)
    IMAGINARY       reduce using rule 134 (RelOp -> EQ .)
    STRING          reduce using rule 134 (RelOp -> EQ .)


state 157

    (135) RelOp -> NEQ .

    NOT             reduce using rule 135 (RelOp -> NEQ .)
    ADD             reduce using rule 135 (RelOp -> NEQ .)
    SUB             reduce using rule 135 (RelOp -> NEQ .)
    MULT            reduce using rule 135 (RelOp -> NEQ .)
    AND             reduce using rule 135 (RelOp -> NEQ .)
    LEFT_PARANTHESIS reduce using rule 135 (RelOp -> NEQ .)
    TYPECAST        reduce using rule 135 (RelOp -> NEQ .)
    IDENTIFIER      reduce using rule 135 (RelOp -> NEQ .)
    INTEGER         reduce using rule 135 (RelOp -> NEQ .)
    OCTAL           reduce using rule 135 (RelOp -> NEQ .)
    HEX             reduce using rule 135 (RelOp -> NEQ .)
    RUNE            reduce using rule 135 (RelOp -> NEQ .)
    FLOAT           reduce using rule 135 (RelOp -> NEQ .)
    IMAGINARY       reduce using rule 135 (RelOp -> NEQ .)
    STRING          reduce using rule 135 (RelOp -> NEQ .)


state 158

    (136) RelOp -> LT .

    NOT             reduce using rule 136 (RelOp -> LT .)
    ADD             reduce using rule 136 (RelOp -> LT .)
    SUB             reduce using rule 136 (RelOp -> LT .)
    MULT            reduce using rule 136 (RelOp -> LT .)
    AND             reduce using rule 136 (RelOp -> LT .)
    LEFT_PARANTHESIS reduce using rule 136 (RelOp -> LT .)
    TYPECAST        reduce using rule 136 (RelOp -> LT .)
    IDENTIFIER      reduce using rule 136 (RelOp -> LT .)
    INTEGER         reduce using rule 136 (RelOp -> LT .)
    OCTAL           reduce using rule 136 (RelOp -> LT .)
    HEX             reduce using rule 136 (RelOp -> LT .)
    RUNE            reduce using rule 136 (RelOp -> LT .)
    FLOAT           reduce using rule 136 (RelOp -> LT .)
    IMAGINARY       reduce using rule 136 (RelOp -> LT .)
    STRING          reduce using rule 136 (RelOp -> LT .)


state 159

    (137) RelOp -> GT .

    NOT             reduce using rule 137 (RelOp -> GT .)
    ADD             reduce using rule 137 (RelOp -> GT .)
    SUB             reduce using rule 137 (RelOp -> GT .)
    MULT            reduce using rule 137 (RelOp -> GT .)
    AND             reduce using rule 137 (RelOp -> GT .)
    LEFT_PARANTHESIS reduce using rule 137 (RelOp -> GT .)
    TYPECAST        reduce using rule 137 (RelOp -> GT .)
    IDENTIFIER      reduce using rule 137 (RelOp -> GT .)
    INTEGER         reduce using rule 137 (RelOp -> GT .)
    OCTAL           reduce using rule 137 (RelOp -> GT .)
    HEX             reduce using rule 137 (RelOp -> GT .)
    RUNE            reduce using rule 137 (RelOp -> GT .)
    FLOAT           reduce using rule 137 (RelOp -> GT .)
    IMAGINARY       reduce using rule 137 (RelOp -> GT .)
    STRING          reduce using rule 137 (RelOp -> GT .)


state 160

    (138) RelOp -> LEQ .

    NOT             reduce using rule 138 (RelOp -> LEQ .)
    ADD             reduce using rule 138 (RelOp -> LEQ .)
    SUB             reduce using rule 138 (RelOp -> LEQ .)
    MULT            reduce using rule 138 (RelOp -> LEQ .)
    AND             reduce using rule 138 (RelOp -> LEQ .)
    LEFT_PARANTHESIS reduce using rule 138 (RelOp -> LEQ .)
    TYPECAST        reduce using rule 138 (RelOp -> LEQ .)
    IDENTIFIER      reduce using rule 138 (RelOp -> LEQ .)
    INTEGER         reduce using rule 138 (RelOp -> LEQ .)
    OCTAL           reduce using rule 138 (RelOp -> LEQ .)
    HEX             reduce using rule 138 (RelOp -> LEQ .)
    RUNE            reduce using rule 138 (RelOp -> LEQ .)
    FLOAT           reduce using rule 138 (RelOp -> LEQ .)
    IMAGINARY       reduce using rule 138 (RelOp -> LEQ .)
    STRING          reduce using rule 138 (RelOp -> LEQ .)


state 161

    (139) RelOp -> GEQ .

    NOT             reduce using rule 139 (RelOp -> GEQ .)
    ADD             reduce using rule 139 (RelOp -> GEQ .)
    SUB             reduce using rule 139 (RelOp -> GEQ .)
    MULT            reduce using rule 139 (RelOp -> GEQ .)
    AND             reduce using rule 139 (RelOp -> GEQ .)
    LEFT_PARANTHESIS reduce using rule 139 (RelOp -> GEQ .)
    TYPECAST        reduce using rule 139 (RelOp -> GEQ .)
    IDENTIFIER      reduce using rule 139 (RelOp -> GEQ .)
    INTEGER         reduce using rule 139 (RelOp -> GEQ .)
    OCTAL           reduce using rule 139 (RelOp -> GEQ .)
    HEX             reduce using rule 139 (RelOp -> GEQ .)
    RUNE            reduce using rule 139 (RelOp -> GEQ .)
    FLOAT           reduce using rule 139 (RelOp -> GEQ .)
    IMAGINARY       reduce using rule 139 (RelOp -> GEQ .)
    STRING          reduce using rule 139 (RelOp -> GEQ .)


state 162

    (140) AddMulOp -> UnaryOp .

    NOT             reduce using rule 140 (AddMulOp -> UnaryOp .)
    ADD             reduce using rule 140 (AddMulOp -> UnaryOp .)
    SUB             reduce using rule 140 (AddMulOp -> UnaryOp .)
    MULT            reduce using rule 140 (AddMulOp -> UnaryOp .)
    AND             reduce using rule 140 (AddMulOp -> UnaryOp .)
    LEFT_PARANTHESIS reduce using rule 140 (AddMulOp -> UnaryOp .)
    TYPECAST        reduce using rule 140 (AddMulOp -> UnaryOp .)
    IDENTIFIER      reduce using rule 140 (AddMulOp -> UnaryOp .)
    INTEGER         reduce using rule 140 (AddMulOp -> UnaryOp .)
    OCTAL           reduce using rule 140 (AddMulOp -> UnaryOp .)
    HEX             reduce using rule 140 (AddMulOp -> UnaryOp .)
    RUNE            reduce using rule 140 (AddMulOp -> UnaryOp .)
    FLOAT           reduce using rule 140 (AddMulOp -> UnaryOp .)
    IMAGINARY       reduce using rule 140 (AddMulOp -> UnaryOp .)
    STRING          reduce using rule 140 (AddMulOp -> UnaryOp .)


state 163

    (141) AddMulOp -> OR .

    NOT             reduce using rule 141 (AddMulOp -> OR .)
    ADD             reduce using rule 141 (AddMulOp -> OR .)
    SUB             reduce using rule 141 (AddMulOp -> OR .)
    MULT            reduce using rule 141 (AddMulOp -> OR .)
    AND             reduce using rule 141 (AddMulOp -> OR .)
    LEFT_PARANTHESIS reduce using rule 141 (AddMulOp -> OR .)
    TYPECAST        reduce using rule 141 (AddMulOp -> OR .)
    IDENTIFIER      reduce using rule 141 (AddMulOp -> OR .)
    INTEGER         reduce using rule 141 (AddMulOp -> OR .)
    OCTAL           reduce using rule 141 (AddMulOp -> OR .)
    HEX             reduce using rule 141 (AddMulOp -> OR .)
    RUNE            reduce using rule 141 (AddMulOp -> OR .)
    FLOAT           reduce using rule 141 (AddMulOp -> OR .)
    IMAGINARY       reduce using rule 141 (AddMulOp -> OR .)
    STRING          reduce using rule 141 (AddMulOp -> OR .)


state 164

    (142) AddMulOp -> XOR .

    NOT             reduce using rule 142 (AddMulOp -> XOR .)
    ADD             reduce using rule 142 (AddMulOp -> XOR .)
    SUB             reduce using rule 142 (AddMulOp -> XOR .)
    MULT            reduce using rule 142 (AddMulOp -> XOR .)
    AND             reduce using rule 142 (AddMulOp -> XOR .)
    LEFT_PARANTHESIS reduce using rule 142 (AddMulOp -> XOR .)
    TYPECAST        reduce using rule 142 (AddMulOp -> XOR .)
    IDENTIFIER      reduce using rule 142 (AddMulOp -> XOR .)
    INTEGER         reduce using rule 142 (AddMulOp -> XOR .)
    OCTAL           reduce using rule 142 (AddMulOp -> XOR .)
    HEX             reduce using rule 142 (AddMulOp -> XOR .)
    RUNE            reduce using rule 142 (AddMulOp -> XOR .)
    FLOAT           reduce using rule 142 (AddMulOp -> XOR .)
    IMAGINARY       reduce using rule 142 (AddMulOp -> XOR .)
    STRING          reduce using rule 142 (AddMulOp -> XOR .)


state 165

    (143) AddMulOp -> DIV .

    NOT             reduce using rule 143 (AddMulOp -> DIV .)
    ADD             reduce using rule 143 (AddMulOp -> DIV .)
    SUB             reduce using rule 143 (AddMulOp -> DIV .)
    MULT            reduce using rule 143 (AddMulOp -> DIV .)
    AND             reduce using rule 143 (AddMulOp -> DIV .)
    LEFT_PARANTHESIS reduce using rule 143 (AddMulOp -> DIV .)
    TYPECAST        reduce using rule 143 (AddMulOp -> DIV .)
    IDENTIFIER      reduce using rule 143 (AddMulOp -> DIV .)
    INTEGER         reduce using rule 143 (AddMulOp -> DIV .)
    OCTAL           reduce using rule 143 (AddMulOp -> DIV .)
    HEX             reduce using rule 143 (AddMulOp -> DIV .)
    RUNE            reduce using rule 143 (AddMulOp -> DIV .)
    FLOAT           reduce using rule 143 (AddMulOp -> DIV .)
    IMAGINARY       reduce using rule 143 (AddMulOp -> DIV .)
    STRING          reduce using rule 143 (AddMulOp -> DIV .)


state 166

    (144) AddMulOp -> MOD .

    NOT             reduce using rule 144 (AddMulOp -> MOD .)
    ADD             reduce using rule 144 (AddMulOp -> MOD .)
    SUB             reduce using rule 144 (AddMulOp -> MOD .)
    MULT            reduce using rule 144 (AddMulOp -> MOD .)
    AND             reduce using rule 144 (AddMulOp -> MOD .)
    LEFT_PARANTHESIS reduce using rule 144 (AddMulOp -> MOD .)
    TYPECAST        reduce using rule 144 (AddMulOp -> MOD .)
    IDENTIFIER      reduce using rule 144 (AddMulOp -> MOD .)
    INTEGER         reduce using rule 144 (AddMulOp -> MOD .)
    OCTAL           reduce using rule 144 (AddMulOp -> MOD .)
    HEX             reduce using rule 144 (AddMulOp -> MOD .)
    RUNE            reduce using rule 144 (AddMulOp -> MOD .)
    FLOAT           reduce using rule 144 (AddMulOp -> MOD .)
    IMAGINARY       reduce using rule 144 (AddMulOp -> MOD .)
    STRING          reduce using rule 144 (AddMulOp -> MOD .)


state 167

    (145) AddMulOp -> LSHIFT .

    NOT             reduce using rule 145 (AddMulOp -> LSHIFT .)
    ADD             reduce using rule 145 (AddMulOp -> LSHIFT .)
    SUB             reduce using rule 145 (AddMulOp -> LSHIFT .)
    MULT            reduce using rule 145 (AddMulOp -> LSHIFT .)
    AND             reduce using rule 145 (AddMulOp -> LSHIFT .)
    LEFT_PARANTHESIS reduce using rule 145 (AddMulOp -> LSHIFT .)
    TYPECAST        reduce using rule 145 (AddMulOp -> LSHIFT .)
    IDENTIFIER      reduce using rule 145 (AddMulOp -> LSHIFT .)
    INTEGER         reduce using rule 145 (AddMulOp -> LSHIFT .)
    OCTAL           reduce using rule 145 (AddMulOp -> LSHIFT .)
    HEX             reduce using rule 145 (AddMulOp -> LSHIFT .)
    RUNE            reduce using rule 145 (AddMulOp -> LSHIFT .)
    FLOAT           reduce using rule 145 (AddMulOp -> LSHIFT .)
    IMAGINARY       reduce using rule 145 (AddMulOp -> LSHIFT .)
    STRING          reduce using rule 145 (AddMulOp -> LSHIFT .)


state 168

    (146) AddMulOp -> RSHIFT .

    NOT             reduce using rule 146 (AddMulOp -> RSHIFT .)
    ADD             reduce using rule 146 (AddMulOp -> RSHIFT .)
    SUB             reduce using rule 146 (AddMulOp -> RSHIFT .)
    MULT            reduce using rule 146 (AddMulOp -> RSHIFT .)
    AND             reduce using rule 146 (AddMulOp -> RSHIFT .)
    LEFT_PARANTHESIS reduce using rule 146 (AddMulOp -> RSHIFT .)
    TYPECAST        reduce using rule 146 (AddMulOp -> RSHIFT .)
    IDENTIFIER      reduce using rule 146 (AddMulOp -> RSHIFT .)
    INTEGER         reduce using rule 146 (AddMulOp -> RSHIFT .)
    OCTAL           reduce using rule 146 (AddMulOp -> RSHIFT .)
    HEX             reduce using rule 146 (AddMulOp -> RSHIFT .)
    RUNE            reduce using rule 146 (AddMulOp -> RSHIFT .)
    FLOAT           reduce using rule 146 (AddMulOp -> RSHIFT .)
    IMAGINARY       reduce using rule 146 (AddMulOp -> RSHIFT .)
    STRING          reduce using rule 146 (AddMulOp -> RSHIFT .)


state 169

    (110) PrimaryExpr -> PrimaryExpr Selector .

    LEFT_BRACKET    reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    LEFT_PARANTHESIS reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    DOT             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    LOG_OR          reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    LOG_AND         reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    EQ              reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    NEQ             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    LT              reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    GT              reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    LEQ             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    GEQ             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    OR              reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    XOR             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    DIV             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT          reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT          reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    ADD             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    SUB             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    MULT            reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    AND             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    RIGHT_BRACKET   reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    COMMA           reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    SEMICOLON       reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    RIGHT_PARANTHESIS reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    COLON           reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    INC             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    DEC             reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS_ASSIGN     reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS_ASSIGN    reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    MULT_ASSIGN     reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    DIV_ASSIGN      reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD_ASSIGN      reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    AND_ASSIGN      reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    OR_ASSIGN       reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    XOR_ASSIGN      reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT_ASSIGN   reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT_ASSIGN   reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    ASSIGN          reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)
    LEFT_BRACES     reduce using rule 110 (PrimaryExpr -> PrimaryExpr Selector .)


state 170

    (112) PrimaryExpr -> PrimaryExpr LEFT_BRACKET . Expression RIGHT_BRACKET
    (118) Slice -> LEFT_BRACKET . ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (119) Slice -> LEFT_BRACKET . ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (125) ExpressionOpt -> . Expression
    (126) ExpressionOpt -> . epsilon
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (252) epsilon -> .
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    COLON           reduce using rule 252 (epsilon -> .)
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    PrimaryExpr                    shift and go to state 97
    Expression                     shift and go to state 203
    ExpressionOpt                  shift and go to state 204
    UnaryExpr                      shift and go to state 96
    epsilon                        shift and go to state 205
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 171

    (113) PrimaryExpr -> PrimaryExpr Slice .

    LEFT_BRACKET    reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    LEFT_PARANTHESIS reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    DOT             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    LOG_OR          reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    LOG_AND         reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    EQ              reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    NEQ             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    LT              reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    GT              reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    LEQ             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    GEQ             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    OR              reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    XOR             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    DIV             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    MOD             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    LSHIFT          reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    RSHIFT          reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    ADD             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    SUB             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    MULT            reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    AND             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    RIGHT_BRACKET   reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    COMMA           reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    SEMICOLON       reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    RIGHT_PARANTHESIS reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    COLON           reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    INC             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    DEC             reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    PLUS_ASSIGN     reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    MINUS_ASSIGN    reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    MULT_ASSIGN     reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    DIV_ASSIGN      reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    MOD_ASSIGN      reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    AND_ASSIGN      reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    OR_ASSIGN       reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    XOR_ASSIGN      reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    LSHIFT_ASSIGN   reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    RSHIFT_ASSIGN   reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    ASSIGN          reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)
    LEFT_BRACES     reduce using rule 113 (PrimaryExpr -> PrimaryExpr Slice .)


state 172

    (114) PrimaryExpr -> PrimaryExpr TypeAssertion .

    LEFT_BRACKET    reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEFT_PARANTHESIS reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DOT             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LOG_OR          reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LOG_AND         reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    EQ              reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    NEQ             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LT              reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GT              reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEQ             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GEQ             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OR              reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    XOR             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DIV             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MOD             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LSHIFT          reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RSHIFT          reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    ADD             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    SUB             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MULT            reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AND             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RIGHT_BRACKET   reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    COMMA           reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    SEMICOLON       reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RIGHT_PARANTHESIS reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    COLON           reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    INC             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DEC             reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    PLUS_ASSIGN     reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MINUS_ASSIGN    reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MULT_ASSIGN     reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DIV_ASSIGN      reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MOD_ASSIGN      reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AND_ASSIGN      reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OR_ASSIGN       reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    XOR_ASSIGN      reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LSHIFT_ASSIGN   reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RSHIFT_ASSIGN   reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    ASSIGN          reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEFT_BRACES     reduce using rule 114 (PrimaryExpr -> PrimaryExpr TypeAssertion .)


state 173

    (115) PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS . ExpressionListTypeOpt RIGHT_PARANTHESIS
    (121) ExpressionListTypeOpt -> . ExpressionList
    (122) ExpressionListTypeOpt -> . epsilon
    (65) ExpressionList -> . Expression ExpressionRep
    (252) epsilon -> .
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    RIGHT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    PrimaryExpr                    shift and go to state 97
    ExpressionListTypeOpt          shift and go to state 206
    ExpressionList                 shift and go to state 207
    epsilon                        shift and go to state 208
    Expression                     shift and go to state 128
    UnaryExpr                      shift and go to state 96
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 174

    (116) Selector -> DOT . IDENTIFIER
    (120) TypeAssertion -> DOT . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    IDENTIFIER      shift and go to state 209
    LEFT_PARANTHESIS shift and go to state 210


state 175

    (128) UnaryExpr -> UnaryOp UnaryExpr .

    LOG_OR          reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    LOG_AND         reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    EQ              reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    NEQ             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    LT              reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    GT              reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    LEQ             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    GEQ             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR              reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    XOR             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIV             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    LSHIFT          reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSHIFT          reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    ADD             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    SUB             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    MULT            reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    AND             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    COMMA           reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    SEMICOLON       reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    COLON           reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    INC             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    DEC             reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    MULT_ASSIGN     reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIV_ASSIGN      reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD_ASSIGN      reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    AND_ASSIGN      reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR_ASSIGN       reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    XOR_ASSIGN      reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    ASSIGN          reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)
    LEFT_BRACES     reduce using rule 128 (UnaryExpr -> UnaryOp UnaryExpr .)


state 176

    (129) UnaryExpr -> NOT UnaryExpr .

    LOG_OR          reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    LOG_AND         reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    EQ              reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    NEQ             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    LT              reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    GT              reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    LEQ             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    GEQ             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    OR              reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    XOR             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    DIV             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    MOD             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    LSHIFT          reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    RSHIFT          reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    ADD             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    SUB             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    MULT            reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    AND             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    COMMA           reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    SEMICOLON       reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    COLON           reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    INC             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    DEC             reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    MULT_ASSIGN     reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    DIV_ASSIGN      reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    MOD_ASSIGN      reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    AND_ASSIGN      reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    OR_ASSIGN       reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    XOR_ASSIGN      reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    ASSIGN          reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)
    LEFT_BRACES     reduce using rule 129 (UnaryExpr -> NOT UnaryExpr .)


state 177

    (94) Operand -> LEFT_PARANTHESIS Expression . RIGHT_PARANTHESIS
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    RIGHT_PARANTHESIS shift and go to state 211
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 178

    (151) Conversion -> TYPECAST Type . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 212


state 179

    (96) BasicLit -> I INTEGER .

    LEFT_BRACKET    reduce using rule 96 (BasicLit -> I INTEGER .)
    LEFT_PARANTHESIS reduce using rule 96 (BasicLit -> I INTEGER .)
    DOT             reduce using rule 96 (BasicLit -> I INTEGER .)
    LOG_OR          reduce using rule 96 (BasicLit -> I INTEGER .)
    LOG_AND         reduce using rule 96 (BasicLit -> I INTEGER .)
    EQ              reduce using rule 96 (BasicLit -> I INTEGER .)
    NEQ             reduce using rule 96 (BasicLit -> I INTEGER .)
    LT              reduce using rule 96 (BasicLit -> I INTEGER .)
    GT              reduce using rule 96 (BasicLit -> I INTEGER .)
    LEQ             reduce using rule 96 (BasicLit -> I INTEGER .)
    GEQ             reduce using rule 96 (BasicLit -> I INTEGER .)
    OR              reduce using rule 96 (BasicLit -> I INTEGER .)
    XOR             reduce using rule 96 (BasicLit -> I INTEGER .)
    DIV             reduce using rule 96 (BasicLit -> I INTEGER .)
    MOD             reduce using rule 96 (BasicLit -> I INTEGER .)
    LSHIFT          reduce using rule 96 (BasicLit -> I INTEGER .)
    RSHIFT          reduce using rule 96 (BasicLit -> I INTEGER .)
    ADD             reduce using rule 96 (BasicLit -> I INTEGER .)
    SUB             reduce using rule 96 (BasicLit -> I INTEGER .)
    MULT            reduce using rule 96 (BasicLit -> I INTEGER .)
    AND             reduce using rule 96 (BasicLit -> I INTEGER .)
    RIGHT_BRACKET   reduce using rule 96 (BasicLit -> I INTEGER .)
    COMMA           reduce using rule 96 (BasicLit -> I INTEGER .)
    SEMICOLON       reduce using rule 96 (BasicLit -> I INTEGER .)
    RIGHT_PARANTHESIS reduce using rule 96 (BasicLit -> I INTEGER .)
    COLON           reduce using rule 96 (BasicLit -> I INTEGER .)
    INC             reduce using rule 96 (BasicLit -> I INTEGER .)
    DEC             reduce using rule 96 (BasicLit -> I INTEGER .)
    PLUS_ASSIGN     reduce using rule 96 (BasicLit -> I INTEGER .)
    MINUS_ASSIGN    reduce using rule 96 (BasicLit -> I INTEGER .)
    MULT_ASSIGN     reduce using rule 96 (BasicLit -> I INTEGER .)
    DIV_ASSIGN      reduce using rule 96 (BasicLit -> I INTEGER .)
    MOD_ASSIGN      reduce using rule 96 (BasicLit -> I INTEGER .)
    AND_ASSIGN      reduce using rule 96 (BasicLit -> I INTEGER .)
    OR_ASSIGN       reduce using rule 96 (BasicLit -> I INTEGER .)
    XOR_ASSIGN      reduce using rule 96 (BasicLit -> I INTEGER .)
    LSHIFT_ASSIGN   reduce using rule 96 (BasicLit -> I INTEGER .)
    RSHIFT_ASSIGN   reduce using rule 96 (BasicLit -> I INTEGER .)
    ASSIGN          reduce using rule 96 (BasicLit -> I INTEGER .)
    LEFT_BRACES     reduce using rule 96 (BasicLit -> I INTEGER .)


state 180

    (97) BasicLit -> I OCTAL .

    LEFT_BRACKET    reduce using rule 97 (BasicLit -> I OCTAL .)
    LEFT_PARANTHESIS reduce using rule 97 (BasicLit -> I OCTAL .)
    DOT             reduce using rule 97 (BasicLit -> I OCTAL .)
    LOG_OR          reduce using rule 97 (BasicLit -> I OCTAL .)
    LOG_AND         reduce using rule 97 (BasicLit -> I OCTAL .)
    EQ              reduce using rule 97 (BasicLit -> I OCTAL .)
    NEQ             reduce using rule 97 (BasicLit -> I OCTAL .)
    LT              reduce using rule 97 (BasicLit -> I OCTAL .)
    GT              reduce using rule 97 (BasicLit -> I OCTAL .)
    LEQ             reduce using rule 97 (BasicLit -> I OCTAL .)
    GEQ             reduce using rule 97 (BasicLit -> I OCTAL .)
    OR              reduce using rule 97 (BasicLit -> I OCTAL .)
    XOR             reduce using rule 97 (BasicLit -> I OCTAL .)
    DIV             reduce using rule 97 (BasicLit -> I OCTAL .)
    MOD             reduce using rule 97 (BasicLit -> I OCTAL .)
    LSHIFT          reduce using rule 97 (BasicLit -> I OCTAL .)
    RSHIFT          reduce using rule 97 (BasicLit -> I OCTAL .)
    ADD             reduce using rule 97 (BasicLit -> I OCTAL .)
    SUB             reduce using rule 97 (BasicLit -> I OCTAL .)
    MULT            reduce using rule 97 (BasicLit -> I OCTAL .)
    AND             reduce using rule 97 (BasicLit -> I OCTAL .)
    RIGHT_BRACKET   reduce using rule 97 (BasicLit -> I OCTAL .)
    COMMA           reduce using rule 97 (BasicLit -> I OCTAL .)
    SEMICOLON       reduce using rule 97 (BasicLit -> I OCTAL .)
    RIGHT_PARANTHESIS reduce using rule 97 (BasicLit -> I OCTAL .)
    COLON           reduce using rule 97 (BasicLit -> I OCTAL .)
    INC             reduce using rule 97 (BasicLit -> I OCTAL .)
    DEC             reduce using rule 97 (BasicLit -> I OCTAL .)
    PLUS_ASSIGN     reduce using rule 97 (BasicLit -> I OCTAL .)
    MINUS_ASSIGN    reduce using rule 97 (BasicLit -> I OCTAL .)
    MULT_ASSIGN     reduce using rule 97 (BasicLit -> I OCTAL .)
    DIV_ASSIGN      reduce using rule 97 (BasicLit -> I OCTAL .)
    MOD_ASSIGN      reduce using rule 97 (BasicLit -> I OCTAL .)
    AND_ASSIGN      reduce using rule 97 (BasicLit -> I OCTAL .)
    OR_ASSIGN       reduce using rule 97 (BasicLit -> I OCTAL .)
    XOR_ASSIGN      reduce using rule 97 (BasicLit -> I OCTAL .)
    LSHIFT_ASSIGN   reduce using rule 97 (BasicLit -> I OCTAL .)
    RSHIFT_ASSIGN   reduce using rule 97 (BasicLit -> I OCTAL .)
    ASSIGN          reduce using rule 97 (BasicLit -> I OCTAL .)
    LEFT_BRACES     reduce using rule 97 (BasicLit -> I OCTAL .)


state 181

    (98) BasicLit -> I HEX .

    LEFT_BRACKET    reduce using rule 98 (BasicLit -> I HEX .)
    LEFT_PARANTHESIS reduce using rule 98 (BasicLit -> I HEX .)
    DOT             reduce using rule 98 (BasicLit -> I HEX .)
    LOG_OR          reduce using rule 98 (BasicLit -> I HEX .)
    LOG_AND         reduce using rule 98 (BasicLit -> I HEX .)
    EQ              reduce using rule 98 (BasicLit -> I HEX .)
    NEQ             reduce using rule 98 (BasicLit -> I HEX .)
    LT              reduce using rule 98 (BasicLit -> I HEX .)
    GT              reduce using rule 98 (BasicLit -> I HEX .)
    LEQ             reduce using rule 98 (BasicLit -> I HEX .)
    GEQ             reduce using rule 98 (BasicLit -> I HEX .)
    OR              reduce using rule 98 (BasicLit -> I HEX .)
    XOR             reduce using rule 98 (BasicLit -> I HEX .)
    DIV             reduce using rule 98 (BasicLit -> I HEX .)
    MOD             reduce using rule 98 (BasicLit -> I HEX .)
    LSHIFT          reduce using rule 98 (BasicLit -> I HEX .)
    RSHIFT          reduce using rule 98 (BasicLit -> I HEX .)
    ADD             reduce using rule 98 (BasicLit -> I HEX .)
    SUB             reduce using rule 98 (BasicLit -> I HEX .)
    MULT            reduce using rule 98 (BasicLit -> I HEX .)
    AND             reduce using rule 98 (BasicLit -> I HEX .)
    RIGHT_BRACKET   reduce using rule 98 (BasicLit -> I HEX .)
    COMMA           reduce using rule 98 (BasicLit -> I HEX .)
    SEMICOLON       reduce using rule 98 (BasicLit -> I HEX .)
    RIGHT_PARANTHESIS reduce using rule 98 (BasicLit -> I HEX .)
    COLON           reduce using rule 98 (BasicLit -> I HEX .)
    INC             reduce using rule 98 (BasicLit -> I HEX .)
    DEC             reduce using rule 98 (BasicLit -> I HEX .)
    PLUS_ASSIGN     reduce using rule 98 (BasicLit -> I HEX .)
    MINUS_ASSIGN    reduce using rule 98 (BasicLit -> I HEX .)
    MULT_ASSIGN     reduce using rule 98 (BasicLit -> I HEX .)
    DIV_ASSIGN      reduce using rule 98 (BasicLit -> I HEX .)
    MOD_ASSIGN      reduce using rule 98 (BasicLit -> I HEX .)
    AND_ASSIGN      reduce using rule 98 (BasicLit -> I HEX .)
    OR_ASSIGN       reduce using rule 98 (BasicLit -> I HEX .)
    XOR_ASSIGN      reduce using rule 98 (BasicLit -> I HEX .)
    LSHIFT_ASSIGN   reduce using rule 98 (BasicLit -> I HEX .)
    RSHIFT_ASSIGN   reduce using rule 98 (BasicLit -> I HEX .)
    ASSIGN          reduce using rule 98 (BasicLit -> I HEX .)
    LEFT_BRACES     reduce using rule 98 (BasicLit -> I HEX .)


state 182

    (101) BasicLit -> I RUNE .

    LEFT_BRACKET    reduce using rule 101 (BasicLit -> I RUNE .)
    LEFT_PARANTHESIS reduce using rule 101 (BasicLit -> I RUNE .)
    DOT             reduce using rule 101 (BasicLit -> I RUNE .)
    LOG_OR          reduce using rule 101 (BasicLit -> I RUNE .)
    LOG_AND         reduce using rule 101 (BasicLit -> I RUNE .)
    EQ              reduce using rule 101 (BasicLit -> I RUNE .)
    NEQ             reduce using rule 101 (BasicLit -> I RUNE .)
    LT              reduce using rule 101 (BasicLit -> I RUNE .)
    GT              reduce using rule 101 (BasicLit -> I RUNE .)
    LEQ             reduce using rule 101 (BasicLit -> I RUNE .)
    GEQ             reduce using rule 101 (BasicLit -> I RUNE .)
    OR              reduce using rule 101 (BasicLit -> I RUNE .)
    XOR             reduce using rule 101 (BasicLit -> I RUNE .)
    DIV             reduce using rule 101 (BasicLit -> I RUNE .)
    MOD             reduce using rule 101 (BasicLit -> I RUNE .)
    LSHIFT          reduce using rule 101 (BasicLit -> I RUNE .)
    RSHIFT          reduce using rule 101 (BasicLit -> I RUNE .)
    ADD             reduce using rule 101 (BasicLit -> I RUNE .)
    SUB             reduce using rule 101 (BasicLit -> I RUNE .)
    MULT            reduce using rule 101 (BasicLit -> I RUNE .)
    AND             reduce using rule 101 (BasicLit -> I RUNE .)
    RIGHT_BRACKET   reduce using rule 101 (BasicLit -> I RUNE .)
    COMMA           reduce using rule 101 (BasicLit -> I RUNE .)
    SEMICOLON       reduce using rule 101 (BasicLit -> I RUNE .)
    RIGHT_PARANTHESIS reduce using rule 101 (BasicLit -> I RUNE .)
    COLON           reduce using rule 101 (BasicLit -> I RUNE .)
    INC             reduce using rule 101 (BasicLit -> I RUNE .)
    DEC             reduce using rule 101 (BasicLit -> I RUNE .)
    PLUS_ASSIGN     reduce using rule 101 (BasicLit -> I RUNE .)
    MINUS_ASSIGN    reduce using rule 101 (BasicLit -> I RUNE .)
    MULT_ASSIGN     reduce using rule 101 (BasicLit -> I RUNE .)
    DIV_ASSIGN      reduce using rule 101 (BasicLit -> I RUNE .)
    MOD_ASSIGN      reduce using rule 101 (BasicLit -> I RUNE .)
    AND_ASSIGN      reduce using rule 101 (BasicLit -> I RUNE .)
    OR_ASSIGN       reduce using rule 101 (BasicLit -> I RUNE .)
    XOR_ASSIGN      reduce using rule 101 (BasicLit -> I RUNE .)
    LSHIFT_ASSIGN   reduce using rule 101 (BasicLit -> I RUNE .)
    RSHIFT_ASSIGN   reduce using rule 101 (BasicLit -> I RUNE .)
    ASSIGN          reduce using rule 101 (BasicLit -> I RUNE .)
    LEFT_BRACES     reduce using rule 101 (BasicLit -> I RUNE .)


state 183

    (99) BasicLit -> F FLOAT .

    LEFT_BRACKET    reduce using rule 99 (BasicLit -> F FLOAT .)
    LEFT_PARANTHESIS reduce using rule 99 (BasicLit -> F FLOAT .)
    DOT             reduce using rule 99 (BasicLit -> F FLOAT .)
    LOG_OR          reduce using rule 99 (BasicLit -> F FLOAT .)
    LOG_AND         reduce using rule 99 (BasicLit -> F FLOAT .)
    EQ              reduce using rule 99 (BasicLit -> F FLOAT .)
    NEQ             reduce using rule 99 (BasicLit -> F FLOAT .)
    LT              reduce using rule 99 (BasicLit -> F FLOAT .)
    GT              reduce using rule 99 (BasicLit -> F FLOAT .)
    LEQ             reduce using rule 99 (BasicLit -> F FLOAT .)
    GEQ             reduce using rule 99 (BasicLit -> F FLOAT .)
    OR              reduce using rule 99 (BasicLit -> F FLOAT .)
    XOR             reduce using rule 99 (BasicLit -> F FLOAT .)
    DIV             reduce using rule 99 (BasicLit -> F FLOAT .)
    MOD             reduce using rule 99 (BasicLit -> F FLOAT .)
    LSHIFT          reduce using rule 99 (BasicLit -> F FLOAT .)
    RSHIFT          reduce using rule 99 (BasicLit -> F FLOAT .)
    ADD             reduce using rule 99 (BasicLit -> F FLOAT .)
    SUB             reduce using rule 99 (BasicLit -> F FLOAT .)
    MULT            reduce using rule 99 (BasicLit -> F FLOAT .)
    AND             reduce using rule 99 (BasicLit -> F FLOAT .)
    RIGHT_BRACKET   reduce using rule 99 (BasicLit -> F FLOAT .)
    COMMA           reduce using rule 99 (BasicLit -> F FLOAT .)
    SEMICOLON       reduce using rule 99 (BasicLit -> F FLOAT .)
    RIGHT_PARANTHESIS reduce using rule 99 (BasicLit -> F FLOAT .)
    COLON           reduce using rule 99 (BasicLit -> F FLOAT .)
    INC             reduce using rule 99 (BasicLit -> F FLOAT .)
    DEC             reduce using rule 99 (BasicLit -> F FLOAT .)
    PLUS_ASSIGN     reduce using rule 99 (BasicLit -> F FLOAT .)
    MINUS_ASSIGN    reduce using rule 99 (BasicLit -> F FLOAT .)
    MULT_ASSIGN     reduce using rule 99 (BasicLit -> F FLOAT .)
    DIV_ASSIGN      reduce using rule 99 (BasicLit -> F FLOAT .)
    MOD_ASSIGN      reduce using rule 99 (BasicLit -> F FLOAT .)
    AND_ASSIGN      reduce using rule 99 (BasicLit -> F FLOAT .)
    OR_ASSIGN       reduce using rule 99 (BasicLit -> F FLOAT .)
    XOR_ASSIGN      reduce using rule 99 (BasicLit -> F FLOAT .)
    LSHIFT_ASSIGN   reduce using rule 99 (BasicLit -> F FLOAT .)
    RSHIFT_ASSIGN   reduce using rule 99 (BasicLit -> F FLOAT .)
    ASSIGN          reduce using rule 99 (BasicLit -> F FLOAT .)
    LEFT_BRACES     reduce using rule 99 (BasicLit -> F FLOAT .)


state 184

    (100) BasicLit -> C IMAGINARY .

    LEFT_BRACKET    reduce using rule 100 (BasicLit -> C IMAGINARY .)
    LEFT_PARANTHESIS reduce using rule 100 (BasicLit -> C IMAGINARY .)
    DOT             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    LOG_OR          reduce using rule 100 (BasicLit -> C IMAGINARY .)
    LOG_AND         reduce using rule 100 (BasicLit -> C IMAGINARY .)
    EQ              reduce using rule 100 (BasicLit -> C IMAGINARY .)
    NEQ             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    LT              reduce using rule 100 (BasicLit -> C IMAGINARY .)
    GT              reduce using rule 100 (BasicLit -> C IMAGINARY .)
    LEQ             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    GEQ             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    OR              reduce using rule 100 (BasicLit -> C IMAGINARY .)
    XOR             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    DIV             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    MOD             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    LSHIFT          reduce using rule 100 (BasicLit -> C IMAGINARY .)
    RSHIFT          reduce using rule 100 (BasicLit -> C IMAGINARY .)
    ADD             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    SUB             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    MULT            reduce using rule 100 (BasicLit -> C IMAGINARY .)
    AND             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    RIGHT_BRACKET   reduce using rule 100 (BasicLit -> C IMAGINARY .)
    COMMA           reduce using rule 100 (BasicLit -> C IMAGINARY .)
    SEMICOLON       reduce using rule 100 (BasicLit -> C IMAGINARY .)
    RIGHT_PARANTHESIS reduce using rule 100 (BasicLit -> C IMAGINARY .)
    COLON           reduce using rule 100 (BasicLit -> C IMAGINARY .)
    INC             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    DEC             reduce using rule 100 (BasicLit -> C IMAGINARY .)
    PLUS_ASSIGN     reduce using rule 100 (BasicLit -> C IMAGINARY .)
    MINUS_ASSIGN    reduce using rule 100 (BasicLit -> C IMAGINARY .)
    MULT_ASSIGN     reduce using rule 100 (BasicLit -> C IMAGINARY .)
    DIV_ASSIGN      reduce using rule 100 (BasicLit -> C IMAGINARY .)
    MOD_ASSIGN      reduce using rule 100 (BasicLit -> C IMAGINARY .)
    AND_ASSIGN      reduce using rule 100 (BasicLit -> C IMAGINARY .)
    OR_ASSIGN       reduce using rule 100 (BasicLit -> C IMAGINARY .)
    XOR_ASSIGN      reduce using rule 100 (BasicLit -> C IMAGINARY .)
    LSHIFT_ASSIGN   reduce using rule 100 (BasicLit -> C IMAGINARY .)
    RSHIFT_ASSIGN   reduce using rule 100 (BasicLit -> C IMAGINARY .)
    ASSIGN          reduce using rule 100 (BasicLit -> C IMAGINARY .)
    LEFT_BRACES     reduce using rule 100 (BasicLit -> C IMAGINARY .)


state 185

    (102) BasicLit -> S STRING .

    LEFT_BRACKET    reduce using rule 102 (BasicLit -> S STRING .)
    LEFT_PARANTHESIS reduce using rule 102 (BasicLit -> S STRING .)
    DOT             reduce using rule 102 (BasicLit -> S STRING .)
    LOG_OR          reduce using rule 102 (BasicLit -> S STRING .)
    LOG_AND         reduce using rule 102 (BasicLit -> S STRING .)
    EQ              reduce using rule 102 (BasicLit -> S STRING .)
    NEQ             reduce using rule 102 (BasicLit -> S STRING .)
    LT              reduce using rule 102 (BasicLit -> S STRING .)
    GT              reduce using rule 102 (BasicLit -> S STRING .)
    LEQ             reduce using rule 102 (BasicLit -> S STRING .)
    GEQ             reduce using rule 102 (BasicLit -> S STRING .)
    OR              reduce using rule 102 (BasicLit -> S STRING .)
    XOR             reduce using rule 102 (BasicLit -> S STRING .)
    DIV             reduce using rule 102 (BasicLit -> S STRING .)
    MOD             reduce using rule 102 (BasicLit -> S STRING .)
    LSHIFT          reduce using rule 102 (BasicLit -> S STRING .)
    RSHIFT          reduce using rule 102 (BasicLit -> S STRING .)
    ADD             reduce using rule 102 (BasicLit -> S STRING .)
    SUB             reduce using rule 102 (BasicLit -> S STRING .)
    MULT            reduce using rule 102 (BasicLit -> S STRING .)
    AND             reduce using rule 102 (BasicLit -> S STRING .)
    RIGHT_BRACKET   reduce using rule 102 (BasicLit -> S STRING .)
    COMMA           reduce using rule 102 (BasicLit -> S STRING .)
    SEMICOLON       reduce using rule 102 (BasicLit -> S STRING .)
    RIGHT_PARANTHESIS reduce using rule 102 (BasicLit -> S STRING .)
    COLON           reduce using rule 102 (BasicLit -> S STRING .)
    INC             reduce using rule 102 (BasicLit -> S STRING .)
    DEC             reduce using rule 102 (BasicLit -> S STRING .)
    PLUS_ASSIGN     reduce using rule 102 (BasicLit -> S STRING .)
    MINUS_ASSIGN    reduce using rule 102 (BasicLit -> S STRING .)
    MULT_ASSIGN     reduce using rule 102 (BasicLit -> S STRING .)
    DIV_ASSIGN      reduce using rule 102 (BasicLit -> S STRING .)
    MOD_ASSIGN      reduce using rule 102 (BasicLit -> S STRING .)
    AND_ASSIGN      reduce using rule 102 (BasicLit -> S STRING .)
    OR_ASSIGN       reduce using rule 102 (BasicLit -> S STRING .)
    XOR_ASSIGN      reduce using rule 102 (BasicLit -> S STRING .)
    LSHIFT_ASSIGN   reduce using rule 102 (BasicLit -> S STRING .)
    RSHIFT_ASSIGN   reduce using rule 102 (BasicLit -> S STRING .)
    ASSIGN          reduce using rule 102 (BasicLit -> S STRING .)
    LEFT_BRACES     reduce using rule 102 (BasicLit -> S STRING .)


state 186

    (23) StructType -> CreateFuncScope STRUCT LEFT_BRACES . FieldDeclRep RIGHT_BRACES EndScope
    (24) FieldDeclRep -> . FieldDeclRep FieldDecl SEMICOLON
    (25) FieldDeclRep -> . epsilon
    (252) epsilon -> .

    RIGHT_BRACES    reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)

    FieldDeclRep                   shift and go to state 213
    epsilon                        shift and go to state 214

state 187

    (63) IdentifierRep -> IdentifierRep COMMA IDENTIFIER .

    COMMA           reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    INT_T           reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    FLOAT_T         reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    UINT_T          reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    COMPLEX_T       reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    RUNE_T          reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    BOOL_T          reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    STRING_T        reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    TYPE            reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    MULT            reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    STRUCT          reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    ASSIGN          reduce using rule 63 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)


state 188

    (70) TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 70 (TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 70 (TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .)


state 189

    (77) VarSpecRep -> VarSpecRep VarSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 77 (VarSpecRep -> VarSpecRep VarSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 77 (VarSpecRep -> VarSpecRep VarSpec SEMICOLON .)


state 190

    (81) ExpressionListOpt -> ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 81 (ExpressionListOpt -> ASSIGN ExpressionList .)


state 191

    (65) ExpressionList -> Expression ExpressionRep .
    (66) ExpressionRep -> ExpressionRep . COMMA Expression

    SEMICOLON       reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    RIGHT_PARANTHESIS reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    PLUS_ASSIGN     reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    MINUS_ASSIGN    reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    MULT_ASSIGN     reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    DIV_ASSIGN      reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    MOD_ASSIGN      reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    AND_ASSIGN      reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    OR_ASSIGN       reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    XOR_ASSIGN      reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    LSHIFT_ASSIGN   reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    RSHIFT_ASSIGN   reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    ASSIGN          reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    LEFT_BRACES     reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    COLON           reduce using rule 65 (ExpressionList -> Expression ExpressionRep .)
    COMMA           shift and go to state 215


state 192

    (67) ExpressionRep -> epsilon .

    COMMA           reduce using rule 67 (ExpressionRep -> epsilon .)
    SEMICOLON       reduce using rule 67 (ExpressionRep -> epsilon .)
    RIGHT_PARANTHESIS reduce using rule 67 (ExpressionRep -> epsilon .)
    LEFT_BRACES     reduce using rule 67 (ExpressionRep -> epsilon .)
    COLON           reduce using rule 67 (ExpressionRep -> epsilon .)
    PLUS_ASSIGN     reduce using rule 67 (ExpressionRep -> epsilon .)
    MINUS_ASSIGN    reduce using rule 67 (ExpressionRep -> epsilon .)
    MULT_ASSIGN     reduce using rule 67 (ExpressionRep -> epsilon .)
    DIV_ASSIGN      reduce using rule 67 (ExpressionRep -> epsilon .)
    MOD_ASSIGN      reduce using rule 67 (ExpressionRep -> epsilon .)
    AND_ASSIGN      reduce using rule 67 (ExpressionRep -> epsilon .)
    OR_ASSIGN       reduce using rule 67 (ExpressionRep -> epsilon .)
    XOR_ASSIGN      reduce using rule 67 (ExpressionRep -> epsilon .)
    LSHIFT_ASSIGN   reduce using rule 67 (ExpressionRep -> epsilon .)
    RSHIFT_ASSIGN   reduce using rule 67 (ExpressionRep -> epsilon .)
    ASSIGN          reduce using rule 67 (ExpressionRep -> epsilon .)


state 193

    (46) Block -> LEFT_BRACES StatementList . RIGHT_BRACES

    RIGHT_BRACES    shift and go to state 216


state 194

    (47) StatementList -> StatementRep .
    (48) StatementRep -> StatementRep . Statement SEMICOLON
    (152) Statement -> . Declaration
    (153) Statement -> . LabeledStmt
    (154) Statement -> . SimpleStmt
    (155) Statement -> . ReturnStmt
    (156) Statement -> . CreateScope Block EndScope
    (157) Statement -> . ScanStmt
    (158) Statement -> . BreakStmt
    (159) Statement -> . ContinueStmt
    (160) Statement -> . GotoStmt
    (161) Statement -> . PrintStmt
    (162) Statement -> . IfStmt
    (163) Statement -> . SwitchStmt
    (164) Statement -> . ForStmt
    (50) Declaration -> . ConstDecl
    (51) Declaration -> . TypeDecl
    (52) Declaration -> . VarDecl
    (172) LabeledStmt -> . Label COLON Statement
    (167) SimpleStmt -> . epsilon
    (168) SimpleStmt -> . ExpressionStmt
    (169) SimpleStmt -> . IncDecStmt
    (170) SimpleStmt -> . Assignment
    (171) SimpleStmt -> . ShortVarDecl
    (228) ReturnStmt -> . RETURN ExpressionListPureOpt
    (87) CreateScope -> .
    (166) ScanStmt -> . SCAN Expression
    (231) BreakStmt -> . BREAK LabelOpt
    (232) ContinueStmt -> . CONTINUE LabelOpt
    (235) GotoStmt -> . GOTO Label
    (165) PrintStmt -> . PRINT Expression
    (190) IfStmt -> . IF Expression CreateScope Block EndScope ElseOpt
    (196) SwitchStmt -> . ExprSwitchStmt
    (197) SwitchStmt -> . TypeSwitchStmt
    (217) ForStmt -> . FOR CreateScope ConditionBlockOpt Block EndScope
    (55) ConstDecl -> . CONST ConstSpec
    (56) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (68) TypeDecl -> . TYPE TypeSpec
    (69) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (75) VarDecl -> . VAR VarSpec
    (76) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (173) Label -> . IDENTIFIER
    (252) epsilon -> .
    (174) ExpressionStmt -> . Expression
    (175) IncDecStmt -> . Expression INC
    (176) IncDecStmt -> . Expression DEC
    (177) Assignment -> . ExpressionList assign_op ExpressionList
    (83) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (198) ExprSwitchStmt -> . SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (205) TypeSwitchStmt -> . SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (65) ExpressionList -> . Expression ExpressionRep
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    RIGHT_BRACES    reduce using rule 47 (StatementList -> StatementRep .)
    CASE            reduce using rule 47 (StatementList -> StatementRep .)
    DEFAULT         reduce using rule 47 (StatementList -> StatementRep .)
    RETURN          shift and go to state 237
    LEFT_BRACES     reduce using rule 87 (CreateScope -> .)
    SCAN            shift and go to state 238
    BREAK           shift and go to state 240
    CONTINUE        shift and go to state 241
    GOTO            shift and go to state 242
    PRINT           shift and go to state 243
    IF              shift and go to state 244
    FOR             shift and go to state 247
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23
    IDENTIFIER      shift and go to state 248
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    SWITCH          shift and go to state 250
    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Statement                      shift and go to state 217
    Declaration                    shift and go to state 218
    LabeledStmt                    shift and go to state 219
    SimpleStmt                     shift and go to state 220
    ReturnStmt                     shift and go to state 221
    CreateScope                    shift and go to state 222
    ScanStmt                       shift and go to state 223
    BreakStmt                      shift and go to state 224
    ContinueStmt                   shift and go to state 225
    GotoStmt                       shift and go to state 226
    PrintStmt                      shift and go to state 227
    IfStmt                         shift and go to state 228
    SwitchStmt                     shift and go to state 229
    ForStmt                        shift and go to state 230
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19
    Label                          shift and go to state 231
    epsilon                        shift and go to state 232
    ExpressionStmt                 shift and go to state 233
    IncDecStmt                     shift and go to state 234
    Assignment                     shift and go to state 235
    ShortVarDecl                   shift and go to state 236
    Expression                     shift and go to state 239
    ExprSwitchStmt                 shift and go to state 245
    TypeSwitchStmt                 shift and go to state 246
    ExpressionList                 shift and go to state 249
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 195

    (49) StatementRep -> epsilon .

    RETURN          reduce using rule 49 (StatementRep -> epsilon .)
    SCAN            reduce using rule 49 (StatementRep -> epsilon .)
    BREAK           reduce using rule 49 (StatementRep -> epsilon .)
    CONTINUE        reduce using rule 49 (StatementRep -> epsilon .)
    GOTO            reduce using rule 49 (StatementRep -> epsilon .)
    PRINT           reduce using rule 49 (StatementRep -> epsilon .)
    IF              reduce using rule 49 (StatementRep -> epsilon .)
    FOR             reduce using rule 49 (StatementRep -> epsilon .)
    CONST           reduce using rule 49 (StatementRep -> epsilon .)
    TYPE            reduce using rule 49 (StatementRep -> epsilon .)
    VAR             reduce using rule 49 (StatementRep -> epsilon .)
    IDENTIFIER      reduce using rule 49 (StatementRep -> epsilon .)
    SWITCH          reduce using rule 49 (StatementRep -> epsilon .)
    NOT             reduce using rule 49 (StatementRep -> epsilon .)
    ADD             reduce using rule 49 (StatementRep -> epsilon .)
    SUB             reduce using rule 49 (StatementRep -> epsilon .)
    MULT            reduce using rule 49 (StatementRep -> epsilon .)
    AND             reduce using rule 49 (StatementRep -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 49 (StatementRep -> epsilon .)
    TYPECAST        reduce using rule 49 (StatementRep -> epsilon .)
    SEMICOLON       reduce using rule 49 (StatementRep -> epsilon .)
    LEFT_BRACES     reduce using rule 49 (StatementRep -> epsilon .)
    INTEGER         reduce using rule 49 (StatementRep -> epsilon .)
    OCTAL           reduce using rule 49 (StatementRep -> epsilon .)
    HEX             reduce using rule 49 (StatementRep -> epsilon .)
    RUNE            reduce using rule 49 (StatementRep -> epsilon .)
    FLOAT           reduce using rule 49 (StatementRep -> epsilon .)
    IMAGINARY       reduce using rule 49 (StatementRep -> epsilon .)
    STRING          reduce using rule 49 (StatementRep -> epsilon .)
    RIGHT_BRACES    reduce using rule 49 (StatementRep -> epsilon .)
    CASE            reduce using rule 49 (StatementRep -> epsilon .)
    DEFAULT         reduce using rule 49 (StatementRep -> epsilon .)


state 196

    (37) Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .

    LEFT_PARANTHESIS reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    INT_T           reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    FLOAT_T         reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    UINT_T          reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    COMPLEX_T       reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    RUNE_T          reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    BOOL_T          reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    STRING_T        reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    TYPE            reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    IDENTIFIER      reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    LEFT_BRACKET    reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    MULT            reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    STRUCT          reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)


state 197

    (43) ParameterDeclCommaRep -> ParameterDecl COMMA . ParameterDecl
    (44) ParameterDecl -> . IdentifierList Type
    (45) ParameterDecl -> . Type
    (62) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    IDENTIFIER      shift and go to state 145
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    ParameterDecl                  shift and go to state 251
    IdentifierList                 shift and go to state 143
    Type                           shift and go to state 144
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 198

    (42) ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA . ParameterDecl
    (44) ParameterDecl -> . IdentifierList Type
    (45) ParameterDecl -> . Type
    (62) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    IDENTIFIER      shift and go to state 145
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    ParameterDecl                  shift and go to state 252
    IdentifierList                 shift and go to state 143
    Type                           shift and go to state 144
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 199

    (44) ParameterDecl -> IdentifierList Type .

    COMMA           reduce using rule 44 (ParameterDecl -> IdentifierList Type .)
    RIGHT_PARANTHESIS reduce using rule 44 (ParameterDecl -> IdentifierList Type .)


state 200

    (20) ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .

    ASSIGN          reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    SEMICOLON       reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    RIGHT_PARANTHESIS reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    LEFT_BRACES     reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    COMMA           reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    LEFT_PARANTHESIS reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    COLON           reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)


state 201

    (22) ElementType -> Type .

    ASSIGN          reduce using rule 22 (ElementType -> Type .)
    SEMICOLON       reduce using rule 22 (ElementType -> Type .)
    RIGHT_PARANTHESIS reduce using rule 22 (ElementType -> Type .)
    LEFT_BRACES     reduce using rule 22 (ElementType -> Type .)
    COMMA           reduce using rule 22 (ElementType -> Type .)
    LEFT_PARANTHESIS reduce using rule 22 (ElementType -> Type .)
    COLON           reduce using rule 22 (ElementType -> Type .)


state 202

    (124) Expression -> Expression BinaryOp Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

  ! shift/reduce conflict for LOG_OR resolved as shift
  ! shift/reduce conflict for LOG_AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    RIGHT_BRACKET   reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    COMMA           reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    SEMICOLON       reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    RIGHT_PARANTHESIS reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    COLON           reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    INC             reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    DEC             reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    PLUS_ASSIGN     reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    MINUS_ASSIGN    reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    MULT_ASSIGN     reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    DIV_ASSIGN      reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    MOD_ASSIGN      reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    AND_ASSIGN      reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    OR_ASSIGN       reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    XOR_ASSIGN      reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    LSHIFT_ASSIGN   reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    RSHIFT_ASSIGN   reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    ASSIGN          reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    LEFT_BRACES     reduce using rule 124 (Expression -> Expression BinaryOp Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

  ! LOG_OR          [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! LOG_AND         [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! EQ              [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! NEQ             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! LT              [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! GT              [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! LEQ             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! GEQ             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! OR              [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! XOR             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! DIV             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! MOD             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! LSHIFT          [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! RSHIFT          [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! ADD             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! SUB             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! MULT            [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]
  ! AND             [ reduce using rule 124 (Expression -> Expression BinaryOp Expression .) ]

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 203

    (112) PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression . RIGHT_BRACKET
    (124) Expression -> Expression . BinaryOp Expression
    (125) ExpressionOpt -> Expression .
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    RIGHT_BRACKET   shift and go to state 253
    COLON           reduce using rule 125 (ExpressionOpt -> Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 204

    (118) Slice -> LEFT_BRACKET ExpressionOpt . COLON ExpressionOpt RIGHT_BRACKET
    (119) Slice -> LEFT_BRACKET ExpressionOpt . COLON Expression COLON Expression RIGHT_BRACKET

    COLON           shift and go to state 254


state 205

    (126) ExpressionOpt -> epsilon .

    COLON           reduce using rule 126 (ExpressionOpt -> epsilon .)
    RIGHT_BRACKET   reduce using rule 126 (ExpressionOpt -> epsilon .)


state 206

    (115) PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 255


state 207

    (121) ExpressionListTypeOpt -> ExpressionList .

    RIGHT_PARANTHESIS reduce using rule 121 (ExpressionListTypeOpt -> ExpressionList .)


state 208

    (122) ExpressionListTypeOpt -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 122 (ExpressionListTypeOpt -> epsilon .)


state 209

    (116) Selector -> DOT IDENTIFIER .

    LEFT_BRACKET    reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    DOT             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    LOG_OR          reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    LOG_AND         reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    EQ              reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    NEQ             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    LT              reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    GT              reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    LEQ             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    GEQ             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    OR              reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    XOR             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    DIV             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    MOD             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    LSHIFT          reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    RSHIFT          reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    ADD             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    SUB             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    MULT            reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    AND             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    COMMA           reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    COLON           reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    INC             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    DEC             reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    ASSIGN          reduce using rule 116 (Selector -> DOT IDENTIFIER .)
    LEFT_BRACES     reduce using rule 116 (Selector -> DOT IDENTIFIER .)


state 210

    (120) TypeAssertion -> DOT LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 256
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 211

    (94) Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .

    LEFT_BRACKET    reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DOT             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    EQ              reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LT              reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GT              reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR              reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ADD             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SUB             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT            reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COLON           reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    INC             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DEC             reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 94 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)


state 212

    (151) Conversion -> TYPECAST Type LEFT_PARANTHESIS . Expression RIGHT_PARANTHESIS
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 257
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 213

    (23) StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep . RIGHT_BRACES EndScope
    (24) FieldDeclRep -> FieldDeclRep . FieldDecl SEMICOLON
    (26) FieldDecl -> . IdentifierList Type
    (62) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_BRACES    shift and go to state 258
    IDENTIFIER      shift and go to state 37

    FieldDecl                      shift and go to state 259
    IdentifierList                 shift and go to state 260

state 214

    (25) FieldDeclRep -> epsilon .

    RIGHT_BRACES    reduce using rule 25 (FieldDeclRep -> epsilon .)
    IDENTIFIER      reduce using rule 25 (FieldDeclRep -> epsilon .)


state 215

    (66) ExpressionRep -> ExpressionRep COMMA . Expression
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 261
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 216

    (46) Block -> LEFT_BRACES StatementList RIGHT_BRACES .

    SEMICOLON       reduce using rule 46 (Block -> LEFT_BRACES StatementList RIGHT_BRACES .)
    ELSE            reduce using rule 46 (Block -> LEFT_BRACES StatementList RIGHT_BRACES .)


state 217

    (48) StatementRep -> StatementRep Statement . SEMICOLON

    SEMICOLON       shift and go to state 262


state 218

    (152) Statement -> Declaration .

    SEMICOLON       reduce using rule 152 (Statement -> Declaration .)


state 219

    (153) Statement -> LabeledStmt .

    SEMICOLON       reduce using rule 153 (Statement -> LabeledStmt .)


state 220

    (154) Statement -> SimpleStmt .

    SEMICOLON       reduce using rule 154 (Statement -> SimpleStmt .)


state 221

    (155) Statement -> ReturnStmt .

    SEMICOLON       reduce using rule 155 (Statement -> ReturnStmt .)


state 222

    (156) Statement -> CreateScope . Block EndScope
    (46) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 134

    Block                          shift and go to state 263

state 223

    (157) Statement -> ScanStmt .

    SEMICOLON       reduce using rule 157 (Statement -> ScanStmt .)


state 224

    (158) Statement -> BreakStmt .

    SEMICOLON       reduce using rule 158 (Statement -> BreakStmt .)


state 225

    (159) Statement -> ContinueStmt .

    SEMICOLON       reduce using rule 159 (Statement -> ContinueStmt .)


state 226

    (160) Statement -> GotoStmt .

    SEMICOLON       reduce using rule 160 (Statement -> GotoStmt .)


state 227

    (161) Statement -> PrintStmt .

    SEMICOLON       reduce using rule 161 (Statement -> PrintStmt .)


state 228

    (162) Statement -> IfStmt .

    SEMICOLON       reduce using rule 162 (Statement -> IfStmt .)


state 229

    (163) Statement -> SwitchStmt .

    SEMICOLON       reduce using rule 163 (Statement -> SwitchStmt .)


state 230

    (164) Statement -> ForStmt .

    SEMICOLON       reduce using rule 164 (Statement -> ForStmt .)


state 231

    (172) LabeledStmt -> Label . COLON Statement

    COLON           shift and go to state 264


state 232

    (167) SimpleStmt -> epsilon .

    SEMICOLON       reduce using rule 167 (SimpleStmt -> epsilon .)
    LEFT_BRACES     reduce using rule 167 (SimpleStmt -> epsilon .)


state 233

    (168) SimpleStmt -> ExpressionStmt .

    SEMICOLON       reduce using rule 168 (SimpleStmt -> ExpressionStmt .)
    LEFT_BRACES     reduce using rule 168 (SimpleStmt -> ExpressionStmt .)


state 234

    (169) SimpleStmt -> IncDecStmt .

    SEMICOLON       reduce using rule 169 (SimpleStmt -> IncDecStmt .)
    LEFT_BRACES     reduce using rule 169 (SimpleStmt -> IncDecStmt .)


state 235

    (170) SimpleStmt -> Assignment .

    SEMICOLON       reduce using rule 170 (SimpleStmt -> Assignment .)
    LEFT_BRACES     reduce using rule 170 (SimpleStmt -> Assignment .)


state 236

    (171) SimpleStmt -> ShortVarDecl .

    SEMICOLON       reduce using rule 171 (SimpleStmt -> ShortVarDecl .)
    LEFT_BRACES     reduce using rule 171 (SimpleStmt -> ShortVarDecl .)


state 237

    (228) ReturnStmt -> RETURN . ExpressionListPureOpt
    (229) ExpressionListPureOpt -> . ExpressionList
    (230) ExpressionListPureOpt -> . epsilon
    (65) ExpressionList -> . Expression ExpressionRep
    (252) epsilon -> .
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    SEMICOLON       reduce using rule 252 (epsilon -> .)
    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ExpressionListPureOpt          shift and go to state 265
    ExpressionList                 shift and go to state 266
    epsilon                        shift and go to state 267
    Expression                     shift and go to state 128
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 238

    (166) ScanStmt -> SCAN . Expression
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 268
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 239

    (174) ExpressionStmt -> Expression .
    (175) IncDecStmt -> Expression . INC
    (176) IncDecStmt -> Expression . DEC
    (124) Expression -> Expression . BinaryOp Expression
    (65) ExpressionList -> Expression . ExpressionRep
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (66) ExpressionRep -> . ExpressionRep COMMA Expression
    (67) ExpressionRep -> . epsilon
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (252) epsilon -> .
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    SEMICOLON       reduce using rule 174 (ExpressionStmt -> Expression .)
    LEFT_BRACES     reduce using rule 174 (ExpressionStmt -> Expression .)
    INC             shift and go to state 269
    DEC             shift and go to state 270
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    COMMA           reduce using rule 252 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 252 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 252 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 252 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 252 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 252 (epsilon -> .)
    AND_ASSIGN      reduce using rule 252 (epsilon -> .)
    OR_ASSIGN       reduce using rule 252 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 252 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 252 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 252 (epsilon -> .)
    ASSIGN          reduce using rule 252 (epsilon -> .)
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    ExpressionRep                  shift and go to state 191
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    epsilon                        shift and go to state 192
    UnaryOp                        shift and go to state 162

state 240

    (231) BreakStmt -> BREAK . LabelOpt
    (233) LabelOpt -> . Label
    (234) LabelOpt -> . epsilon
    (173) Label -> . IDENTIFIER
    (252) epsilon -> .

    IDENTIFIER      shift and go to state 274
    SEMICOLON       reduce using rule 252 (epsilon -> .)

    LabelOpt                       shift and go to state 271
    Label                          shift and go to state 272
    epsilon                        shift and go to state 273

state 241

    (232) ContinueStmt -> CONTINUE . LabelOpt
    (233) LabelOpt -> . Label
    (234) LabelOpt -> . epsilon
    (173) Label -> . IDENTIFIER
    (252) epsilon -> .

    IDENTIFIER      shift and go to state 274
    SEMICOLON       reduce using rule 252 (epsilon -> .)

    LabelOpt                       shift and go to state 275
    Label                          shift and go to state 272
    epsilon                        shift and go to state 273

state 242

    (235) GotoStmt -> GOTO . Label
    (173) Label -> . IDENTIFIER

    IDENTIFIER      shift and go to state 274

    Label                          shift and go to state 276

state 243

    (165) PrintStmt -> PRINT . Expression
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 277
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 244

    (190) IfStmt -> IF . Expression CreateScope Block EndScope ElseOpt
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 278
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 245

    (196) SwitchStmt -> ExprSwitchStmt .

    SEMICOLON       reduce using rule 196 (SwitchStmt -> ExprSwitchStmt .)


state 246

    (197) SwitchStmt -> TypeSwitchStmt .

    SEMICOLON       reduce using rule 197 (SwitchStmt -> TypeSwitchStmt .)


state 247

    (217) ForStmt -> FOR . CreateScope ConditionBlockOpt Block EndScope
    (87) CreateScope -> .

    NOT             reduce using rule 87 (CreateScope -> .)
    IDENTIFIER      reduce using rule 87 (CreateScope -> .)
    ADD             reduce using rule 87 (CreateScope -> .)
    SUB             reduce using rule 87 (CreateScope -> .)
    MULT            reduce using rule 87 (CreateScope -> .)
    AND             reduce using rule 87 (CreateScope -> .)
    LEFT_PARANTHESIS reduce using rule 87 (CreateScope -> .)
    TYPECAST        reduce using rule 87 (CreateScope -> .)
    LEFT_BRACES     reduce using rule 87 (CreateScope -> .)
    SEMICOLON       reduce using rule 87 (CreateScope -> .)
    INTEGER         reduce using rule 87 (CreateScope -> .)
    OCTAL           reduce using rule 87 (CreateScope -> .)
    HEX             reduce using rule 87 (CreateScope -> .)
    RUNE            reduce using rule 87 (CreateScope -> .)
    FLOAT           reduce using rule 87 (CreateScope -> .)
    IMAGINARY       reduce using rule 87 (CreateScope -> .)
    STRING          reduce using rule 87 (CreateScope -> .)

    CreateScope                    shift and go to state 279

state 248

    (173) Label -> IDENTIFIER .
    (83) ShortVarDecl -> IDENTIFIER . QUICK_ASSIGN Expression
    (107) OperandName -> IDENTIFIER .

    COLON           reduce using rule 173 (Label -> IDENTIFIER .)
    QUICK_ASSIGN    shift and go to state 280
    LEFT_BRACKET    reduce using rule 107 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 107 (OperandName -> IDENTIFIER .)
    DOT             reduce using rule 107 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 107 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 107 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 107 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 107 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 107 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 107 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 107 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 107 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 107 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 107 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 107 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 107 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 107 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 107 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 107 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 107 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 107 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 107 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 107 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 107 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 107 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 107 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 107 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 107 (OperandName -> IDENTIFIER .)


state 249

    (177) Assignment -> ExpressionList . assign_op ExpressionList
    (178) assign_op -> . AssignOp
    (179) AssignOp -> . PLUS_ASSIGN
    (180) AssignOp -> . MINUS_ASSIGN
    (181) AssignOp -> . MULT_ASSIGN
    (182) AssignOp -> . DIV_ASSIGN
    (183) AssignOp -> . MOD_ASSIGN
    (184) AssignOp -> . AND_ASSIGN
    (185) AssignOp -> . OR_ASSIGN
    (186) AssignOp -> . XOR_ASSIGN
    (187) AssignOp -> . LSHIFT_ASSIGN
    (188) AssignOp -> . RSHIFT_ASSIGN
    (189) AssignOp -> . ASSIGN

    PLUS_ASSIGN     shift and go to state 283
    MINUS_ASSIGN    shift and go to state 284
    MULT_ASSIGN     shift and go to state 285
    DIV_ASSIGN      shift and go to state 286
    MOD_ASSIGN      shift and go to state 287
    AND_ASSIGN      shift and go to state 288
    OR_ASSIGN       shift and go to state 289
    XOR_ASSIGN      shift and go to state 290
    LSHIFT_ASSIGN   shift and go to state 291
    RSHIFT_ASSIGN   shift and go to state 292
    ASSIGN          shift and go to state 293

    assign_op                      shift and go to state 281
    AssignOp                       shift and go to state 282

state 250

    (198) ExprSwitchStmt -> SWITCH . ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (205) TypeSwitchStmt -> SWITCH . SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (125) ExpressionOpt -> . Expression
    (126) ExpressionOpt -> . epsilon
    (191) SimpleStmtOpt -> . SimpleStmt SEMICOLON
    (192) SimpleStmtOpt -> . epsilon
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (252) epsilon -> .
    (167) SimpleStmt -> . epsilon
    (168) SimpleStmt -> . ExpressionStmt
    (169) SimpleStmt -> . IncDecStmt
    (170) SimpleStmt -> . Assignment
    (171) SimpleStmt -> . ShortVarDecl
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (174) ExpressionStmt -> . Expression
    (175) IncDecStmt -> . Expression INC
    (176) IncDecStmt -> . Expression DEC
    (177) Assignment -> . ExpressionList assign_op ExpressionList
    (83) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (65) ExpressionList -> . Expression ExpressionRep
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LEFT_PARANTHESIS resolved as shift
  ! shift/reduce conflict for TYPECAST resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 103 (I -> .)
  ! reduce/reduce conflict for OCTAL resolved using rule 103 (I -> .)
  ! reduce/reduce conflict for HEX resolved using rule 103 (I -> .)
  ! reduce/reduce conflict for RUNE resolved using rule 103 (I -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 104 (F -> .)
  ! reduce/reduce conflict for IMAGINARY resolved using rule 105 (C -> .)
  ! reduce/reduce conflict for STRING resolved using rule 106 (S -> .)
    LEFT_BRACES     reduce using rule 252 (epsilon -> .)
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    NOT             shift and go to state 99
    IDENTIFIER      shift and go to state 299
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

  ! IDENTIFIER      [ reduce using rule 252 (epsilon -> .) ]
  ! LEFT_PARANTHESIS [ reduce using rule 252 (epsilon -> .) ]
  ! TYPECAST        [ reduce using rule 252 (epsilon -> .) ]
  ! INTEGER         [ reduce using rule 252 (epsilon -> .) ]
  ! OCTAL           [ reduce using rule 252 (epsilon -> .) ]
  ! HEX             [ reduce using rule 252 (epsilon -> .) ]
  ! RUNE            [ reduce using rule 252 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 252 (epsilon -> .) ]
  ! IMAGINARY       [ reduce using rule 252 (epsilon -> .) ]
  ! STRING          [ reduce using rule 252 (epsilon -> .) ]

    ExpressionOpt                  shift and go to state 294
    SimpleStmtOpt                  shift and go to state 295
    Expression                     shift and go to state 296
    epsilon                        shift and go to state 297
    SimpleStmt                     shift and go to state 298
    UnaryExpr                      shift and go to state 96
    ExpressionStmt                 shift and go to state 233
    IncDecStmt                     shift and go to state 234
    Assignment                     shift and go to state 235
    ShortVarDecl                   shift and go to state 236
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    ExpressionList                 shift and go to state 249
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 251

    (43) ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .

    COMMA           reduce using rule 43 (ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .)
    RIGHT_PARANTHESIS reduce using rule 43 (ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .)


state 252

    (42) ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .

    COMMA           reduce using rule 42 (ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .)
    RIGHT_PARANTHESIS reduce using rule 42 (ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .)


state 253

    (112) PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    DOT             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LOG_OR          reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LOG_AND         reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    EQ              reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    NEQ             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LT              reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    GT              reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEQ             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    GEQ             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    OR              reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    XOR             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    DIV             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MOD             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LSHIFT          reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    RSHIFT          reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    ADD             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    SUB             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MULT            reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    AND             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    COMMA           reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    COLON           reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    INC             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    DEC             reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    ASSIGN          reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 112 (PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET .)


state 254

    (118) Slice -> LEFT_BRACKET ExpressionOpt COLON . ExpressionOpt RIGHT_BRACKET
    (119) Slice -> LEFT_BRACKET ExpressionOpt COLON . Expression COLON Expression RIGHT_BRACKET
    (125) ExpressionOpt -> . Expression
    (126) ExpressionOpt -> . epsilon
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (252) epsilon -> .
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    RIGHT_BRACKET   reduce using rule 252 (epsilon -> .)
    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ExpressionOpt                  shift and go to state 300
    Expression                     shift and go to state 301
    epsilon                        shift and go to state 205
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 255

    (115) PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .

    LEFT_BRACKET    reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DOT             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    EQ              reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LT              reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    GT              reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    OR              reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    XOR             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DIV             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MOD             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    ADD             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    SUB             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MULT            reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    AND             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    COLON           reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    INC             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DEC             reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 115 (PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)


state 256

    (120) TypeAssertion -> DOT LEFT_PARANTHESIS Type . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 302


state 257

    (151) Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression . RIGHT_PARANTHESIS
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    RIGHT_PARANTHESIS shift and go to state 303
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 258

    (23) StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES . EndScope
    (88) EndScope -> .

    ASSIGN          reduce using rule 88 (EndScope -> .)
    SEMICOLON       reduce using rule 88 (EndScope -> .)
    RIGHT_PARANTHESIS reduce using rule 88 (EndScope -> .)
    LEFT_BRACES     reduce using rule 88 (EndScope -> .)
    COMMA           reduce using rule 88 (EndScope -> .)
    LEFT_PARANTHESIS reduce using rule 88 (EndScope -> .)
    COLON           reduce using rule 88 (EndScope -> .)

    EndScope                       shift and go to state 304

state 259

    (24) FieldDeclRep -> FieldDeclRep FieldDecl . SEMICOLON

    SEMICOLON       shift and go to state 305


state 260

    (26) FieldDecl -> IdentifierList . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 306
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 261

    (66) ExpressionRep -> ExpressionRep COMMA Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    COMMA           reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    SEMICOLON       reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    RIGHT_PARANTHESIS reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LEFT_BRACES     reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    COLON           reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    PLUS_ASSIGN     reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MINUS_ASSIGN    reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MULT_ASSIGN     reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    DIV_ASSIGN      reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MOD_ASSIGN      reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    AND_ASSIGN      reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    OR_ASSIGN       reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    XOR_ASSIGN      reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LSHIFT_ASSIGN   reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    RSHIFT_ASSIGN   reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    ASSIGN          reduce using rule 66 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 262

    (48) StatementRep -> StatementRep Statement SEMICOLON .

    RETURN          reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    SCAN            reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    BREAK           reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    CONTINUE        reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    GOTO            reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    PRINT           reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    IF              reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    FOR             reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    CONST           reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    TYPE            reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    VAR             reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    IDENTIFIER      reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    SWITCH          reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    NOT             reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    ADD             reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    SUB             reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    MULT            reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    AND             reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    LEFT_PARANTHESIS reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    TYPECAST        reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    SEMICOLON       reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    LEFT_BRACES     reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    INTEGER         reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    OCTAL           reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    HEX             reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    RUNE            reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    FLOAT           reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    IMAGINARY       reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    STRING          reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    RIGHT_BRACES    reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    CASE            reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)
    DEFAULT         reduce using rule 48 (StatementRep -> StatementRep Statement SEMICOLON .)


state 263

    (156) Statement -> CreateScope Block . EndScope
    (88) EndScope -> .

    SEMICOLON       reduce using rule 88 (EndScope -> .)

    EndScope                       shift and go to state 307

state 264

    (172) LabeledStmt -> Label COLON . Statement
    (152) Statement -> . Declaration
    (153) Statement -> . LabeledStmt
    (154) Statement -> . SimpleStmt
    (155) Statement -> . ReturnStmt
    (156) Statement -> . CreateScope Block EndScope
    (157) Statement -> . ScanStmt
    (158) Statement -> . BreakStmt
    (159) Statement -> . ContinueStmt
    (160) Statement -> . GotoStmt
    (161) Statement -> . PrintStmt
    (162) Statement -> . IfStmt
    (163) Statement -> . SwitchStmt
    (164) Statement -> . ForStmt
    (50) Declaration -> . ConstDecl
    (51) Declaration -> . TypeDecl
    (52) Declaration -> . VarDecl
    (172) LabeledStmt -> . Label COLON Statement
    (167) SimpleStmt -> . epsilon
    (168) SimpleStmt -> . ExpressionStmt
    (169) SimpleStmt -> . IncDecStmt
    (170) SimpleStmt -> . Assignment
    (171) SimpleStmt -> . ShortVarDecl
    (228) ReturnStmt -> . RETURN ExpressionListPureOpt
    (87) CreateScope -> .
    (166) ScanStmt -> . SCAN Expression
    (231) BreakStmt -> . BREAK LabelOpt
    (232) ContinueStmt -> . CONTINUE LabelOpt
    (235) GotoStmt -> . GOTO Label
    (165) PrintStmt -> . PRINT Expression
    (190) IfStmt -> . IF Expression CreateScope Block EndScope ElseOpt
    (196) SwitchStmt -> . ExprSwitchStmt
    (197) SwitchStmt -> . TypeSwitchStmt
    (217) ForStmt -> . FOR CreateScope ConditionBlockOpt Block EndScope
    (55) ConstDecl -> . CONST ConstSpec
    (56) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (68) TypeDecl -> . TYPE TypeSpec
    (69) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (75) VarDecl -> . VAR VarSpec
    (76) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (173) Label -> . IDENTIFIER
    (252) epsilon -> .
    (174) ExpressionStmt -> . Expression
    (175) IncDecStmt -> . Expression INC
    (176) IncDecStmt -> . Expression DEC
    (177) Assignment -> . ExpressionList assign_op ExpressionList
    (83) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (198) ExprSwitchStmt -> . SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (205) TypeSwitchStmt -> . SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (65) ExpressionList -> . Expression ExpressionRep
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    RETURN          shift and go to state 237
    LEFT_BRACES     reduce using rule 87 (CreateScope -> .)
    SCAN            shift and go to state 238
    BREAK           shift and go to state 240
    CONTINUE        shift and go to state 241
    GOTO            shift and go to state 242
    PRINT           shift and go to state 243
    IF              shift and go to state 244
    FOR             shift and go to state 247
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23
    IDENTIFIER      shift and go to state 248
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    SWITCH          shift and go to state 250
    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Label                          shift and go to state 231
    Statement                      shift and go to state 308
    Declaration                    shift and go to state 218
    LabeledStmt                    shift and go to state 219
    SimpleStmt                     shift and go to state 220
    ReturnStmt                     shift and go to state 221
    CreateScope                    shift and go to state 222
    ScanStmt                       shift and go to state 223
    BreakStmt                      shift and go to state 224
    ContinueStmt                   shift and go to state 225
    GotoStmt                       shift and go to state 226
    PrintStmt                      shift and go to state 227
    IfStmt                         shift and go to state 228
    SwitchStmt                     shift and go to state 229
    ForStmt                        shift and go to state 230
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19
    epsilon                        shift and go to state 232
    ExpressionStmt                 shift and go to state 233
    IncDecStmt                     shift and go to state 234
    Assignment                     shift and go to state 235
    ShortVarDecl                   shift and go to state 236
    Expression                     shift and go to state 239
    ExprSwitchStmt                 shift and go to state 245
    TypeSwitchStmt                 shift and go to state 246
    ExpressionList                 shift and go to state 249
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 265

    (228) ReturnStmt -> RETURN ExpressionListPureOpt .

    SEMICOLON       reduce using rule 228 (ReturnStmt -> RETURN ExpressionListPureOpt .)


state 266

    (229) ExpressionListPureOpt -> ExpressionList .

    SEMICOLON       reduce using rule 229 (ExpressionListPureOpt -> ExpressionList .)


state 267

    (230) ExpressionListPureOpt -> epsilon .

    SEMICOLON       reduce using rule 230 (ExpressionListPureOpt -> epsilon .)


state 268

    (166) ScanStmt -> SCAN Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    SEMICOLON       reduce using rule 166 (ScanStmt -> SCAN Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 269

    (175) IncDecStmt -> Expression INC .

    SEMICOLON       reduce using rule 175 (IncDecStmt -> Expression INC .)
    LEFT_BRACES     reduce using rule 175 (IncDecStmt -> Expression INC .)


state 270

    (176) IncDecStmt -> Expression DEC .

    SEMICOLON       reduce using rule 176 (IncDecStmt -> Expression DEC .)
    LEFT_BRACES     reduce using rule 176 (IncDecStmt -> Expression DEC .)


state 271

    (231) BreakStmt -> BREAK LabelOpt .

    SEMICOLON       reduce using rule 231 (BreakStmt -> BREAK LabelOpt .)


state 272

    (233) LabelOpt -> Label .

    SEMICOLON       reduce using rule 233 (LabelOpt -> Label .)


state 273

    (234) LabelOpt -> epsilon .

    SEMICOLON       reduce using rule 234 (LabelOpt -> epsilon .)


state 274

    (173) Label -> IDENTIFIER .

    SEMICOLON       reduce using rule 173 (Label -> IDENTIFIER .)


state 275

    (232) ContinueStmt -> CONTINUE LabelOpt .

    SEMICOLON       reduce using rule 232 (ContinueStmt -> CONTINUE LabelOpt .)


state 276

    (235) GotoStmt -> GOTO Label .

    SEMICOLON       reduce using rule 235 (GotoStmt -> GOTO Label .)


state 277

    (165) PrintStmt -> PRINT Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    SEMICOLON       reduce using rule 165 (PrintStmt -> PRINT Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 278

    (190) IfStmt -> IF Expression . CreateScope Block EndScope ElseOpt
    (124) Expression -> Expression . BinaryOp Expression
    (87) CreateScope -> .
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 87 (CreateScope -> .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    CreateScope                    shift and go to state 309
    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 279

    (217) ForStmt -> FOR CreateScope . ConditionBlockOpt Block EndScope
    (218) ConditionBlockOpt -> . epsilon
    (219) ConditionBlockOpt -> . Condition
    (220) ConditionBlockOpt -> . ForClause
    (252) epsilon -> .
    (221) Condition -> . Expression
    (222) ForClause -> . SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (167) SimpleStmt -> . epsilon
    (168) SimpleStmt -> . ExpressionStmt
    (169) SimpleStmt -> . IncDecStmt
    (170) SimpleStmt -> . Assignment
    (171) SimpleStmt -> . ShortVarDecl
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (174) ExpressionStmt -> . Expression
    (175) IncDecStmt -> . Expression INC
    (176) IncDecStmt -> . Expression DEC
    (177) Assignment -> . ExpressionList assign_op ExpressionList
    (83) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (65) ExpressionList -> . Expression ExpressionRep
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    LEFT_BRACES     reduce using rule 252 (epsilon -> .)
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    NOT             shift and go to state 99
    IDENTIFIER      shift and go to state 299
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ConditionBlockOpt              shift and go to state 310
    epsilon                        shift and go to state 311
    Condition                      shift and go to state 312
    ForClause                      shift and go to state 313
    Expression                     shift and go to state 314
    SimpleStmt                     shift and go to state 315
    UnaryExpr                      shift and go to state 96
    ExpressionStmt                 shift and go to state 233
    IncDecStmt                     shift and go to state 234
    Assignment                     shift and go to state 235
    ShortVarDecl                   shift and go to state 236
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    ExpressionList                 shift and go to state 249
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 280

    (83) ShortVarDecl -> IDENTIFIER QUICK_ASSIGN . Expression
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 316
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 281

    (177) Assignment -> ExpressionList assign_op . ExpressionList
    (65) ExpressionList -> . Expression ExpressionRep
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ExpressionList                 shift and go to state 317
    Expression                     shift and go to state 128
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 282

    (178) assign_op -> AssignOp .

    NOT             reduce using rule 178 (assign_op -> AssignOp .)
    ADD             reduce using rule 178 (assign_op -> AssignOp .)
    SUB             reduce using rule 178 (assign_op -> AssignOp .)
    MULT            reduce using rule 178 (assign_op -> AssignOp .)
    AND             reduce using rule 178 (assign_op -> AssignOp .)
    LEFT_PARANTHESIS reduce using rule 178 (assign_op -> AssignOp .)
    TYPECAST        reduce using rule 178 (assign_op -> AssignOp .)
    IDENTIFIER      reduce using rule 178 (assign_op -> AssignOp .)
    INTEGER         reduce using rule 178 (assign_op -> AssignOp .)
    OCTAL           reduce using rule 178 (assign_op -> AssignOp .)
    HEX             reduce using rule 178 (assign_op -> AssignOp .)
    RUNE            reduce using rule 178 (assign_op -> AssignOp .)
    FLOAT           reduce using rule 178 (assign_op -> AssignOp .)
    IMAGINARY       reduce using rule 178 (assign_op -> AssignOp .)
    STRING          reduce using rule 178 (assign_op -> AssignOp .)


state 283

    (179) AssignOp -> PLUS_ASSIGN .

    NOT             reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    ADD             reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    SUB             reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    MULT            reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    AND             reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    TYPECAST        reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    INTEGER         reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    OCTAL           reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    HEX             reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    RUNE            reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    FLOAT           reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    IMAGINARY       reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)
    STRING          reduce using rule 179 (AssignOp -> PLUS_ASSIGN .)


state 284

    (180) AssignOp -> MINUS_ASSIGN .

    NOT             reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    ADD             reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    SUB             reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    MULT            reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    AND             reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    TYPECAST        reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    INTEGER         reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    OCTAL           reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    HEX             reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    RUNE            reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    FLOAT           reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    IMAGINARY       reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)
    STRING          reduce using rule 180 (AssignOp -> MINUS_ASSIGN .)


state 285

    (181) AssignOp -> MULT_ASSIGN .

    NOT             reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    ADD             reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    SUB             reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    MULT            reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    AND             reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    TYPECAST        reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    IDENTIFIER      reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    INTEGER         reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    OCTAL           reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    HEX             reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    RUNE            reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    FLOAT           reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    IMAGINARY       reduce using rule 181 (AssignOp -> MULT_ASSIGN .)
    STRING          reduce using rule 181 (AssignOp -> MULT_ASSIGN .)


state 286

    (182) AssignOp -> DIV_ASSIGN .

    NOT             reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    ADD             reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    SUB             reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    MULT            reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    AND             reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    TYPECAST        reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    INTEGER         reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    OCTAL           reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    HEX             reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    RUNE            reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    FLOAT           reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    IMAGINARY       reduce using rule 182 (AssignOp -> DIV_ASSIGN .)
    STRING          reduce using rule 182 (AssignOp -> DIV_ASSIGN .)


state 287

    (183) AssignOp -> MOD_ASSIGN .

    NOT             reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    ADD             reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    SUB             reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    MULT            reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    AND             reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    TYPECAST        reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    INTEGER         reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    OCTAL           reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    HEX             reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    RUNE            reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    FLOAT           reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    IMAGINARY       reduce using rule 183 (AssignOp -> MOD_ASSIGN .)
    STRING          reduce using rule 183 (AssignOp -> MOD_ASSIGN .)


state 288

    (184) AssignOp -> AND_ASSIGN .

    NOT             reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    ADD             reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    SUB             reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    MULT            reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    AND             reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    TYPECAST        reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    INTEGER         reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    OCTAL           reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    HEX             reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    RUNE            reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    FLOAT           reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    IMAGINARY       reduce using rule 184 (AssignOp -> AND_ASSIGN .)
    STRING          reduce using rule 184 (AssignOp -> AND_ASSIGN .)


state 289

    (185) AssignOp -> OR_ASSIGN .

    NOT             reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    ADD             reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    SUB             reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    MULT            reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    AND             reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    TYPECAST        reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    INTEGER         reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    OCTAL           reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    HEX             reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    RUNE            reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    FLOAT           reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    IMAGINARY       reduce using rule 185 (AssignOp -> OR_ASSIGN .)
    STRING          reduce using rule 185 (AssignOp -> OR_ASSIGN .)


state 290

    (186) AssignOp -> XOR_ASSIGN .

    NOT             reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    ADD             reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    SUB             reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    MULT            reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    AND             reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    TYPECAST        reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    INTEGER         reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    OCTAL           reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    HEX             reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    RUNE            reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    FLOAT           reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    IMAGINARY       reduce using rule 186 (AssignOp -> XOR_ASSIGN .)
    STRING          reduce using rule 186 (AssignOp -> XOR_ASSIGN .)


state 291

    (187) AssignOp -> LSHIFT_ASSIGN .

    NOT             reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    ADD             reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    SUB             reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    MULT            reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    AND             reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    TYPECAST        reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    INTEGER         reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    OCTAL           reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    HEX             reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    RUNE            reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    FLOAT           reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    IMAGINARY       reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)
    STRING          reduce using rule 187 (AssignOp -> LSHIFT_ASSIGN .)


state 292

    (188) AssignOp -> RSHIFT_ASSIGN .

    NOT             reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    ADD             reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    SUB             reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    MULT            reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    AND             reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    TYPECAST        reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    INTEGER         reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    OCTAL           reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    HEX             reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    RUNE            reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    FLOAT           reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    IMAGINARY       reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)
    STRING          reduce using rule 188 (AssignOp -> RSHIFT_ASSIGN .)


state 293

    (189) AssignOp -> ASSIGN .

    NOT             reduce using rule 189 (AssignOp -> ASSIGN .)
    ADD             reduce using rule 189 (AssignOp -> ASSIGN .)
    SUB             reduce using rule 189 (AssignOp -> ASSIGN .)
    MULT            reduce using rule 189 (AssignOp -> ASSIGN .)
    AND             reduce using rule 189 (AssignOp -> ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 189 (AssignOp -> ASSIGN .)
    TYPECAST        reduce using rule 189 (AssignOp -> ASSIGN .)
    IDENTIFIER      reduce using rule 189 (AssignOp -> ASSIGN .)
    INTEGER         reduce using rule 189 (AssignOp -> ASSIGN .)
    OCTAL           reduce using rule 189 (AssignOp -> ASSIGN .)
    HEX             reduce using rule 189 (AssignOp -> ASSIGN .)
    RUNE            reduce using rule 189 (AssignOp -> ASSIGN .)
    FLOAT           reduce using rule 189 (AssignOp -> ASSIGN .)
    IMAGINARY       reduce using rule 189 (AssignOp -> ASSIGN .)
    STRING          reduce using rule 189 (AssignOp -> ASSIGN .)


state 294

    (198) ExprSwitchStmt -> SWITCH ExpressionOpt . LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES

    LEFT_BRACES     shift and go to state 318


state 295

    (205) TypeSwitchStmt -> SWITCH SimpleStmtOpt . TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (206) TypeSwitchGuard -> . IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (207) IdentifierOpt -> . IDENTIFIER QUICK_ASSIGN
    (208) IdentifierOpt -> . epsilon
    (252) epsilon -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 321
    LEFT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    TYPECAST        reduce using rule 252 (epsilon -> .)
    INTEGER         reduce using rule 252 (epsilon -> .)
    OCTAL           reduce using rule 252 (epsilon -> .)
    HEX             reduce using rule 252 (epsilon -> .)
    RUNE            reduce using rule 252 (epsilon -> .)
    FLOAT           reduce using rule 252 (epsilon -> .)
    IMAGINARY       reduce using rule 252 (epsilon -> .)
    STRING          reduce using rule 252 (epsilon -> .)

  ! IDENTIFIER      [ reduce using rule 252 (epsilon -> .) ]

    TypeSwitchGuard                shift and go to state 319
    IdentifierOpt                  shift and go to state 320
    epsilon                        shift and go to state 322

state 296

    (125) ExpressionOpt -> Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (174) ExpressionStmt -> Expression .
    (175) IncDecStmt -> Expression . INC
    (176) IncDecStmt -> Expression . DEC
    (65) ExpressionList -> Expression . ExpressionRep
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (66) ExpressionRep -> . ExpressionRep COMMA Expression
    (67) ExpressionRep -> . epsilon
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (252) epsilon -> .
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 125 (ExpressionOpt -> Expression .)
    SEMICOLON       reduce using rule 174 (ExpressionStmt -> Expression .)
    INC             shift and go to state 269
    DEC             shift and go to state 270
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    COMMA           reduce using rule 252 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 252 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 252 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 252 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 252 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 252 (epsilon -> .)
    AND_ASSIGN      reduce using rule 252 (epsilon -> .)
    OR_ASSIGN       reduce using rule 252 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 252 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 252 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 252 (epsilon -> .)
    ASSIGN          reduce using rule 252 (epsilon -> .)
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    ExpressionRep                  shift and go to state 191
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    epsilon                        shift and go to state 192
    UnaryOp                        shift and go to state 162

state 297

    (126) ExpressionOpt -> epsilon .
    (192) SimpleStmtOpt -> epsilon .
    (167) SimpleStmt -> epsilon .

    LEFT_BRACES     reduce using rule 126 (ExpressionOpt -> epsilon .)
    IDENTIFIER      reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    TYPECAST        reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    INTEGER         reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    OCTAL           reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    HEX             reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    RUNE            reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    FLOAT           reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    IMAGINARY       reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    STRING          reduce using rule 192 (SimpleStmtOpt -> epsilon .)
    SEMICOLON       reduce using rule 167 (SimpleStmt -> epsilon .)


state 298

    (191) SimpleStmtOpt -> SimpleStmt . SEMICOLON

    SEMICOLON       shift and go to state 323


state 299

    (83) ShortVarDecl -> IDENTIFIER . QUICK_ASSIGN Expression
    (107) OperandName -> IDENTIFIER .

    QUICK_ASSIGN    shift and go to state 280
    LEFT_BRACKET    reduce using rule 107 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 107 (OperandName -> IDENTIFIER .)
    DOT             reduce using rule 107 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 107 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 107 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 107 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 107 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 107 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 107 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 107 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 107 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 107 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 107 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 107 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 107 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 107 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 107 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 107 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 107 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 107 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 107 (OperandName -> IDENTIFIER .)
    LEFT_BRACES     reduce using rule 107 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 107 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 107 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 107 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 107 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 107 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 107 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 107 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 107 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 107 (OperandName -> IDENTIFIER .)


state 300

    (118) Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 324


state 301

    (119) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression . COLON Expression RIGHT_BRACKET
    (125) ExpressionOpt -> Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    COLON           shift and go to state 325
    RIGHT_BRACKET   reduce using rule 125 (ExpressionOpt -> Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 302

    (120) TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .

    LEFT_BRACKET    reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DOT             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    EQ              reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LT              reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    GT              reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    OR              reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    XOR             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DIV             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MOD             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    ADD             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SUB             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MULT            reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    AND             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COLON           reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    INC             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DEC             reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 120 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)


state 303

    (151) Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .

    LEFT_BRACKET    reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DOT             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    EQ              reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LT              reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GT              reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR              reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ADD             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SUB             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT            reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COLON           reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    INC             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DEC             reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 151 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)


state 304

    (23) StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .

    ASSIGN          reduce using rule 23 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    SEMICOLON       reduce using rule 23 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    RIGHT_PARANTHESIS reduce using rule 23 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    LEFT_BRACES     reduce using rule 23 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    COMMA           reduce using rule 23 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    LEFT_PARANTHESIS reduce using rule 23 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)
    COLON           reduce using rule 23 (StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope .)


state 305

    (24) FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .

    RIGHT_BRACES    reduce using rule 24 (FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .)


state 306

    (26) FieldDecl -> IdentifierList Type .

    SEMICOLON       reduce using rule 26 (FieldDecl -> IdentifierList Type .)


state 307

    (156) Statement -> CreateScope Block EndScope .

    SEMICOLON       reduce using rule 156 (Statement -> CreateScope Block EndScope .)


state 308

    (172) LabeledStmt -> Label COLON Statement .

    SEMICOLON       reduce using rule 172 (LabeledStmt -> Label COLON Statement .)


state 309

    (190) IfStmt -> IF Expression CreateScope . Block EndScope ElseOpt
    (46) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 134

    Block                          shift and go to state 326

state 310

    (217) ForStmt -> FOR CreateScope ConditionBlockOpt . Block EndScope
    (46) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 134

    Block                          shift and go to state 327

state 311

    (218) ConditionBlockOpt -> epsilon .
    (167) SimpleStmt -> epsilon .

    LEFT_BRACES     reduce using rule 218 (ConditionBlockOpt -> epsilon .)
    SEMICOLON       reduce using rule 167 (SimpleStmt -> epsilon .)


state 312

    (219) ConditionBlockOpt -> Condition .

    LEFT_BRACES     reduce using rule 219 (ConditionBlockOpt -> Condition .)


state 313

    (220) ConditionBlockOpt -> ForClause .

    LEFT_BRACES     reduce using rule 220 (ConditionBlockOpt -> ForClause .)


state 314

    (221) Condition -> Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (174) ExpressionStmt -> Expression .
    (175) IncDecStmt -> Expression . INC
    (176) IncDecStmt -> Expression . DEC
    (65) ExpressionList -> Expression . ExpressionRep
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (66) ExpressionRep -> . ExpressionRep COMMA Expression
    (67) ExpressionRep -> . epsilon
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (252) epsilon -> .
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 221 (Condition -> Expression .)
    SEMICOLON       reduce using rule 174 (ExpressionStmt -> Expression .)
    INC             shift and go to state 269
    DEC             shift and go to state 270
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    COMMA           reduce using rule 252 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 252 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 252 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 252 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 252 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 252 (epsilon -> .)
    AND_ASSIGN      reduce using rule 252 (epsilon -> .)
    OR_ASSIGN       reduce using rule 252 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 252 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 252 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 252 (epsilon -> .)
    ASSIGN          reduce using rule 252 (epsilon -> .)
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    ExpressionRep                  shift and go to state 191
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    epsilon                        shift and go to state 192
    UnaryOp                        shift and go to state 162

state 315

    (222) ForClause -> SimpleStmt . SEMICOLON ConditionOpt SEMICOLON SimpleStmt

    SEMICOLON       shift and go to state 328


state 316

    (83) ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    SEMICOLON       reduce using rule 83 (ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .)
    LEFT_BRACES     reduce using rule 83 (ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 317

    (177) Assignment -> ExpressionList assign_op ExpressionList .

    SEMICOLON       reduce using rule 177 (Assignment -> ExpressionList assign_op ExpressionList .)
    LEFT_BRACES     reduce using rule 177 (Assignment -> ExpressionList assign_op ExpressionList .)


state 318

    (198) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES . ExprCaseClauseRep RIGHT_BRACES
    (200) ExprCaseClauseRep -> . ExprCaseClauseRep ExprCaseClause
    (201) ExprCaseClauseRep -> . epsilon
    (252) epsilon -> .

    RIGHT_BRACES    reduce using rule 252 (epsilon -> .)
    CASE            reduce using rule 252 (epsilon -> .)
    DEFAULT         reduce using rule 252 (epsilon -> .)

    ExprCaseClauseRep              shift and go to state 329
    epsilon                        shift and go to state 330

state 319

    (205) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard . LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES

    LEFT_BRACES     shift and go to state 331


state 320

    (206) TypeSwitchGuard -> IdentifierOpt . PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    PrimaryExpr                    shift and go to state 332
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 321

    (207) IdentifierOpt -> IDENTIFIER . QUICK_ASSIGN

    QUICK_ASSIGN    shift and go to state 333


state 322

    (208) IdentifierOpt -> epsilon .

    LEFT_PARANTHESIS reduce using rule 208 (IdentifierOpt -> epsilon .)
    TYPECAST        reduce using rule 208 (IdentifierOpt -> epsilon .)
    IDENTIFIER      reduce using rule 208 (IdentifierOpt -> epsilon .)
    INTEGER         reduce using rule 208 (IdentifierOpt -> epsilon .)
    OCTAL           reduce using rule 208 (IdentifierOpt -> epsilon .)
    HEX             reduce using rule 208 (IdentifierOpt -> epsilon .)
    RUNE            reduce using rule 208 (IdentifierOpt -> epsilon .)
    FLOAT           reduce using rule 208 (IdentifierOpt -> epsilon .)
    IMAGINARY       reduce using rule 208 (IdentifierOpt -> epsilon .)
    STRING          reduce using rule 208 (IdentifierOpt -> epsilon .)


state 323

    (191) SimpleStmtOpt -> SimpleStmt SEMICOLON .

    IDENTIFIER      reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    LEFT_PARANTHESIS reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    TYPECAST        reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    INTEGER         reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    OCTAL           reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    HEX             reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    RUNE            reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    FLOAT           reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    IMAGINARY       reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    STRING          reduce using rule 191 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)


state 324

    (118) Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DOT             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LOG_OR          reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LOG_AND         reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    EQ              reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    NEQ             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LT              reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    GT              reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEQ             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    GEQ             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    OR              reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    XOR             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DIV             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MOD             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LSHIFT          reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RSHIFT          reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    ADD             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    SUB             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MULT            reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    AND             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    COMMA           reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    COLON           reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    INC             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DEC             reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    ASSIGN          reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 118 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)


state 325

    (119) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON . Expression RIGHT_BRACKET
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    Expression                     shift and go to state 334
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 326

    (190) IfStmt -> IF Expression CreateScope Block . EndScope ElseOpt
    (88) EndScope -> .

    ELSE            reduce using rule 88 (EndScope -> .)
    SEMICOLON       reduce using rule 88 (EndScope -> .)

    EndScope                       shift and go to state 335

state 327

    (217) ForStmt -> FOR CreateScope ConditionBlockOpt Block . EndScope
    (88) EndScope -> .

    SEMICOLON       reduce using rule 88 (EndScope -> .)

    EndScope                       shift and go to state 336

state 328

    (222) ForClause -> SimpleStmt SEMICOLON . ConditionOpt SEMICOLON SimpleStmt
    (223) ConditionOpt -> . epsilon
    (224) ConditionOpt -> . Condition
    (252) epsilon -> .
    (221) Condition -> . Expression
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    SEMICOLON       reduce using rule 252 (epsilon -> .)
    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ConditionOpt                   shift and go to state 337
    epsilon                        shift and go to state 338
    Condition                      shift and go to state 339
    Expression                     shift and go to state 340
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 329

    (198) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep . RIGHT_BRACES
    (200) ExprCaseClauseRep -> ExprCaseClauseRep . ExprCaseClause
    (202) ExprCaseClause -> . ExprSwitchCase COLON StatementList
    (203) ExprSwitchCase -> . CASE ExpressionList
    (204) ExprSwitchCase -> . DEFAULT

    RIGHT_BRACES    shift and go to state 341
    CASE            shift and go to state 344
    DEFAULT         shift and go to state 345

    ExprCaseClause                 shift and go to state 342
    ExprSwitchCase                 shift and go to state 343

state 330

    (201) ExprCaseClauseRep -> epsilon .

    RIGHT_BRACES    reduce using rule 201 (ExprCaseClauseRep -> epsilon .)
    CASE            reduce using rule 201 (ExprCaseClauseRep -> epsilon .)
    DEFAULT         reduce using rule 201 (ExprCaseClauseRep -> epsilon .)


state 331

    (205) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES . TypeCaseClauseOpt RIGHT_BRACES
    (209) TypeCaseClauseOpt -> . TypeCaseClauseOpt TypeCaseClause
    (210) TypeCaseClauseOpt -> . epsilon
    (252) epsilon -> .

    RIGHT_BRACES    reduce using rule 252 (epsilon -> .)
    CASE            reduce using rule 252 (epsilon -> .)
    DEFAULT         reduce using rule 252 (epsilon -> .)

    TypeCaseClauseOpt              shift and go to state 346
    epsilon                        shift and go to state 347

state 332

    (206) TypeSwitchGuard -> IdentifierOpt PrimaryExpr . DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (110) PrimaryExpr -> PrimaryExpr . Selector
    (112) PrimaryExpr -> PrimaryExpr . LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> PrimaryExpr . Slice
    (114) PrimaryExpr -> PrimaryExpr . TypeAssertion
    (115) PrimaryExpr -> PrimaryExpr . LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (116) Selector -> . DOT IDENTIFIER
    (118) Slice -> . LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (119) Slice -> . LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (120) TypeAssertion -> . DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    DOT             shift and go to state 348
    LEFT_BRACKET    shift and go to state 170
    LEFT_PARANTHESIS shift and go to state 173

    Selector                       shift and go to state 169
    Slice                          shift and go to state 171
    TypeAssertion                  shift and go to state 172

state 333

    (207) IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .

    LEFT_PARANTHESIS reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    TYPECAST        reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    IDENTIFIER      reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    INTEGER         reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    OCTAL           reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    HEX             reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    RUNE            reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    FLOAT           reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    IMAGINARY       reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    STRING          reduce using rule 207 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)


state 334

    (119) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression . RIGHT_BRACKET
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    RIGHT_BRACKET   shift and go to state 349
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 335

    (190) IfStmt -> IF Expression CreateScope Block EndScope . ElseOpt
    (193) ElseOpt -> . ELSE IfStmt
    (194) ElseOpt -> . ELSE CreateScope Block EndScope
    (195) ElseOpt -> . epsilon
    (252) epsilon -> .

    ELSE            shift and go to state 351
    SEMICOLON       reduce using rule 252 (epsilon -> .)

    ElseOpt                        shift and go to state 350
    epsilon                        shift and go to state 352

state 336

    (217) ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope .

    SEMICOLON       reduce using rule 217 (ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope .)


state 337

    (222) ForClause -> SimpleStmt SEMICOLON ConditionOpt . SEMICOLON SimpleStmt

    SEMICOLON       shift and go to state 353


state 338

    (223) ConditionOpt -> epsilon .

    SEMICOLON       reduce using rule 223 (ConditionOpt -> epsilon .)


state 339

    (224) ConditionOpt -> Condition .

    SEMICOLON       reduce using rule 224 (ConditionOpt -> Condition .)


state 340

    (221) Condition -> Expression .
    (124) Expression -> Expression . BinaryOp Expression
    (130) BinaryOp -> . LOG_OR
    (131) BinaryOp -> . LOG_AND
    (132) BinaryOp -> . RelOp
    (133) BinaryOp -> . AddMulOp
    (134) RelOp -> . EQ
    (135) RelOp -> . NEQ
    (136) RelOp -> . LT
    (137) RelOp -> . GT
    (138) RelOp -> . LEQ
    (139) RelOp -> . GEQ
    (140) AddMulOp -> . UnaryOp
    (141) AddMulOp -> . OR
    (142) AddMulOp -> . XOR
    (143) AddMulOp -> . DIV
    (144) AddMulOp -> . MOD
    (145) AddMulOp -> . LSHIFT
    (146) AddMulOp -> . RSHIFT
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND

    SEMICOLON       reduce using rule 221 (Condition -> Expression .)
    LOG_OR          shift and go to state 152
    LOG_AND         shift and go to state 153
    EQ              shift and go to state 156
    NEQ             shift and go to state 157
    LT              shift and go to state 158
    GT              shift and go to state 159
    LEQ             shift and go to state 160
    GEQ             shift and go to state 161
    OR              shift and go to state 163
    XOR             shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    LSHIFT          shift and go to state 167
    RSHIFT          shift and go to state 168
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106

    BinaryOp                       shift and go to state 151
    RelOp                          shift and go to state 154
    AddMulOp                       shift and go to state 155
    UnaryOp                        shift and go to state 162

state 341

    (198) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES .

    SEMICOLON       reduce using rule 198 (ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES .)


state 342

    (200) ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .

    RIGHT_BRACES    reduce using rule 200 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)
    CASE            reduce using rule 200 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)
    DEFAULT         reduce using rule 200 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)


state 343

    (202) ExprCaseClause -> ExprSwitchCase . COLON StatementList

    COLON           shift and go to state 354


state 344

    (203) ExprSwitchCase -> CASE . ExpressionList
    (65) ExpressionList -> . Expression ExpressionRep
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    IDENTIFIER      shift and go to state 111
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    ExpressionList                 shift and go to state 355
    Expression                     shift and go to state 128
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 345

    (204) ExprSwitchCase -> DEFAULT .

    COLON           reduce using rule 204 (ExprSwitchCase -> DEFAULT .)


state 346

    (205) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt . RIGHT_BRACES
    (209) TypeCaseClauseOpt -> TypeCaseClauseOpt . TypeCaseClause
    (211) TypeCaseClause -> . TypeSwitchCase COLON StatementList
    (212) TypeSwitchCase -> . CASE TypeList
    (213) TypeSwitchCase -> . DEFAULT

    RIGHT_BRACES    shift and go to state 356
    CASE            shift and go to state 359
    DEFAULT         shift and go to state 360

    TypeCaseClause                 shift and go to state 357
    TypeSwitchCase                 shift and go to state 358

state 347

    (210) TypeCaseClauseOpt -> epsilon .

    RIGHT_BRACES    reduce using rule 210 (TypeCaseClauseOpt -> epsilon .)
    CASE            reduce using rule 210 (TypeCaseClauseOpt -> epsilon .)
    DEFAULT         reduce using rule 210 (TypeCaseClauseOpt -> epsilon .)


state 348

    (206) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT . LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (116) Selector -> DOT . IDENTIFIER
    (120) TypeAssertion -> DOT . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 361
    IDENTIFIER      shift and go to state 209


state 349

    (119) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DOT             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LOG_OR          reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LOG_AND         reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    EQ              reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    NEQ             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LT              reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    GT              reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEQ             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    GEQ             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    OR              reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    XOR             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DIV             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MOD             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LSHIFT          reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RSHIFT          reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    ADD             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    SUB             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MULT            reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    AND             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    COMMA           reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    COLON           reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    INC             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DEC             reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    ASSIGN          reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 119 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)


state 350

    (190) IfStmt -> IF Expression CreateScope Block EndScope ElseOpt .

    SEMICOLON       reduce using rule 190 (IfStmt -> IF Expression CreateScope Block EndScope ElseOpt .)


state 351

    (193) ElseOpt -> ELSE . IfStmt
    (194) ElseOpt -> ELSE . CreateScope Block EndScope
    (190) IfStmt -> . IF Expression CreateScope Block EndScope ElseOpt
    (87) CreateScope -> .

    IF              shift and go to state 244
    LEFT_BRACES     reduce using rule 87 (CreateScope -> .)

    IfStmt                         shift and go to state 362
    CreateScope                    shift and go to state 363

state 352

    (195) ElseOpt -> epsilon .

    SEMICOLON       reduce using rule 195 (ElseOpt -> epsilon .)


state 353

    (222) ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON . SimpleStmt
    (167) SimpleStmt -> . epsilon
    (168) SimpleStmt -> . ExpressionStmt
    (169) SimpleStmt -> . IncDecStmt
    (170) SimpleStmt -> . Assignment
    (171) SimpleStmt -> . ShortVarDecl
    (252) epsilon -> .
    (174) ExpressionStmt -> . Expression
    (175) IncDecStmt -> . Expression INC
    (176) IncDecStmt -> . Expression DEC
    (177) Assignment -> . ExpressionList assign_op ExpressionList
    (83) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (123) Expression -> . UnaryExpr
    (124) Expression -> . Expression BinaryOp Expression
    (65) ExpressionList -> . Expression ExpressionRep
    (127) UnaryExpr -> . PrimaryExpr
    (128) UnaryExpr -> . UnaryOp UnaryExpr
    (129) UnaryExpr -> . NOT UnaryExpr
    (109) PrimaryExpr -> . Operand
    (110) PrimaryExpr -> . PrimaryExpr Selector
    (111) PrimaryExpr -> . Conversion
    (112) PrimaryExpr -> . PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET
    (113) PrimaryExpr -> . PrimaryExpr Slice
    (114) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (115) PrimaryExpr -> . PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
    (147) UnaryOp -> . ADD
    (148) UnaryOp -> . SUB
    (149) UnaryOp -> . MULT
    (150) UnaryOp -> . AND
    (92) Operand -> . Literal
    (93) Operand -> . OperandName
    (94) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (151) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (95) Literal -> . BasicLit
    (107) OperandName -> . IDENTIFIER
    (96) BasicLit -> . I INTEGER
    (97) BasicLit -> . I OCTAL
    (98) BasicLit -> . I HEX
    (99) BasicLit -> . F FLOAT
    (100) BasicLit -> . C IMAGINARY
    (101) BasicLit -> . I RUNE
    (102) BasicLit -> . S STRING
    (103) I -> .
    (104) F -> .
    (105) C -> .
    (106) S -> .

    LEFT_BRACES     reduce using rule 252 (epsilon -> .)
    IDENTIFIER      shift and go to state 299
    NOT             shift and go to state 99
    ADD             shift and go to state 103
    SUB             shift and go to state 104
    MULT            shift and go to state 105
    AND             shift and go to state 106
    LEFT_PARANTHESIS shift and go to state 102
    TYPECAST        shift and go to state 109
    INTEGER         reduce using rule 103 (I -> .)
    OCTAL           reduce using rule 103 (I -> .)
    HEX             reduce using rule 103 (I -> .)
    RUNE            reduce using rule 103 (I -> .)
    FLOAT           reduce using rule 104 (F -> .)
    IMAGINARY       reduce using rule 105 (C -> .)
    STRING          reduce using rule 106 (S -> .)

    SimpleStmt                     shift and go to state 364
    epsilon                        shift and go to state 232
    ExpressionStmt                 shift and go to state 233
    IncDecStmt                     shift and go to state 234
    Assignment                     shift and go to state 235
    ShortVarDecl                   shift and go to state 236
    Expression                     shift and go to state 239
    ExpressionList                 shift and go to state 249
    UnaryExpr                      shift and go to state 96
    PrimaryExpr                    shift and go to state 97
    UnaryOp                        shift and go to state 98
    Operand                        shift and go to state 100
    Conversion                     shift and go to state 101
    Literal                        shift and go to state 107
    OperandName                    shift and go to state 108
    BasicLit                       shift and go to state 110
    I                              shift and go to state 112
    F                              shift and go to state 113
    C                              shift and go to state 114
    S                              shift and go to state 115

state 354

    (202) ExprCaseClause -> ExprSwitchCase COLON . StatementList
    (47) StatementList -> . StatementRep
    (48) StatementRep -> . StatementRep Statement SEMICOLON
    (49) StatementRep -> . epsilon
    (252) epsilon -> .

    RETURN          reduce using rule 252 (epsilon -> .)
    SCAN            reduce using rule 252 (epsilon -> .)
    BREAK           reduce using rule 252 (epsilon -> .)
    CONTINUE        reduce using rule 252 (epsilon -> .)
    GOTO            reduce using rule 252 (epsilon -> .)
    PRINT           reduce using rule 252 (epsilon -> .)
    IF              reduce using rule 252 (epsilon -> .)
    FOR             reduce using rule 252 (epsilon -> .)
    CONST           reduce using rule 252 (epsilon -> .)
    TYPE            reduce using rule 252 (epsilon -> .)
    VAR             reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)
    SWITCH          reduce using rule 252 (epsilon -> .)
    NOT             reduce using rule 252 (epsilon -> .)
    ADD             reduce using rule 252 (epsilon -> .)
    SUB             reduce using rule 252 (epsilon -> .)
    MULT            reduce using rule 252 (epsilon -> .)
    AND             reduce using rule 252 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    TYPECAST        reduce using rule 252 (epsilon -> .)
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    LEFT_BRACES     reduce using rule 252 (epsilon -> .)
    INTEGER         reduce using rule 252 (epsilon -> .)
    OCTAL           reduce using rule 252 (epsilon -> .)
    HEX             reduce using rule 252 (epsilon -> .)
    RUNE            reduce using rule 252 (epsilon -> .)
    FLOAT           reduce using rule 252 (epsilon -> .)
    IMAGINARY       reduce using rule 252 (epsilon -> .)
    STRING          reduce using rule 252 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 252 (epsilon -> .)
    CASE            reduce using rule 252 (epsilon -> .)
    DEFAULT         reduce using rule 252 (epsilon -> .)

    StatementList                  shift and go to state 365
    StatementRep                   shift and go to state 194
    epsilon                        shift and go to state 195

state 355

    (203) ExprSwitchCase -> CASE ExpressionList .

    COLON           reduce using rule 203 (ExprSwitchCase -> CASE ExpressionList .)


state 356

    (205) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES .

    SEMICOLON       reduce using rule 205 (TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES .)


state 357

    (209) TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .

    RIGHT_BRACES    reduce using rule 209 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)
    CASE            reduce using rule 209 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)
    DEFAULT         reduce using rule 209 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)


state 358

    (211) TypeCaseClause -> TypeSwitchCase . COLON StatementList

    COLON           shift and go to state 366


state 359

    (212) TypeSwitchCase -> CASE . TypeList
    (214) TypeList -> . Type TypeRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    TypeList                       shift and go to state 367
    Type                           shift and go to state 368
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 360

    (213) TypeSwitchCase -> DEFAULT .

    COLON           reduce using rule 213 (TypeSwitchCase -> DEFAULT .)


state 361

    (206) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS . TYPE RIGHT_PARANTHESIS
    (120) TypeAssertion -> DOT LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    TYPE            shift and go to state 369
    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 256
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 362

    (193) ElseOpt -> ELSE IfStmt .

    SEMICOLON       reduce using rule 193 (ElseOpt -> ELSE IfStmt .)


state 363

    (194) ElseOpt -> ELSE CreateScope . Block EndScope
    (46) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 134

    Block                          shift and go to state 370

state 364

    (222) ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt .

    LEFT_BRACES     reduce using rule 222 (ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt .)


state 365

    (202) ExprCaseClause -> ExprSwitchCase COLON StatementList .

    RIGHT_BRACES    reduce using rule 202 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    CASE            reduce using rule 202 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 202 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)


state 366

    (211) TypeCaseClause -> TypeSwitchCase COLON . StatementList
    (47) StatementList -> . StatementRep
    (48) StatementRep -> . StatementRep Statement SEMICOLON
    (49) StatementRep -> . epsilon
    (252) epsilon -> .

    RETURN          reduce using rule 252 (epsilon -> .)
    SCAN            reduce using rule 252 (epsilon -> .)
    BREAK           reduce using rule 252 (epsilon -> .)
    CONTINUE        reduce using rule 252 (epsilon -> .)
    GOTO            reduce using rule 252 (epsilon -> .)
    PRINT           reduce using rule 252 (epsilon -> .)
    IF              reduce using rule 252 (epsilon -> .)
    FOR             reduce using rule 252 (epsilon -> .)
    CONST           reduce using rule 252 (epsilon -> .)
    TYPE            reduce using rule 252 (epsilon -> .)
    VAR             reduce using rule 252 (epsilon -> .)
    IDENTIFIER      reduce using rule 252 (epsilon -> .)
    SWITCH          reduce using rule 252 (epsilon -> .)
    NOT             reduce using rule 252 (epsilon -> .)
    ADD             reduce using rule 252 (epsilon -> .)
    SUB             reduce using rule 252 (epsilon -> .)
    MULT            reduce using rule 252 (epsilon -> .)
    AND             reduce using rule 252 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 252 (epsilon -> .)
    TYPECAST        reduce using rule 252 (epsilon -> .)
    SEMICOLON       reduce using rule 252 (epsilon -> .)
    LEFT_BRACES     reduce using rule 252 (epsilon -> .)
    INTEGER         reduce using rule 252 (epsilon -> .)
    OCTAL           reduce using rule 252 (epsilon -> .)
    HEX             reduce using rule 252 (epsilon -> .)
    RUNE            reduce using rule 252 (epsilon -> .)
    FLOAT           reduce using rule 252 (epsilon -> .)
    IMAGINARY       reduce using rule 252 (epsilon -> .)
    STRING          reduce using rule 252 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 252 (epsilon -> .)
    CASE            reduce using rule 252 (epsilon -> .)
    DEFAULT         reduce using rule 252 (epsilon -> .)

    StatementList                  shift and go to state 371
    StatementRep                   shift and go to state 194
    epsilon                        shift and go to state 195

state 367

    (212) TypeSwitchCase -> CASE TypeList .

    COLON           reduce using rule 212 (TypeSwitchCase -> CASE TypeList .)


state 368

    (214) TypeList -> Type . TypeRep
    (215) TypeRep -> . TypeRep COMMA Type
    (216) TypeRep -> . epsilon
    (252) epsilon -> .

    COMMA           reduce using rule 252 (epsilon -> .)
    COLON           reduce using rule 252 (epsilon -> .)

    TypeRep                        shift and go to state 372
    epsilon                        shift and go to state 373

state 369

    (206) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE . RIGHT_PARANTHESIS
    (14) TypeToken -> TYPE . IDENTIFIER

    RIGHT_PARANTHESIS shift and go to state 374
    IDENTIFIER      shift and go to state 92


state 370

    (194) ElseOpt -> ELSE CreateScope Block . EndScope
    (88) EndScope -> .

    SEMICOLON       reduce using rule 88 (EndScope -> .)

    EndScope                       shift and go to state 375

state 371

    (211) TypeCaseClause -> TypeSwitchCase COLON StatementList .

    RIGHT_BRACES    reduce using rule 211 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)
    CASE            reduce using rule 211 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 211 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)


state 372

    (214) TypeList -> Type TypeRep .
    (215) TypeRep -> TypeRep . COMMA Type

    COLON           reduce using rule 214 (TypeList -> Type TypeRep .)
    COMMA           shift and go to state 376


state 373

    (216) TypeRep -> epsilon .

    COMMA           reduce using rule 216 (TypeRep -> epsilon .)
    COLON           reduce using rule 216 (TypeRep -> epsilon .)


state 374

    (206) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS .

    LEFT_BRACES     reduce using rule 206 (TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS .)


state 375

    (194) ElseOpt -> ELSE CreateScope Block EndScope .

    SEMICOLON       reduce using rule 194 (ElseOpt -> ELSE CreateScope Block EndScope .)


state 376

    (215) TypeRep -> TypeRep COMMA . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (108) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope
    (30) PointerType -> . MULT BaseType
    (86) CreateFuncScope -> .

    LEFT_PARANTHESIS shift and go to state 55
    INT_T           shift and go to state 61
    FLOAT_T         shift and go to state 62
    UINT_T          shift and go to state 63
    COMPLEX_T       shift and go to state 64
    RUNE_T          shift and go to state 65
    BOOL_T          shift and go to state 66
    STRING_T        shift and go to state 67
    TYPE            shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LEFT_BRACKET    shift and go to state 70
    MULT            shift and go to state 72
    STRUCT          reduce using rule 86 (CreateFuncScope -> .)

    Type                           shift and go to state 377
    TypeName                       shift and go to state 53
    TypeLit                        shift and go to state 54
    TypeToken                      shift and go to state 56
    QualifiedIdent                 shift and go to state 57
    ArrayType                      shift and go to state 58
    StructType                     shift and go to state 59
    PointerType                    shift and go to state 60
    CreateFuncScope                shift and go to state 71

state 377

    (215) TypeRep -> TypeRep COMMA Type .

    COMMA           reduce using rule 215 (TypeRep -> TypeRep COMMA Type .)
    COLON           reduce using rule 215 (TypeRep -> TypeRep COMMA Type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOG_OR in state 202 resolved as shift
WARNING: shift/reduce conflict for LOG_AND in state 202 resolved as shift
WARNING: shift/reduce conflict for EQ in state 202 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 202 resolved as shift
WARNING: shift/reduce conflict for LT in state 202 resolved as shift
WARNING: shift/reduce conflict for GT in state 202 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 202 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 202 resolved as shift
WARNING: shift/reduce conflict for OR in state 202 resolved as shift
WARNING: shift/reduce conflict for XOR in state 202 resolved as shift
WARNING: shift/reduce conflict for DIV in state 202 resolved as shift
WARNING: shift/reduce conflict for MOD in state 202 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 202 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 202 resolved as shift
WARNING: shift/reduce conflict for ADD in state 202 resolved as shift
WARNING: shift/reduce conflict for SUB in state 202 resolved as shift
WARNING: shift/reduce conflict for MULT in state 202 resolved as shift
WARNING: shift/reduce conflict for AND in state 202 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 250 resolved as shift
WARNING: shift/reduce conflict for LEFT_PARANTHESIS in state 250 resolved as shift
WARNING: shift/reduce conflict for TYPECAST in state 250 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 295 resolved as shift
WARNING: reduce/reduce conflict in state 250 resolved using rule (I -> <empty>)
WARNING: rejected rule (epsilon -> <empty>) in state 250
WARNING: reduce/reduce conflict in state 250 resolved using rule (F -> <empty>)
WARNING: rejected rule (epsilon -> <empty>) in state 250
WARNING: reduce/reduce conflict in state 250 resolved using rule (C -> <empty>)
WARNING: rejected rule (epsilon -> <empty>) in state 250
WARNING: reduce/reduce conflict in state 250 resolved using rule (S -> <empty>)
WARNING: rejected rule (epsilon -> <empty>) in state 250
