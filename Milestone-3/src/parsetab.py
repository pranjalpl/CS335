
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLOG_ORleftLOG_ANDleftORleftXORleftANDleftEQNEQleftLTGTLEQGEQleftLSHIFTRSHIFTleftADDSUBleftMULTDIVMODADD AND AND_ASSIGN ASSIGN BOOL_T BREAK CASE COLON COMMA COMPLEX_T CONST CONTINUE DEC DEFAULT DIV DIV_ASSIGN DOT ELSE EQ FLOAT FLOAT_T FOR FUNC GEQ GOTO GT HEX IDENTIFIER IF IMAGINARY IMPORT INC INTEGER INT_T LEFT_BRACES LEFT_BRACKET LEFT_PARANTHESIS LEQ LOG_AND LOG_OR LSHIFT LSHIFT_ASSIGN LT MINUS_ASSIGN MOD MOD_ASSIGN MULT MULT_ASSIGN NEQ NOT OCTAL OR OR_ASSIGN PACKAGE PLUS_ASSIGN PRINT QUICK_ASSIGN RANGE RETURN RIGHT_BRACES RIGHT_BRACKET RIGHT_PARANTHESIS RSHIFT RSHIFT_ASSIGN RUNE RUNE_T SCAN SEMICOLON STRING STRING_T STRUCT SUB SWITCH TYPE TYPECAST UINT_T VAR XOR XOR_ASSIGNstart : SourceFileType : TypeName\n            | TypeLit\n            | LEFT_PARANTHESIS Type RIGHT_PARANTHESISTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT_T\n                 | FLOAT_T\n                 | UINT_T\n                 | COMPLEX_T\n                 | RUNE_T\n                 | BOOL_T\n                 | STRING_T\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | StructType\n               | PointerTypeTypeOpt : Type\n               | epsilonArrayType : LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementTypeArrayLength :  I INTEGER\n                    | I OCTAL\n                    | I HEX\n                    | I RUNE ElementType : Type StructType : CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                    | epsilon  FieldDecl : IdentifierList Type TagOpt : Tag\n                | epsilon  Tag : STRING PointerType : MULT BaseTypeBaseType : TypeSignature : Parameters TypeOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESISParameterListOpt : ParametersList\n                             | epsilonParametersList : ParameterDecl\n                      | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                             | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LEFT_BRACES StatementList RIGHT_BRACESStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                    | TypeDecl\n                    | VarDeclTopLevelDecl : Declaration\n                    | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESISConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList Type ASSIGN ExpressionListTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESISTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESISVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER QUICK_ASSIGN Expression FunctionDecl : FUNC FunctionName CreateScope Function EndScope\n                    | FUNC FunctionName CreateScope Signature EndScopeCreateFuncScope : CreateScope : EndScope : FunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockOperand : Literal\n               | OperandName\n               | LEFT_PARANTHESIS Expression RIGHT_PARANTHESISLiteral : BasicLitBasicLit : I INTEGER\n                | I OCTAL\n                | I HEX\n                | F FLOAT\n                | C IMAGINARY\n                | I RUNE\n                | S STRING I :  F :  C :  S : OperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNamePrimaryExpr : Operand\n                   | PrimaryExpr Selector\n                   | Conversion\n                   | PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET\n                   | PrimaryExpr Slice\n                   | PrimaryExpr TypeAssertion\n                   | PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESISSelector : DOT IDENTIFIERIndex : LEFT_BRACKET Expression RIGHT_BRACKETSlice : LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET\n             | LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKETTypeAssertion : DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESISExpressionListTypeOpt : ExpressionList\n                             | epsilonExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprBinaryOp : LOG_OR\n                | LOG_AND\n                | RelOp\n                | AddMulOpRelOp : EQ\n             | NEQ\n             | LT\n             | GT\n             | LEQ\n             | GEQAddMulOp : UnaryOp\n                | OR\n                | XOR\n                | DIV\n                | MOD\n                | LSHIFT\n                | RSHIFTUnaryOp : ADD\n               | SUB\n               | MULT\n               | AND Conversion : TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESISStatement : Declaration\n                 | LabeledStmt\n                 | SimpleStmt\n                 | ReturnStmt\n                 | CreateScope Block EndScope\n                 | ScanStmt\n                 | BreakStmt\n                 | ContinueStmt\n                 | GotoStmt\n                 | PrintStmt\n                 | IfStmt\n                 | SwitchStmt\n                 | ForStmt  PrintStmt : PRINT Expression  ScanStmt : SCAN Expression  SimpleStmt : epsilon\n                    | ExpressionStmt\n                    | IncDecStmt\n                    | Assignment\n                    | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INC\n                    | Expression DEC  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUS_ASSIGN\n                 | MINUS_ASSIGN\n                 | MULT_ASSIGN\n                 | DIV_ASSIGN\n                 | MOD_ASSIGN\n                 | AND_ASSIGN\n                 | OR_ASSIGN\n                 | XOR_ASSIGN\n                 | LSHIFT_ASSIGN\n                 | RSHIFT_ASSIGN\n                 | ASSIGN  IfStmt : IF Expression CreateScope Block EndScope ElseOpt SimpleStmtOpt : SimpleStmt SEMICOLON\n                        | epsilon  ElseOpt : ELSE IfStmt\n                | ELSE CreateScope Block EndScope\n                | epsilon  SwitchStmt : ExprSwitchStmt\n                    | TypeSwitchStmt  ExprSwitchStmt : SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES StartSwitch :  ExprCaseClauseRep : ExprCaseClauseRep ExprCaseClause\n                            | epsilon ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                        | DEFAULT  TypeSwitchStmt : SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES TypeSwitchGuard : IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS  IdentifierOpt : IDENTIFIER QUICK_ASSIGN\n                      | epsilon  TypeCaseClauseOpt : TypeCaseClauseOpt TypeCaseClause\n                          | epsilon  TypeCaseClause : TypeSwitchCase COLON StatementList TypeSwitchCase : CASE TypeList\n                       | DEFAULT  TypeList : Type TypeRep TypeRep : TypeRep COMMA Type\n                | epsilon ForStmt : FOR CreateScope ConditionBlockOpt Block EndScopeConditionBlockOpt : epsilon\n                | Condition\n                | ForClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n            | Condition ExpressionIdentListOpt : epsilon\n               | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n                            | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n            | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n            | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                        | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n            | IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n                | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                            | PackageName\n                            | epsilon ImportPath : STRING epsilon : '
    
_lr_action_items = {'PACKAGE':([0,],[4,]),'$end':([1,2,5,8,9,10,12,24,31,],[0,-1,-255,-255,-240,-239,-243,-241,-242,]),'SEMICOLON':([3,6,7,11,14,15,16,17,18,19,25,34,38,40,42,47,48,53,54,56,57,58,59,60,61,62,63,64,65,66,67,77,80,82,83,84,85,86,88,89,92,97,98,100,101,102,103,104,106,107,108,109,110,113,114,120,121,123,124,130,131,132,133,134,135,136,137,147,148,149,159,160,162,180,182,183,186,187,190,191,192,193,194,195,196,198,199,200,204,205,209,216,218,220,221,222,223,224,225,227,228,229,230,231,232,233,234,236,237,238,239,240,241,243,244,245,249,250,251,252,254,257,258,260,261,263,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,283,300,301,302,303,304,306,309,310,311,312,315,318,319,320,321,328,330,331,332,339,340,341,342,343,344,345,353,354,356,358,360,366,370,374,379,],[5,-244,-245,24,31,-56,-57,-53,-54,-55,-246,-58,-71,-75,-78,-250,-254,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-77,-255,-247,129,-91,-91,-255,-59,146,-14,-33,-34,-72,157,-79,158,-82,-85,-83,-255,-126,-130,-112,-114,-95,-96,-98,-110,-87,-88,-93,-94,-255,-35,-18,-19,-62,-4,-111,-84,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-255,-52,-40,-20,-25,-127,-119,-97,-49,266,-155,-156,-157,-158,-160,-161,-162,-163,-164,-165,-166,-167,-170,-171,-172,-173,-174,-255,-177,-255,-255,-199,-200,-90,-110,-255,-91,305,-69,-115,-118,-51,-91,-255,-231,-232,-233,-169,-178,-179,-234,-236,-237,-176,-235,-238,-168,-255,-177,-170,327,-110,-26,-29,-123,-154,-159,-175,-170,-177,332,-86,-180,-121,-91,-91,-255,-255,-220,357,-226,-227,-224,-201,-122,-193,-198,-255,-208,-196,-255,-91,-197,]),'IDENTIFIER':([4,13,20,21,22,23,26,35,36,37,39,41,43,44,45,46,50,51,55,68,72,73,74,75,76,78,79,81,86,87,90,93,99,105,111,112,115,116,117,118,119,122,129,134,143,145,146,150,155,156,157,158,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,185,198,199,200,201,202,206,207,208,217,219,241,242,244,245,246,247,248,251,254,259,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,305,324,326,327,329,332,337,348,352,357,358,363,365,370,373,380,],[7,7,33,37,41,37,-255,-255,69,-255,-255,69,-255,69,7,-249,37,-61,69,92,69,-65,-67,41,-74,37,-81,124,69,145,124,69,156,124,124,124,124,-150,-151,-152,-153,69,-248,-255,69,-255,-60,69,-255,-66,-73,-80,124,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,124,124,216,252,-52,-40,145,145,37,-28,124,69,124,124,124,278,278,278,124,124,-90,303,69,124,-51,252,303,124,124,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,325,-195,-27,124,-211,-194,124,124,-210,124,216,303,-255,69,69,-255,92,69,]),'IMPORT':([5,8,9,24,],[-255,13,-240,-241,]),'FUNC':([5,8,9,10,12,24,31,],[-255,-255,-240,20,-243,-241,-242,]),'CONST':([5,8,9,10,12,24,31,134,198,199,266,268,358,370,],[-255,-255,-240,21,-243,-241,-242,-255,21,-52,-51,21,-255,-255,]),'TYPE':([5,8,9,10,12,24,31,36,37,41,44,55,72,73,74,86,87,93,122,134,143,145,150,156,198,199,200,201,202,217,259,266,268,358,363,365,370,380,],[-255,-255,-240,22,-243,-241,-242,68,-255,68,68,68,68,-65,-67,68,68,68,68,-255,68,-255,68,-66,22,-52,-40,68,68,68,68,-51,22,-255,68,373,-255,68,]),'VAR':([5,8,9,10,12,24,31,134,198,199,266,268,358,370,],[-255,-255,-240,23,-243,-241,-242,-255,23,-52,-51,23,-255,-255,]),'STRING':([7,13,26,27,28,29,30,45,46,81,90,105,111,112,115,116,117,118,119,128,129,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,324,326,327,329,332,337,348,357,358,370,],[-245,-255,-255,48,-251,-252,-253,-255,-249,-109,-109,-109,-109,-109,-109,-150,-151,-152,-153,196,-248,-255,-109,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-109,-109,-109,-52,-109,-109,-109,-109,-109,-109,-90,-109,-109,-51,-109,-109,-109,-109,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,-109,-211,-194,-109,-109,-210,-109,-109,-255,-255,]),'LEFT_PARANTHESIS':([13,21,22,23,32,33,36,37,41,44,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,74,81,86,87,90,92,97,98,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,134,143,145,148,149,150,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,189,190,191,192,193,194,195,196,198,199,200,201,202,204,205,208,216,217,218,219,241,242,247,248,251,252,254,257,259,261,262,263,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,303,304,309,310,324,326,327,328,329,332,336,337,348,352,353,357,358,363,365,370,380,],[26,35,39,43,-90,-92,55,-255,55,55,87,-2,-3,55,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,55,-65,-67,115,55,55,115,-14,-33,-34,115,184,115,115,-112,-114,115,-150,-151,-152,-153,-95,-96,55,-98,-110,-255,55,-255,-4,-111,55,-66,115,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-113,115,-116,-117,115,217,219,-99,-100,-101,-104,-102,-103,-105,115,-52,-40,55,55,-20,-25,115,-119,55,-97,115,115,115,115,115,-90,-110,115,-91,55,-115,115,-118,-51,115,115,115,115,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,-110,-26,-123,-154,115,-211,-194,-121,115,115,184,-210,115,365,-122,115,-255,55,55,-255,55,]),'DOT':([13,26,45,46,69,110,113,114,120,121,123,124,129,145,180,182,183,190,191,192,193,194,195,196,216,218,252,261,263,303,309,310,328,336,353,],[28,-255,28,-249,93,185,-112,-114,-95,-96,-98,-110,-248,93,-113,-116,-117,-99,-100,-101,-104,-102,-103,-105,-119,-97,-110,-115,-118,-110,-123,-154,-121,352,-122,]),'RIGHT_PARANTHESIS':([26,35,39,43,45,46,50,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,75,76,78,79,87,91,92,97,98,108,109,110,113,114,120,121,123,124,129,138,139,140,141,142,144,146,148,149,157,158,160,162,180,182,183,184,186,187,188,190,191,192,193,194,195,196,203,204,205,209,213,214,215,216,218,255,256,257,260,261,263,264,265,304,309,310,328,353,373,],[-255,-255,-255,-255,82,-249,88,-61,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,100,-74,102,-81,-255,148,-14,-33,-34,-255,-126,-130,-112,-114,-95,-96,-98,-110,-248,200,-41,-42,-43,-44,-48,-60,-4,-111,-73,-80,-68,-70,-113,-116,-117,-255,-131,-132,218,-99,-100,-101,-104,-102,-103,-105,-47,-20,-25,-127,263,-124,-125,-119,-97,-46,-45,-91,-69,-115,-118,309,310,-26,-123,-154,-121,-122,378,]),'INT_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,200,201,202,217,259,363,365,380,],[61,-255,61,61,61,61,-65,-67,61,61,61,61,61,-255,61,-66,-40,61,61,61,61,61,61,61,]),'FLOAT_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,200,201,202,217,259,363,365,380,],[62,-255,62,62,62,62,-65,-67,62,62,62,62,62,-255,62,-66,-40,62,62,62,62,62,62,62,]),'UINT_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,200,201,202,217,259,363,365,380,],[63,-255,63,63,63,63,-65,-67,63,63,63,63,63,-255,63,-66,-40,63,63,63,63,63,63,63,]),'COMPLEX_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,200,201,202,217,259,363,365,380,],[64,-255,64,64,64,64,-65,-67,64,64,64,64,64,-255,64,-66,-40,64,64,64,64,64,64,64,]),'RUNE_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,200,201,202,217,259,363,365,380,],[65,-255,65,65,65,65,-65,-67,65,65,65,65,65,-255,65,-66,-40,65,65,65,65,65,65,65,]),'BOOL_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,200,201,202,217,259,363,365,380,],[66,-255,66,66,66,66,-65,-67,66,66,66,66,66,-255,66,-66,-40,66,66,66,66,66,66,66,]),'STRING_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,200,201,202,217,259,363,365,380,],[67,-255,67,67,67,67,-65,-67,67,67,67,67,67,-255,67,-66,-40,67,67,67,67,67,67,67,]),'LEFT_BRACKET':([36,37,41,44,55,72,73,74,86,87,110,113,114,120,121,122,123,124,143,145,150,156,180,182,183,190,191,192,193,194,195,196,200,201,202,216,217,218,252,259,261,263,303,309,310,328,336,353,363,365,380,],[70,-255,70,70,70,70,-65,-67,70,70,181,-112,-114,-95,-96,70,-98,-110,70,-255,70,-66,-113,-116,-117,-99,-100,-101,-104,-102,-103,-105,-40,70,70,-119,70,-97,-110,70,-115,-118,-110,-123,-154,-121,181,-122,70,70,70,]),'MULT':([36,37,41,44,55,72,73,74,81,86,87,90,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,134,143,145,150,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,188,190,191,192,193,194,195,196,198,199,200,201,202,208,209,210,216,217,218,219,241,242,243,247,248,251,252,254,259,260,261,262,263,265,266,268,272,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,300,303,308,309,310,318,320,328,329,332,338,344,348,353,357,358,363,365,370,380,],[72,-255,72,72,72,72,-65,-67,118,72,72,118,118,118,-126,-130,118,118,-112,-114,118,-150,-151,-152,-153,-95,-96,72,-98,-110,-255,72,-255,72,-66,118,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-113,118,-116,-117,118,-131,-132,118,-99,-100,-101,-104,-102,-103,-105,118,-52,-40,72,72,118,118,118,-119,72,-97,118,118,118,118,118,118,-90,-110,118,72,118,-115,118,-118,118,-51,118,118,118,118,118,118,118,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,118,-110,118,-123,-154,118,118,-121,118,118,118,118,118,-122,118,-255,72,72,-255,72,]),'STRUCT':([36,37,41,44,55,71,72,73,74,86,87,122,143,145,150,156,200,201,202,217,259,363,365,380,],[-89,-255,-89,-89,-89,96,-89,-65,-67,-89,-89,-89,-89,-255,-89,-66,-40,-89,-89,-89,-89,-89,-89,-89,]),'COMMA':([37,53,54,56,57,58,59,60,61,62,63,64,65,66,67,73,74,92,97,98,108,109,110,113,114,120,121,123,124,141,142,144,145,148,149,156,160,162,180,182,183,186,187,190,191,192,193,194,195,196,203,204,205,209,216,218,243,252,255,256,257,260,261,263,300,303,304,309,310,318,328,353,372,376,377,381,],[-255,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,99,-67,-14,-33,-34,-255,-126,-130,-112,-114,-95,-96,-98,-110,201,202,-48,-255,-4,-111,-66,208,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-47,-20,-25,-127,-119,-97,-255,-110,-46,-45,-91,-69,-115,-118,-255,-110,-26,-123,-154,-255,-121,-122,-255,380,-219,-218,]),'ASSIGN':([37,44,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,73,74,80,92,97,98,109,110,113,114,120,121,123,124,148,149,156,160,162,180,182,183,186,187,190,191,192,193,194,195,196,204,205,209,216,218,243,252,253,257,260,261,263,300,303,304,309,310,318,328,353,],[-255,81,90,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-65,-67,105,-14,-33,-34,-126,-130,-112,-114,-95,-96,-98,-110,-4,-111,-66,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-20,-25,-127,-119,-97,-255,-110,297,-91,-69,-115,-118,-255,-110,-26,-123,-154,-255,-121,-122,]),'LEFT_BRACES':([53,54,56,57,58,59,60,61,62,63,64,65,66,67,85,86,92,96,97,98,108,109,110,113,114,120,121,123,124,134,135,136,137,148,149,160,162,180,182,183,186,187,190,191,192,193,194,195,196,198,199,200,204,205,209,216,218,226,236,237,238,239,240,243,251,254,257,260,261,263,266,268,273,274,282,283,298,300,301,303,304,309,310,313,314,315,316,317,318,320,321,323,328,353,355,357,358,367,368,370,378,],[-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,134,-255,-14,155,-33,-34,-255,-126,-130,-112,-114,-95,-96,-98,-110,-255,-35,-18,-19,-4,-111,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-90,-52,-40,-20,-25,-127,-119,-97,134,-170,-171,-172,-173,-174,-177,-90,-255,-91,-69,-115,-118,-51,-90,-178,-179,-90,-255,322,-128,-129,-110,-26,-123,-154,134,134,-221,-222,-223,-224,-86,-180,335,-121,-122,-90,-255,-255,134,-225,-255,-209,]),'COLON':([53,54,56,57,58,59,60,61,62,63,64,65,66,67,92,97,98,108,109,110,113,114,120,121,123,124,148,149,160,162,180,181,182,183,186,187,190,191,192,193,194,195,196,204,205,209,210,211,212,216,218,235,252,257,260,261,263,304,308,309,310,328,347,349,353,359,362,364,371,372,376,377,381,],[-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-14,-33,-34,-255,-126,-130,-112,-114,-95,-96,-98,-110,-4,-111,-68,-70,-113,-255,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-20,-25,-127,-128,262,-129,-119,-97,268,-176,-91,-69,-115,-118,-26,329,-123,-154,-121,358,-207,-122,-206,370,-216,-215,-255,-217,-219,-218,]),'INTEGER':([70,81,90,95,105,111,112,115,116,117,118,119,125,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,324,326,327,329,332,337,348,357,358,370,],[-106,-106,-106,151,-106,-106,-106,-106,-150,-151,-152,-153,190,-255,-106,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-106,-106,-106,-52,-106,-106,-106,-106,-106,-106,-90,-106,-106,-51,-106,-106,-106,-106,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,-106,-211,-194,-106,-106,-210,-106,-106,-255,-255,]),'OCTAL':([70,81,90,95,105,111,112,115,116,117,118,119,125,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,324,326,327,329,332,337,348,357,358,370,],[-106,-106,-106,152,-106,-106,-106,-106,-150,-151,-152,-153,191,-255,-106,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-106,-106,-106,-52,-106,-106,-106,-106,-106,-106,-90,-106,-106,-51,-106,-106,-106,-106,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,-106,-211,-194,-106,-106,-210,-106,-106,-255,-255,]),'HEX':([70,81,90,95,105,111,112,115,116,117,118,119,125,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,324,326,327,329,332,337,348,357,358,370,],[-106,-106,-106,153,-106,-106,-106,-106,-150,-151,-152,-153,192,-255,-106,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-106,-106,-106,-52,-106,-106,-106,-106,-106,-106,-90,-106,-106,-51,-106,-106,-106,-106,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,-106,-211,-194,-106,-106,-210,-106,-106,-255,-255,]),'RUNE':([70,81,90,95,105,111,112,115,116,117,118,119,125,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,324,326,327,329,332,337,348,357,358,370,],[-106,-106,-106,154,-106,-106,-106,-106,-150,-151,-152,-153,193,-255,-106,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-106,-106,-106,-52,-106,-106,-106,-106,-106,-106,-90,-106,-106,-51,-106,-106,-106,-106,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,-106,-211,-194,-106,-106,-210,-106,-106,-255,-255,]),'NOT':([81,90,105,111,112,115,116,117,118,119,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,329,332,348,357,358,370,],[112,112,112,112,112,112,-150,-151,-152,-153,-255,112,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,112,112,112,-52,112,112,112,112,112,112,-90,112,112,-51,112,112,112,112,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,112,112,112,112,-255,-255,]),'ADD':([81,90,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,188,190,191,192,193,194,195,196,198,199,208,209,210,216,218,219,241,242,243,247,248,251,252,254,260,261,262,263,265,266,268,272,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,300,303,308,309,310,318,320,328,329,332,338,344,348,353,357,358,370,],[116,116,116,116,-126,-130,116,116,-112,-114,116,-150,-151,-152,-153,-95,-96,-98,-110,-255,116,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-113,116,-116,-117,116,-131,-132,116,-99,-100,-101,-104,-102,-103,-105,116,-52,116,116,116,-119,-97,116,116,116,116,116,116,-90,-110,116,116,-115,116,-118,116,-51,116,116,116,116,116,116,116,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,116,-110,116,-123,-154,116,116,-121,116,116,116,116,116,-122,116,-255,-255,]),'SUB':([81,90,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,188,190,191,192,193,194,195,196,198,199,208,209,210,216,218,219,241,242,243,247,248,251,252,254,260,261,262,263,265,266,268,272,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,300,303,308,309,310,318,320,328,329,332,338,344,348,353,357,358,370,],[117,117,117,117,-126,-130,117,117,-112,-114,117,-150,-151,-152,-153,-95,-96,-98,-110,-255,117,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-113,117,-116,-117,117,-131,-132,117,-99,-100,-101,-104,-102,-103,-105,117,-52,117,117,117,-119,-97,117,117,117,117,117,117,-90,-110,117,117,-115,117,-118,117,-51,117,117,117,117,117,117,117,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,117,-110,117,-123,-154,117,117,-121,117,117,117,117,117,-122,117,-255,-255,]),'AND':([81,90,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,188,190,191,192,193,194,195,196,198,199,208,209,210,216,218,219,241,242,243,247,248,251,252,254,260,261,262,263,265,266,268,272,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,300,303,308,309,310,318,320,328,329,332,338,344,348,353,357,358,370,],[119,119,119,119,-126,-130,119,119,-112,-114,119,-150,-151,-152,-153,-95,-96,-98,-110,-255,119,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-113,119,-116,-117,119,-131,-132,119,-99,-100,-101,-104,-102,-103,-105,119,-52,119,119,119,-119,-97,119,119,119,119,119,119,-90,-110,119,119,-115,119,-118,119,-51,119,119,119,119,119,119,119,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,119,-110,119,-123,-154,119,119,-121,119,119,119,119,119,-122,119,-255,-255,]),'TYPECAST':([81,90,105,111,112,115,116,117,118,119,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,324,326,327,329,332,337,348,357,358,370,],[122,122,122,122,122,122,-150,-151,-152,-153,-255,122,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,122,122,122,-52,122,122,122,122,122,122,-90,122,122,-51,122,122,122,122,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,122,-211,-194,122,122,-210,122,122,-255,-255,]),'FLOAT':([81,90,105,111,112,115,116,117,118,119,126,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,324,326,327,329,332,337,348,357,358,370,],[-107,-107,-107,-107,-107,-107,-150,-151,-152,-153,194,-255,-107,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-107,-107,-107,-52,-107,-107,-107,-107,-107,-107,-90,-107,-107,-51,-107,-107,-107,-107,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,-107,-211,-194,-107,-107,-210,-107,-107,-255,-255,]),'IMAGINARY':([81,90,105,111,112,115,116,117,118,119,127,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,184,198,199,208,219,241,242,247,248,251,254,262,266,268,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,301,324,326,327,329,332,337,348,357,358,370,],[-108,-108,-108,-108,-108,-108,-150,-151,-152,-153,195,-255,-108,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-108,-108,-108,-52,-108,-108,-108,-108,-108,-108,-90,-108,-108,-51,-108,-108,-108,-108,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-255,-195,-108,-211,-194,-108,-108,-210,-108,-108,-255,-255,]),'RIGHT_BRACKET':([94,109,110,113,114,120,121,123,124,151,152,153,154,180,182,183,186,187,190,191,192,193,194,195,196,209,210,212,216,218,261,262,263,307,308,309,310,328,338,353,],[150,-126,-130,-112,-114,-95,-96,-98,-110,-21,-22,-23,-24,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,261,-129,-119,-97,-115,-255,-118,328,-128,-123,-154,-121,353,-122,]),'LOG_OR':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[163,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,163,-99,-100,-101,-104,-102,-103,-105,163,163,-119,-97,163,-110,163,-115,-118,163,163,163,163,163,-110,163,-123,-154,163,163,-121,163,163,-122,]),'LOG_AND':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[164,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,164,-99,-100,-101,-104,-102,-103,-105,164,164,-119,-97,164,-110,164,-115,-118,164,164,164,164,164,-110,164,-123,-154,164,164,-121,164,164,-122,]),'EQ':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[167,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,167,-99,-100,-101,-104,-102,-103,-105,167,167,-119,-97,167,-110,167,-115,-118,167,167,167,167,167,-110,167,-123,-154,167,167,-121,167,167,-122,]),'NEQ':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[168,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,168,-99,-100,-101,-104,-102,-103,-105,168,168,-119,-97,168,-110,168,-115,-118,168,168,168,168,168,-110,168,-123,-154,168,168,-121,168,168,-122,]),'LT':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[169,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,169,-99,-100,-101,-104,-102,-103,-105,169,169,-119,-97,169,-110,169,-115,-118,169,169,169,169,169,-110,169,-123,-154,169,169,-121,169,169,-122,]),'GT':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[170,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,170,-99,-100,-101,-104,-102,-103,-105,170,170,-119,-97,170,-110,170,-115,-118,170,170,170,170,170,-110,170,-123,-154,170,170,-121,170,170,-122,]),'LEQ':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[171,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,171,-99,-100,-101,-104,-102,-103,-105,171,171,-119,-97,171,-110,171,-115,-118,171,171,171,171,171,-110,171,-123,-154,171,171,-121,171,171,-122,]),'GEQ':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[172,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,172,-99,-100,-101,-104,-102,-103,-105,172,172,-119,-97,172,-110,172,-115,-118,172,172,172,172,172,-110,172,-123,-154,172,172,-121,172,172,-122,]),'OR':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[174,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,174,-99,-100,-101,-104,-102,-103,-105,174,174,-119,-97,174,-110,174,-115,-118,174,174,174,174,174,-110,174,-123,-154,174,174,-121,174,174,-122,]),'XOR':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[175,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,175,-99,-100,-101,-104,-102,-103,-105,175,175,-119,-97,175,-110,175,-115,-118,175,175,175,175,175,-110,175,-123,-154,175,175,-121,175,175,-122,]),'DIV':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[176,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,176,-99,-100,-101,-104,-102,-103,-105,176,176,-119,-97,176,-110,176,-115,-118,176,176,176,176,176,-110,176,-123,-154,176,176,-121,176,176,-122,]),'MOD':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[177,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,177,-99,-100,-101,-104,-102,-103,-105,177,177,-119,-97,177,-110,177,-115,-118,177,177,177,177,177,-110,177,-123,-154,177,177,-121,177,177,-122,]),'LSHIFT':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[178,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,178,-99,-100,-101,-104,-102,-103,-105,178,178,-119,-97,178,-110,178,-115,-118,178,178,178,178,178,-110,178,-123,-154,178,178,-121,178,178,-122,]),'RSHIFT':([108,109,110,113,114,120,121,123,124,180,182,183,186,187,188,190,191,192,193,194,195,196,209,210,216,218,243,252,260,261,263,265,272,281,282,300,303,308,309,310,318,320,328,338,344,353,],[179,-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,179,-99,-100,-101,-104,-102,-103,-105,179,179,-119,-97,179,-110,179,-115,-118,179,179,179,179,179,-110,179,-123,-154,179,179,-121,179,179,-122,]),'INC':([109,110,113,114,120,121,123,124,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,273,-110,-115,-118,273,-110,-123,-154,273,-121,-122,]),'DEC':([109,110,113,114,120,121,123,124,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,274,-110,-115,-118,274,-110,-123,-154,274,-121,-122,]),'PLUS_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,287,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'MINUS_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,288,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'MULT_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,289,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'DIV_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,290,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'MOD_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,291,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'AND_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,292,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'OR_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,293,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'XOR_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,294,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'LSHIFT_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,295,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'RSHIFT_ASSIGN':([109,110,113,114,120,121,123,124,160,162,180,182,183,186,187,190,191,192,193,194,195,196,209,216,218,243,252,253,260,261,263,300,303,309,310,318,328,353,],[-126,-130,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-131,-132,-99,-100,-101,-104,-102,-103,-105,-127,-119,-97,-255,-110,296,-69,-115,-118,-255,-110,-123,-154,-255,-121,-122,]),'RETURN':([134,198,199,266,268,358,370,],[-255,241,-52,-51,241,-255,-255,]),'SCAN':([134,198,199,266,268,358,370,],[-255,242,-52,-51,242,-255,-255,]),'BREAK':([134,198,199,266,268,358,370,],[-255,244,-52,-51,244,-255,-255,]),'CONTINUE':([134,198,199,266,268,358,370,],[-255,245,-52,-51,245,-255,-255,]),'GOTO':([134,198,199,266,268,358,370,],[-255,246,-52,-51,246,-255,-255,]),'PRINT':([134,198,199,266,268,358,370,],[-255,247,-52,-51,247,-255,-255,]),'IF':([134,198,199,266,268,355,358,370,],[-255,248,-52,-51,248,248,-255,-255,]),'FOR':([134,198,199,266,268,358,370,],[-255,251,-52,-51,251,-255,-255,]),'SWITCH':([134,198,199,266,268,358,370,],[-255,254,-52,-51,254,-255,-255,]),'RIGHT_BRACES':([134,155,197,198,199,206,207,266,305,322,333,334,335,346,350,351,358,361,369,370,375,],[-255,-255,220,-50,-52,257,-28,-51,-27,-255,345,-204,-255,-203,360,-213,-255,-212,-205,-255,-214,]),'CASE':([198,199,266,322,333,334,335,346,350,351,358,361,369,370,375,],[-50,-52,-51,-255,348,-204,-255,-203,363,-213,-255,-212,-205,-255,-214,]),'DEFAULT':([198,199,266,322,333,334,335,346,350,351,358,361,369,370,375,],[-50,-52,-51,-255,349,-204,-255,-203,364,-213,-255,-212,-205,-255,-214,]),'ELSE':([220,330,339,],[-49,-91,355,]),'QUICK_ASSIGN':([252,303,325,],[284,284,337,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'SourceFile':([0,],[2,]),'PackageClause':([0,],[3,]),'PackageName':([4,13,45,],[6,29,29,]),'ImportDeclRep':([5,],[8,]),'epsilon':([5,8,13,26,35,37,39,43,45,80,86,87,108,134,145,155,181,184,198,241,243,244,245,254,262,268,283,299,300,318,322,332,335,339,357,358,370,372,],[9,12,30,46,51,74,76,79,30,106,137,140,162,199,74,207,212,215,236,271,162,277,277,301,212,236,315,326,162,162,334,342,351,356,236,199,199,377,]),'TopLevelDeclRep':([8,],[10,]),'ImportDecl':([8,],[11,]),'TopLevelDecl':([10,],[14,]),'Declaration':([10,198,268,],[15,222,222,]),'FunctionDecl':([10,],[16,]),'ConstDecl':([10,198,268,],[17,17,17,]),'TypeDecl':([10,198,268,],[18,18,18,]),'VarDecl':([10,198,268,],[19,19,19,]),'ImportSpec':([13,45,],[25,83,]),'PackageNameDotOpt':([13,45,],[27,27,]),'FunctionName':([20,],[32,]),'ConstSpec':([21,50,],[34,89,]),'IdentifierList':([21,23,50,78,87,201,202,206,],[36,44,36,44,143,143,143,259,]),'TypeSpec':([22,75,],[38,101,]),'TypeDef':([22,75,],[40,40,]),'VarSpec':([23,78,],[42,103,]),'ImportSpecRep':([26,],[45,]),'ImportPath':([27,],[47,]),'CreateScope':([32,198,251,268,282,355,],[49,226,283,226,313,367,]),'ConstSpecRep':([35,],[50,]),'Type':([36,41,44,55,72,86,87,122,143,150,201,202,217,259,363,365,380,],[52,77,80,91,98,136,144,189,203,205,144,144,264,306,372,264,381,]),'TypeName':([36,41,44,55,72,86,87,93,122,143,150,201,202,217,259,363,365,380,],[53,53,53,53,53,53,53,149,53,53,53,53,53,53,53,53,53,53,]),'TypeLit':([36,41,44,55,72,86,87,122,143,150,201,202,217,259,363,365,380,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TypeToken':([36,41,44,55,72,86,87,93,122,143,150,201,202,217,259,363,365,380,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'QualifiedIdent':([36,41,44,55,72,86,87,93,122,143,150,201,202,217,259,363,365,380,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ArrayType':([36,41,44,55,72,86,87,122,143,150,201,202,217,259,363,365,380,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'StructType':([36,41,44,55,72,86,87,122,143,150,201,202,217,259,363,365,380,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'PointerType':([36,41,44,55,72,86,87,122,143,150,201,202,217,259,363,365,380,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CreateFuncScope':([36,41,44,55,72,86,87,122,143,150,201,202,217,259,363,365,380,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'IdentifierRep':([37,145,],[73,73,]),'TypeSpecRep':([39,],[75,]),'VarSpecRep':([43,],[78,]),'Function':([49,],[84,]),'Signature':([49,],[85,]),'Parameters':([49,],[86,]),'ArrayLength':([70,],[94,]),'I':([70,81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[95,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'BaseType':([72,],[97,]),'ExpressionListOpt':([80,],[104,]),'ExpressionList':([81,90,105,184,198,241,254,268,283,285,348,357,],[107,147,159,214,253,270,253,253,253,321,359,253,]),'Expression':([81,90,105,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,329,332,348,357,],[108,108,108,188,209,210,108,243,260,265,108,272,281,282,300,308,243,318,320,108,338,344,108,243,]),'UnaryExpr':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,329,332,348,357,],[109,109,109,186,187,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'PrimaryExpr':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,336,110,110,110,110,]),'UnaryOp':([81,90,105,108,111,112,115,161,181,184,188,198,208,209,210,219,241,242,243,247,248,254,260,262,265,268,272,281,282,283,284,285,300,308,318,320,329,332,338,344,348,357,],[111,111,111,173,111,111,111,111,111,111,173,111,111,173,173,111,111,111,173,111,111,111,173,111,173,111,173,173,173,111,111,111,173,173,173,173,111,111,173,173,111,111,]),'Operand':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'Conversion':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'Literal':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'OperandName':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'BasicLit':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'F':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'C':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'S':([81,90,105,111,112,115,161,181,184,198,208,219,241,242,247,248,254,262,268,283,284,285,324,329,332,348,357,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'EndScope':([84,85,257,267,330,331,374,],[130,131,304,311,339,340,379,]),'FunctionBody':([85,],[132,]),'Block':([85,226,313,314,367,],[133,267,330,331,374,]),'TypeOpt':([86,],[135,]),'ParameterListOpt':([87,],[138,]),'ParametersList':([87,],[139,]),'ParameterDecl':([87,201,202,],[141,255,256,]),'ParameterDeclCommaRep':([87,],[142,]),'ExpressionRep':([108,243,300,318,],[160,160,160,160,]),'BinaryOp':([108,188,209,210,243,260,265,272,281,282,300,308,318,320,338,344,],[161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,]),'RelOp':([108,188,209,210,243,260,265,272,281,282,300,308,318,320,338,344,],[165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,]),'AddMulOp':([108,188,209,210,243,260,265,272,281,282,300,308,318,320,338,344,],[166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,]),'Selector':([110,336,],[180,180,]),'Slice':([110,336,],[182,182,]),'TypeAssertion':([110,336,],[183,183,]),'StatementList':([134,358,370,],[197,369,375,]),'StatementRep':([134,358,370,],[198,198,198,]),'ElementType':([150,],[204,]),'FieldDeclRep':([155,],[206,]),'ExpressionOpt':([181,254,262,],[211,298,307,]),'ExpressionListTypeOpt':([184,],[213,]),'Statement':([198,268,],[221,312,]),'LabeledStmt':([198,268,],[223,223,]),'SimpleStmt':([198,254,268,283,357,],[224,302,224,319,368,]),'ReturnStmt':([198,268,],[225,225,]),'ScanStmt':([198,268,],[227,227,]),'BreakStmt':([198,268,],[228,228,]),'ContinueStmt':([198,268,],[229,229,]),'GotoStmt':([198,268,],[230,230,]),'PrintStmt':([198,268,],[231,231,]),'IfStmt':([198,268,355,],[232,232,366,]),'SwitchStmt':([198,268,],[233,233,]),'ForStmt':([198,268,],[234,234,]),'Label':([198,244,245,246,268,],[235,276,276,280,235,]),'ExpressionStmt':([198,254,268,283,357,],[237,237,237,237,237,]),'IncDecStmt':([198,254,268,283,357,],[238,238,238,238,238,]),'Assignment':([198,254,268,283,357,],[239,239,239,239,239,]),'ShortVarDecl':([198,254,268,283,357,],[240,240,240,240,240,]),'ExprSwitchStmt':([198,268,],[249,249,]),'TypeSwitchStmt':([198,268,],[250,250,]),'FieldDecl':([206,],[258,]),'ExpressionListPureOpt':([241,],[269,]),'LabelOpt':([244,245,],[275,279,]),'assign_op':([253,],[285,]),'AssignOp':([253,],[286,]),'SimpleStmtOpt':([254,],[299,]),'ConditionBlockOpt':([283,],[314,]),'Condition':([283,332,],[316,343,]),'ForClause':([283,],[317,]),'TypeSwitchGuard':([299,],[323,]),'IdentifierOpt':([299,],[324,]),'ExprCaseClauseRep':([322,],[333,]),'ConditionOpt':([332,],[341,]),'ExprCaseClause':([333,],[346,]),'ExprSwitchCase':([333,],[347,]),'TypeCaseClauseOpt':([335,],[350,]),'ElseOpt':([339,],[354,]),'TypeCaseClause':([350,],[361,]),'TypeSwitchCase':([350,],[362,]),'TypeList':([363,],[371,]),'TypeRep':([372,],[376,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',167),
  ('Type -> TypeName','Type',1,'p_type','parser.py',177),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',178),
  ('Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS','Type',3,'p_type','parser.py',179),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',189),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',190),
  ('TypeToken -> INT_T','TypeToken',1,'p_type_token','parser.py',197),
  ('TypeToken -> FLOAT_T','TypeToken',1,'p_type_token','parser.py',198),
  ('TypeToken -> UINT_T','TypeToken',1,'p_type_token','parser.py',199),
  ('TypeToken -> COMPLEX_T','TypeToken',1,'p_type_token','parser.py',200),
  ('TypeToken -> RUNE_T','TypeToken',1,'p_type_token','parser.py',201),
  ('TypeToken -> BOOL_T','TypeToken',1,'p_type_token','parser.py',202),
  ('TypeToken -> STRING_T','TypeToken',1,'p_type_token','parser.py',203),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',204),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',218),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',219),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',220),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',226),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',227),
  ('ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType','ArrayType',4,'p_array_type','parser.py',235),
  ('ArrayLength -> I INTEGER','ArrayLength',2,'p_array_length','parser.py',244),
  ('ArrayLength -> I OCTAL','ArrayLength',2,'p_array_length','parser.py',245),
  ('ArrayLength -> I HEX','ArrayLength',2,'p_array_length','parser.py',246),
  ('ArrayLength -> I RUNE','ArrayLength',2,'p_array_length','parser.py',247),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',253),
  ('StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope','StructType',6,'p_struct_type','parser.py',261),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',268),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',269),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',280),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','parser.py',288),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','parser.py',289),
  ('Tag -> STRING','Tag',1,'p_Tag','parser.py',295),
  ('PointerType -> MULT BaseType','PointerType',2,'p_point_type','parser.py',303),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',310),
  ('Signature -> Parameters TypeOpt','Signature',2,'p_sign','parser.py',318),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',339),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',340),
  ('Result -> Parameters','Result',1,'p_result','parser.py',348),
  ('Result -> Type','Result',1,'p_result','parser.py',349),
  ('Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS','Parameters',3,'p_params','parser.py',355),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_param_list_opt','parser.py',361),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_param_list_opt','parser.py',362),
  ('ParametersList -> ParameterDecl','ParametersList',1,'p_param_list','parser.py',368),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_param_list','parser.py',369),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',375),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',376),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',386),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',387),
  ('Block -> LEFT_BRACES StatementList RIGHT_BRACES','Block',3,'p_block','parser.py',402),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',408),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',414),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',415),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',427),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',428),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',429),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',435),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',436),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',444),
  ('ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS','ConstDecl',4,'p_const_decl','parser.py',445),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',454),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',455),
  ('ConstSpec -> IdentifierList Type ASSIGN ExpressionList','ConstSpec',4,'p_const_spec','parser.py',465),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',490),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',491),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',500),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',530),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',531),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',562),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',574),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',575),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',594),
  ('TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS','TypeDecl',4,'p_type_decl','parser.py',595),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',604),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',605),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',614),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',622),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',630),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',642),
  ('VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS','VarDecl',4,'p_var_decl','parser.py',643),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',652),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',653),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',663),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',664),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',724),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',725),
  ('ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',737),
  ('FunctionDecl -> FUNC FunctionName CreateScope Function EndScope','FunctionDecl',5,'p_func_decl','parser.py',754),
  ('FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope','FunctionDecl',5,'p_func_decl','parser.py',755),
  ('CreateFuncScope -> <empty>','CreateFuncScope',0,'p_create_func_scope','parser.py',775),
  ('CreateScope -> <empty>','CreateScope',0,'p_create_scope','parser.py',781),
  ('EndScope -> <empty>','EndScope',0,'p_delete_scope','parser.py',787),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',793),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',799),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',824),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',832),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',833),
  ('Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS','Operand',3,'p_operand','parser.py',834),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',843),
  ('BasicLit -> I INTEGER','BasicLit',2,'p_basic_lit','parser.py',851),
  ('BasicLit -> I OCTAL','BasicLit',2,'p_basic_lit','parser.py',852),
  ('BasicLit -> I HEX','BasicLit',2,'p_basic_lit','parser.py',853),
  ('BasicLit -> F FLOAT','BasicLit',2,'p_basic_lit','parser.py',854),
  ('BasicLit -> C IMAGINARY','BasicLit',2,'p_basic_lit','parser.py',855),
  ('BasicLit -> I RUNE','BasicLit',2,'p_basic_lit','parser.py',856),
  ('BasicLit -> S STRING','BasicLit',2,'p_basic_lit','parser.py',857),
  ('I -> <empty>','I',0,'p_I','parser.py',869),
  ('F -> <empty>','F',0,'p_F','parser.py',875),
  ('C -> <empty>','C',0,'p_C','parser.py',881),
  ('S -> <empty>','S',0,'p_S','parser.py',887),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',893),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_quali_ident','parser.py',915),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',939),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',940),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',941),
  ('PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET','PrimaryExpr',4,'p_prim_expr','parser.py',942),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',943),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',944),
  ('PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS','PrimaryExpr',4,'p_prim_expr','parser.py',945),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',1007),
  ('Index -> LEFT_BRACKET Expression RIGHT_BRACKET','Index',3,'p_index','parser.py',1030),
  ('Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET','Slice',5,'p_slice','parser.py',1036),
  ('Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET','Slice',7,'p_slice','parser.py',1037),
  ('TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS','TypeAssertion',4,'p_type_assert','parser.py',1046),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1052),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1053),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',1061),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',1062),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',1091),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',1092),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',1098),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1099),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1100),
  ('BinaryOp -> LOG_OR','BinaryOp',1,'p_binary_op','parser.py',1125),
  ('BinaryOp -> LOG_AND','BinaryOp',1,'p_binary_op','parser.py',1126),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',1127),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','parser.py',1128),
  ('RelOp -> EQ','RelOp',1,'p_rel_op','parser.py',1139),
  ('RelOp -> NEQ','RelOp',1,'p_rel_op','parser.py',1140),
  ('RelOp -> LT','RelOp',1,'p_rel_op','parser.py',1141),
  ('RelOp -> GT','RelOp',1,'p_rel_op','parser.py',1142),
  ('RelOp -> LEQ','RelOp',1,'p_rel_op','parser.py',1143),
  ('RelOp -> GEQ','RelOp',1,'p_rel_op','parser.py',1144),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','parser.py',1161),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','parser.py',1162),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','parser.py',1163),
  ('AddMulOp -> DIV','AddMulOp',1,'p_add_mul_op','parser.py',1164),
  ('AddMulOp -> MOD','AddMulOp',1,'p_add_mul_op','parser.py',1165),
  ('AddMulOp -> LSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',1166),
  ('AddMulOp -> RSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',1167),
  ('UnaryOp -> ADD','UnaryOp',1,'p_unary_op','parser.py',1186),
  ('UnaryOp -> SUB','UnaryOp',1,'p_unary_op','parser.py',1187),
  ('UnaryOp -> MULT','UnaryOp',1,'p_unary_op','parser.py',1188),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',1189),
  ('Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS','Conversion',5,'p_conversion','parser.py',1204),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',1213),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',1214),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',1215),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',1216),
  ('Statement -> CreateScope Block EndScope','Statement',3,'p_statement','parser.py',1217),
  ('Statement -> ScanStmt','Statement',1,'p_statement','parser.py',1218),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',1219),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',1220),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',1221),
  ('Statement -> PrintStmt','Statement',1,'p_statement','parser.py',1222),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',1223),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',1224),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',1225),
  ('PrintStmt -> PRINT Expression','PrintStmt',2,'p_print_stmt','parser.py',1234),
  ('ScanStmt -> SCAN Expression','ScanStmt',2,'p_scan_stmt','parser.py',1241),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',1248),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1249),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1250),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',1251),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',1252),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',1258),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',1278),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',1284),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_inc_dec','parser.py',1291),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_inc_dec','parser.py',1292),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',1300),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',1336),
  ('AssignOp -> PLUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1342),
  ('AssignOp -> MINUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1343),
  ('AssignOp -> MULT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1344),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1345),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1346),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1347),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1348),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1349),
  ('AssignOp -> LSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1350),
  ('AssignOp -> RSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1351),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1352),
  ('IfStmt -> IF Expression CreateScope Block EndScope ElseOpt','IfStmt',6,'p_if_statement','parser.py',1358),
  ('SimpleStmtOpt -> SimpleStmt SEMICOLON','SimpleStmtOpt',2,'p_SimpleStmtOpt','parser.py',1378),
  ('SimpleStmtOpt -> epsilon','SimpleStmtOpt',1,'p_SimpleStmtOpt','parser.py',1379),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',1388),
  ('ElseOpt -> ELSE CreateScope Block EndScope','ElseOpt',4,'p_else_opt','parser.py',1389),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',1390),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1403),
  ('SwitchStmt -> TypeSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1404),
  ('ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES','ExprSwitchStmt',5,'p_expr_switch_stmt','parser.py',1410),
  ('StartSwitch -> <empty>','StartSwitch',0,'p_start_switch','parser.py',1436),
  ('ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause','ExprCaseClauseRep',2,'p_expr_case_clause_rep','parser.py',1445),
  ('ExprCaseClauseRep -> epsilon','ExprCaseClauseRep',1,'p_expr_case_clause_rep','parser.py',1446),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','parser.py',1463),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_expr_switch_case','parser.py',1478),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','parser.py',1479),
  ('TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES','TypeSwitchStmt',6,'p_type_switch_stmt','parser.py',1493),
  ('TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS','TypeSwitchGuard',6,'p_type_switch_guard','parser.py',1499),
  ('IdentifierOpt -> IDENTIFIER QUICK_ASSIGN','IdentifierOpt',2,'p_identifier_opt','parser.py',1506),
  ('IdentifierOpt -> epsilon','IdentifierOpt',1,'p_identifier_opt','parser.py',1507),
  ('TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause','TypeCaseClauseOpt',2,'p_type_case_clause_opt','parser.py',1517),
  ('TypeCaseClauseOpt -> epsilon','TypeCaseClauseOpt',1,'p_type_case_clause_opt','parser.py',1518),
  ('TypeCaseClause -> TypeSwitchCase COLON StatementList','TypeCaseClause',3,'p_type_case_clause','parser.py',1527),
  ('TypeSwitchCase -> CASE TypeList','TypeSwitchCase',2,'p_type_switch_case','parser.py',1533),
  ('TypeSwitchCase -> DEFAULT','TypeSwitchCase',1,'p_type_switch_case','parser.py',1534),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','parser.py',1543),
  ('TypeRep -> TypeRep COMMA Type','TypeRep',3,'p_type_rep','parser.py',1549),
  ('TypeRep -> epsilon','TypeRep',1,'p_type_rep','parser.py',1550),
  ('ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope','ForStmt',5,'p_for','parser.py',1562),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1573),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1574),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1575),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',1583),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',1589),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',1610),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',1611),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',1617),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',1618),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',1623),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',1631),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1640),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1641),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',1646),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',1660),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',1674),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',1675),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',1680),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',1691),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',1698),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',1699),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',1708),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',1709),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',1720),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',1725),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',1737),
  ('ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS','ImportDecl',4,'p_import_decl','parser.py',1738),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',1746),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',1747),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',1756),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1765),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1766),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1767),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',1776),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',1783),
]
