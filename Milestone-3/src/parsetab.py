
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLOG_ORleftLOG_ANDleftORleftXORleftANDleftEQNEQleftLTGTLEQGEQleftLSHIFTRSHIFTleftADDSUBleftMULTDIVMODADD AND AND_ASSIGN ASSIGN BOOL_T BREAK CASE COLON COMMA COMPLEX_T CONST CONTINUE DEC DEFAULT DIV DIV_ASSIGN DOT ELSE EQ FLOAT FLOAT_T FOR FUNC GEQ GOTO GT HEX IDENTIFIER IF IMAGINARY IMPORT INC INTEGER INT_T LEFT_BRACES LEFT_BRACKET LEFT_PARANTHESIS LEQ LOG_AND LOG_OR LSHIFT LSHIFT_ASSIGN LT MALLOC MINUS_ASSIGN MOD MOD_ASSIGN MULT MULT_ASSIGN NEQ NOT OCTAL OR OR_ASSIGN PACKAGE PLUS_ASSIGN PRINT QUICK_ASSIGN RANGE RETURN RIGHT_BRACES RIGHT_BRACKET RIGHT_PARANTHESIS RSHIFT RSHIFT_ASSIGN RUNE RUNE_T SCAN SEMICOLON STRING STRING_T STRUCT SUB SWITCH TYPE TYPECAST UINT_T VAR XOR XOR_ASSIGNstart : SourceFileType : TypeName\n            | TypeLit\n            | LEFT_PARANTHESIS Type RIGHT_PARANTHESISTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT_T\n                 | FLOAT_T\n                 | UINT_T\n                 | COMPLEX_T\n                 | RUNE_T\n                 | BOOL_T\n                 | STRING_T\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | StructType\n               | PointerTypeTypeOpt : Type\n               | epsilonArrayType : LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementTypeArrayLength :  I INTEGER\n                    | I OCTAL\n                    | I HEX\n                    | I RUNE ElementType : Type StructType : CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                    | epsilon  FieldDecl : IdentifierList Type TagOpt : Tag\n                | epsilon  Tag : STRING PointerType : MULT BaseTypeBaseType : TypeSignature : Parameters TypeOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESISParameterListOpt : ParametersList\n                             | epsilonParametersList : ParameterDecl\n                      | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                             | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LEFT_BRACES StatementList RIGHT_BRACESStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                    | TypeDecl\n                    | VarDeclTopLevelDecl : Declaration\n                    | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESISConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList Type ASSIGN ExpressionListTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESISTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESISVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER QUICK_ASSIGN Expression FunctionDecl : FUNC FunctionName CreateScope Function EndScope\n                    | FUNC FunctionName CreateScope Signature EndScopeCreateFuncScope : CreateScope : EndScope : FunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockOperand : Literal\n               | OperandName\n               | LEFT_PARANTHESIS Expression RIGHT_PARANTHESISLiteral : BasicLitBasicLit : I INTEGER\n                | I OCTAL\n                | I HEX\n                | F FLOAT\n                | C IMAGINARY\n                | I RUNE\n                | S STRING I :  F :  C :  S : OperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNamePrimaryExpr : Operand\n                   | PrimaryExpr Selector\n                   | Conversion\n                   | PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET\n                   | PrimaryExpr Slice\n                   | PrimaryExpr TypeAssertion\n                   | PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS\n                   | MULT PrimaryExprSelector : DOT IDENTIFIERIndex : LEFT_BRACKET Expression RIGHT_BRACKETSlice : LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET\n             | LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKETTypeAssertion : DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESISExpressionListTypeOpt : ExpressionList\n                             | epsilonExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprBinaryOp : LOG_OR\n                | LOG_AND\n                | RelOp\n                | AddMulOpRelOp : EQ\n             | NEQ\n             | LT\n             | GT\n             | LEQ\n             | GEQAddMulOp : UnaryOp\n                | OR\n                | XOR\n                | DIV\n                | MOD\n                | LSHIFT\n                | RSHIFTUnaryOp : ADD\n               | SUB\n               | MULT\n               | AND Conversion : TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESISStatement : Declaration\n                 | LabeledStmt\n                 | SimpleStmt\n                 | ReturnStmt\n                 | CreateScope Block EndScope\n                 | ScanStmt\n                 | BreakStmt\n                 | ContinueStmt\n                 | GotoStmt\n                 | PrintStmt\n                 | IfStmt\n                 | SwitchStmt\n                 | MallocStmt\n                 | ForStmt  PrintStmt : PRINT Expression  ScanStmt : SCAN Expression  MallocStmt : MALLOC LEFT_PARANTHESIS Expression COMMA Expression RIGHT_PARANTHESIS  SimpleStmt : epsilon\n                    | ExpressionStmt\n                    | IncDecStmt\n                    | Assignment\n                    | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INC\n                    | Expression DEC  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUS_ASSIGN\n                 | MINUS_ASSIGN\n                 | MULT_ASSIGN\n                 | DIV_ASSIGN\n                 | MOD_ASSIGN\n                 | AND_ASSIGN\n                 | OR_ASSIGN\n                 | XOR_ASSIGN\n                 | LSHIFT_ASSIGN\n                 | RSHIFT_ASSIGN\n                 | ASSIGN  IfStmt : IF Expression CreateScope Block EndScope ElseOpt SimpleStmtOpt : SimpleStmt SEMICOLON\n                        | epsilon  ElseOpt : ELSE IfStmt\n                | ELSE CreateScope Block EndScope\n                | epsilon  SwitchStmt : ExprSwitchStmt\n                    | TypeSwitchStmt  ExprSwitchStmt : SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES StartSwitch :  ExprCaseClauseRep : ExprCaseClauseRep ExprCaseClause\n                            | epsilon ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                        | DEFAULT  TypeSwitchStmt : SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES TypeSwitchGuard : IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS  IdentifierOpt : IDENTIFIER QUICK_ASSIGN\n                      | epsilon  TypeCaseClauseOpt : TypeCaseClauseOpt TypeCaseClause\n                          | epsilon  TypeCaseClause : TypeSwitchCase COLON StatementList TypeSwitchCase : CASE TypeList\n                       | DEFAULT  TypeList : Type TypeRep TypeRep : TypeRep COMMA Type\n                | epsilon ForStmt : FOR CreateScope ConditionBlockOpt Block EndScopeConditionBlockOpt : epsilon\n                | Condition\n                | ForClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n            | Condition ExpressionIdentListOpt : epsilon\n               | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n                            | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n            | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n            | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                        | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n            | IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n                | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                            | PackageName\n                            | epsilon ImportPath : STRING epsilon : '
    
_lr_action_items = {'PACKAGE':([0,],[4,]),'$end':([1,2,5,8,9,10,12,24,31,],[0,-1,-258,-258,-243,-242,-246,-244,-245,]),'SEMICOLON':([3,6,7,11,14,15,16,17,18,19,25,34,38,40,42,47,48,53,54,56,57,58,59,60,61,62,63,64,65,66,67,77,80,82,83,84,85,86,88,89,92,97,98,100,101,102,103,104,106,107,108,109,110,113,114,120,121,123,124,130,131,132,133,134,135,136,137,147,148,149,159,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,201,202,203,207,208,212,219,221,223,224,225,226,227,228,230,231,232,233,234,235,236,237,238,240,241,242,243,244,245,247,248,249,253,254,256,257,259,262,263,265,266,268,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,289,306,307,308,309,310,312,315,316,317,318,322,325,326,327,328,335,337,339,340,347,349,350,351,352,353,354,362,363,365,366,368,370,376,380,384,389,],[5,-247,-248,24,31,-56,-57,-53,-54,-55,-249,-58,-71,-75,-78,-253,-257,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-77,-258,-250,129,-91,-91,-258,-59,146,-14,-33,-34,-72,157,-79,158,-82,-85,-83,-258,-127,-131,-112,-114,-95,-96,-98,-110,-87,-88,-93,-94,-258,-35,-18,-19,-62,-4,-111,-84,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-258,-52,-40,-20,-25,-128,-120,-97,-49,271,-156,-157,-158,-159,-161,-162,-163,-164,-165,-166,-167,-168,-169,-173,-174,-175,-176,-177,-258,-180,-258,-258,-202,-203,-90,-110,-258,-91,311,-69,-115,-118,-51,-91,-258,-234,-235,-236,-171,-181,-182,-237,-239,-240,-179,-238,-241,-170,-258,-180,-173,334,-110,-26,-29,-124,-155,-160,-178,-173,-180,340,-86,-183,-122,-91,-91,-258,-258,-223,367,-229,-230,-227,-204,-123,-196,-201,-172,-258,-211,-199,-258,-91,-200,]),'IDENTIFIER':([4,13,20,21,22,23,26,35,36,37,39,41,43,44,45,46,50,51,55,68,72,73,74,75,76,78,79,81,86,87,90,93,99,105,111,112,115,116,117,118,119,122,129,134,143,145,146,150,155,156,157,158,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,186,190,201,202,203,204,205,209,210,211,220,222,245,246,248,249,250,251,252,256,259,264,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,311,331,333,334,336,338,340,345,357,361,367,368,373,375,380,383,390,],[7,7,33,37,41,37,-258,-258,69,-258,-258,69,-258,69,7,-252,37,-61,69,92,69,-65,-67,41,-74,37,-81,124,69,145,124,69,156,124,124,124,124,-153,-151,-152,-154,69,-251,-258,69,-258,-60,69,-258,-66,-73,-80,124,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,124,124,219,124,257,-52,-40,145,145,37,-28,124,69,124,124,124,283,283,283,124,124,-90,309,69,124,-51,257,124,309,124,124,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,332,-198,-27,124,-214,-197,124,124,124,-213,124,219,309,-258,69,69,-258,92,69,]),'IMPORT':([5,8,9,24,],[-258,13,-243,-244,]),'FUNC':([5,8,9,10,12,24,31,],[-258,-258,-243,20,-246,-244,-245,]),'CONST':([5,8,9,10,12,24,31,134,201,202,271,273,368,380,],[-258,-258,-243,21,-246,-244,-245,-258,21,-52,-51,21,-258,-258,]),'TYPE':([5,8,9,10,12,24,31,36,37,41,44,55,72,73,74,86,87,93,122,134,143,145,150,156,201,202,203,204,205,220,264,271,273,368,373,375,380,390,],[-258,-258,-243,22,-246,-244,-245,68,-258,68,68,68,68,-65,-67,68,68,68,68,-258,68,-258,68,-66,22,-52,-40,68,68,68,68,-51,22,-258,68,383,-258,68,]),'VAR':([5,8,9,10,12,24,31,134,201,202,271,273,368,380,],[-258,-258,-243,23,-246,-244,-245,-258,23,-52,-51,23,-258,-258,]),'STRING':([7,13,26,27,28,29,30,45,46,81,90,105,111,112,115,116,117,118,119,128,129,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,190,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,331,333,334,336,338,340,345,357,367,368,380,],[-248,-258,-258,48,-254,-255,-256,-258,-252,-109,-109,-109,-109,-109,-109,-109,-151,-152,-154,199,-251,-258,-109,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-109,-109,-109,-109,-52,-109,-109,-109,-109,-109,-109,-90,-109,-109,-51,-109,-109,-109,-109,-109,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,-109,-214,-197,-109,-109,-109,-213,-109,-109,-258,-258,]),'LEFT_PARANTHESIS':([13,21,22,23,32,33,36,37,41,44,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,74,81,86,87,90,92,97,98,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,134,143,145,148,149,150,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,190,191,192,193,194,195,196,197,198,199,201,202,203,204,205,207,208,211,219,220,221,222,245,246,251,252,255,256,257,259,262,264,266,267,268,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,309,310,315,316,331,333,334,335,336,338,340,344,345,357,361,362,367,368,373,375,380,390,],[26,35,39,43,-90,-92,55,-258,55,55,87,-2,-3,55,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,55,-65,-67,115,55,55,115,-14,-33,-34,115,185,115,115,-112,-114,115,-153,-151,-152,-154,-95,-96,55,-98,-110,-258,55,-258,-4,-111,55,-66,115,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-113,115,-116,-117,115,220,115,-119,222,-99,-100,-101,-104,-102,-103,-105,115,-52,-40,55,55,-20,-25,115,-120,55,-97,115,115,115,115,115,288,-90,-110,115,-91,55,-115,115,-118,-51,115,115,115,115,115,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,-110,-26,-124,-155,115,-214,-197,-122,115,115,115,185,-213,115,375,-123,115,-258,55,55,-258,55,]),'DOT':([13,26,45,46,69,110,113,114,120,121,123,124,129,145,181,183,184,191,193,194,195,196,197,198,199,219,221,257,266,268,309,315,316,335,344,362,],[28,-258,28,-252,93,186,-112,-114,-95,-96,-98,-110,-251,93,-113,-116,-117,-119,-99,-100,-101,-104,-102,-103,-105,-120,-97,-110,-115,-118,-110,-124,-155,-122,361,-123,]),'RIGHT_PARANTHESIS':([26,35,39,43,45,46,50,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,75,76,78,79,87,91,92,97,98,108,109,110,113,114,120,121,123,124,129,138,139,140,141,142,144,146,148,149,157,158,160,162,181,183,184,185,187,188,189,191,193,194,195,196,197,198,199,206,207,208,212,216,217,218,219,221,260,261,262,265,266,268,269,270,310,315,316,335,348,362,383,],[-258,-258,-258,-258,82,-252,88,-61,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,100,-74,102,-81,-258,148,-14,-33,-34,-258,-127,-131,-112,-114,-95,-96,-98,-110,-251,203,-41,-42,-43,-44,-48,-60,-4,-111,-73,-80,-68,-70,-113,-116,-117,-258,-132,-133,221,-119,-99,-100,-101,-104,-102,-103,-105,-47,-20,-25,-128,268,-125,-126,-120,-97,-46,-45,-91,-69,-115,-118,315,316,-26,-124,-155,-122,366,-123,388,]),'INT_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,203,204,205,220,264,373,375,390,],[61,-258,61,61,61,61,-65,-67,61,61,61,61,61,-258,61,-66,-40,61,61,61,61,61,61,61,]),'FLOAT_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,203,204,205,220,264,373,375,390,],[62,-258,62,62,62,62,-65,-67,62,62,62,62,62,-258,62,-66,-40,62,62,62,62,62,62,62,]),'UINT_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,203,204,205,220,264,373,375,390,],[63,-258,63,63,63,63,-65,-67,63,63,63,63,63,-258,63,-66,-40,63,63,63,63,63,63,63,]),'COMPLEX_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,203,204,205,220,264,373,375,390,],[64,-258,64,64,64,64,-65,-67,64,64,64,64,64,-258,64,-66,-40,64,64,64,64,64,64,64,]),'RUNE_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,203,204,205,220,264,373,375,390,],[65,-258,65,65,65,65,-65,-67,65,65,65,65,65,-258,65,-66,-40,65,65,65,65,65,65,65,]),'BOOL_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,203,204,205,220,264,373,375,390,],[66,-258,66,66,66,66,-65,-67,66,66,66,66,66,-258,66,-66,-40,66,66,66,66,66,66,66,]),'STRING_T':([36,37,41,44,55,72,73,74,86,87,93,122,143,145,150,156,203,204,205,220,264,373,375,390,],[67,-258,67,67,67,67,-65,-67,67,67,67,67,67,-258,67,-66,-40,67,67,67,67,67,67,67,]),'LEFT_BRACKET':([36,37,41,44,55,72,73,74,86,87,110,113,114,120,121,122,123,124,143,145,150,156,181,183,184,191,193,194,195,196,197,198,199,203,204,205,219,220,221,257,264,266,268,309,315,316,335,344,362,373,375,390,],[70,-258,70,70,70,70,-65,-67,70,70,182,-112,-114,-95,-96,70,-98,-110,70,-258,70,-66,-113,-116,-117,-119,-99,-100,-101,-104,-102,-103,-105,-40,70,70,-120,70,-97,-110,70,-115,-118,-110,-124,-155,-122,182,-123,70,70,70,]),'MULT':([36,37,41,44,55,72,73,74,81,86,87,90,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,134,143,145,150,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,189,190,191,193,194,195,196,197,198,199,201,202,203,204,205,211,212,213,219,220,221,222,245,246,247,251,252,256,257,259,264,265,266,267,268,270,271,273,277,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,306,307,309,314,315,316,320,325,327,331,333,334,335,336,338,340,345,346,348,353,357,362,367,368,373,375,380,390,],[72,-258,72,72,72,72,-65,-67,116,72,72,116,116,180,-127,-131,116,116,-112,-114,116,-153,-151,-152,-154,-95,-96,72,-98,-110,-258,72,-258,72,-66,116,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-113,116,-116,-117,116,-132,-133,180,190,-119,-99,-100,-101,-104,-102,-103,-105,116,-52,-40,72,72,116,180,180,-120,72,-97,116,116,116,180,116,116,-90,-110,116,72,180,-115,116,-118,180,-51,116,180,180,180,116,116,116,116,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,180,-198,-110,180,-124,-155,180,180,180,190,-214,-197,-122,116,116,116,-213,180,180,180,116,-123,116,-258,72,72,-258,72,]),'STRUCT':([36,37,41,44,55,71,72,73,74,86,87,122,143,145,150,156,203,204,205,220,264,373,375,390,],[-89,-258,-89,-89,-89,96,-89,-65,-67,-89,-89,-89,-89,-258,-89,-66,-40,-89,-89,-89,-89,-89,-89,-89,]),'COMMA':([37,53,54,56,57,58,59,60,61,62,63,64,65,66,67,73,74,92,97,98,108,109,110,113,114,120,121,123,124,141,142,144,145,148,149,156,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,206,207,208,212,219,221,247,257,260,261,262,265,266,268,306,309,310,315,316,320,325,335,362,382,386,387,391,],[-258,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,99,-67,-14,-33,-34,-258,-127,-131,-112,-114,-95,-96,-98,-110,204,205,-48,-258,-4,-111,-66,211,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-47,-20,-25,-128,-120,-97,-258,-110,-46,-45,-91,-69,-115,-118,-258,-110,-26,-124,-155,338,-258,-122,-123,-258,390,-222,-221,]),'ASSIGN':([37,44,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,73,74,80,92,97,98,109,110,113,114,120,121,123,124,148,149,156,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,207,208,212,219,221,247,257,258,262,265,266,268,306,309,310,315,316,325,335,362,],[-258,81,90,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-65,-67,105,-14,-33,-34,-127,-131,-112,-114,-95,-96,-98,-110,-4,-111,-66,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-20,-25,-128,-120,-97,-258,-110,303,-91,-69,-115,-118,-258,-110,-26,-124,-155,-258,-122,-123,]),'LEFT_BRACES':([53,54,56,57,58,59,60,61,62,63,64,65,66,67,85,86,92,96,97,98,108,109,110,113,114,120,121,123,124,134,135,136,137,148,149,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,201,202,203,207,208,212,219,221,229,240,241,242,243,244,247,256,259,262,265,266,268,271,273,278,279,287,289,304,306,307,309,310,315,316,319,321,322,323,324,325,327,328,330,335,362,364,367,368,377,378,380,388,],[-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,134,-258,-14,155,-33,-34,-258,-127,-131,-112,-114,-95,-96,-98,-110,-258,-35,-18,-19,-4,-111,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-90,-52,-40,-20,-25,-128,-120,-97,134,-173,-174,-175,-176,-177,-180,-90,-258,-91,-69,-115,-118,-51,-90,-181,-182,-90,-258,329,-129,-130,-110,-26,-124,-155,134,134,-224,-225,-226,-227,-86,-183,343,-122,-123,-90,-258,-258,134,-228,-258,-212,]),'COLON':([53,54,56,57,58,59,60,61,62,63,64,65,66,67,92,97,98,108,109,110,113,114,120,121,123,124,148,149,160,162,181,182,183,184,187,188,191,193,194,195,196,197,198,199,207,208,212,213,214,215,219,221,239,257,262,265,266,268,310,314,315,316,335,356,358,362,369,372,374,381,382,386,387,391,],[-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-14,-33,-34,-258,-127,-131,-112,-114,-95,-96,-98,-110,-4,-111,-68,-70,-113,-258,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-20,-25,-128,-129,267,-130,-120,-97,273,-179,-91,-69,-115,-118,-26,336,-124,-155,-122,368,-210,-123,-209,380,-219,-218,-258,-220,-222,-221,]),'INTEGER':([70,81,90,95,105,111,112,115,116,117,118,119,125,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,190,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,331,333,334,336,338,340,345,357,367,368,380,],[-106,-106,-106,151,-106,-106,-106,-106,-106,-151,-152,-154,193,-258,-106,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-106,-106,-106,-106,-52,-106,-106,-106,-106,-106,-106,-90,-106,-106,-51,-106,-106,-106,-106,-106,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,-106,-214,-197,-106,-106,-106,-213,-106,-106,-258,-258,]),'OCTAL':([70,81,90,95,105,111,112,115,116,117,118,119,125,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,190,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,331,333,334,336,338,340,345,357,367,368,380,],[-106,-106,-106,152,-106,-106,-106,-106,-106,-151,-152,-154,194,-258,-106,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-106,-106,-106,-106,-52,-106,-106,-106,-106,-106,-106,-90,-106,-106,-51,-106,-106,-106,-106,-106,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,-106,-214,-197,-106,-106,-106,-213,-106,-106,-258,-258,]),'HEX':([70,81,90,95,105,111,112,115,116,117,118,119,125,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,190,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,331,333,334,336,338,340,345,357,367,368,380,],[-106,-106,-106,153,-106,-106,-106,-106,-106,-151,-152,-154,195,-258,-106,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-106,-106,-106,-106,-52,-106,-106,-106,-106,-106,-106,-90,-106,-106,-51,-106,-106,-106,-106,-106,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,-106,-214,-197,-106,-106,-106,-213,-106,-106,-258,-258,]),'RUNE':([70,81,90,95,105,111,112,115,116,117,118,119,125,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,190,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,331,333,334,336,338,340,345,357,367,368,380,],[-106,-106,-106,154,-106,-106,-106,-106,-106,-151,-152,-154,196,-258,-106,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-106,-106,-106,-106,-52,-106,-106,-106,-106,-106,-106,-90,-106,-106,-51,-106,-106,-106,-106,-106,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,-106,-214,-197,-106,-106,-106,-213,-106,-106,-258,-258,]),'NOT':([81,90,105,111,112,115,116,117,118,119,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,336,338,340,357,367,368,380,],[112,112,112,112,112,112,-153,-151,-152,-154,-258,112,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,112,112,112,-52,112,112,112,112,112,112,-90,112,112,-51,112,112,112,112,112,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,112,112,112,112,112,-258,-258,]),'ADD':([81,90,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,189,191,193,194,195,196,197,198,199,201,202,211,212,213,219,221,222,245,246,247,251,252,256,257,259,265,266,267,268,270,271,273,277,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,306,309,314,315,316,320,325,327,335,336,338,340,346,348,353,357,362,367,368,380,],[117,117,117,117,-127,-131,117,117,-112,-114,117,-153,-151,-152,-154,-95,-96,-98,-110,-258,117,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-113,117,-116,-117,117,-132,-133,117,-119,-99,-100,-101,-104,-102,-103,-105,117,-52,117,117,117,-120,-97,117,117,117,117,117,117,-90,-110,117,117,-115,117,-118,117,-51,117,117,117,117,117,117,117,117,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,117,-110,117,-124,-155,117,117,117,-122,117,117,117,117,117,117,117,-123,117,-258,-258,]),'SUB':([81,90,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,189,191,193,194,195,196,197,198,199,201,202,211,212,213,219,221,222,245,246,247,251,252,256,257,259,265,266,267,268,270,271,273,277,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,306,309,314,315,316,320,325,327,335,336,338,340,346,348,353,357,362,367,368,380,],[118,118,118,118,-127,-131,118,118,-112,-114,118,-153,-151,-152,-154,-95,-96,-98,-110,-258,118,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-113,118,-116,-117,118,-132,-133,118,-119,-99,-100,-101,-104,-102,-103,-105,118,-52,118,118,118,-120,-97,118,118,118,118,118,118,-90,-110,118,118,-115,118,-118,118,-51,118,118,118,118,118,118,118,118,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,118,-110,118,-124,-155,118,118,118,-122,118,118,118,118,118,118,118,-123,118,-258,-258,]),'AND':([81,90,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,189,191,193,194,195,196,197,198,199,201,202,211,212,213,219,221,222,245,246,247,251,252,256,257,259,265,266,267,268,270,271,273,277,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,306,309,314,315,316,320,325,327,335,336,338,340,346,348,353,357,362,367,368,380,],[119,119,119,119,-127,-131,119,119,-112,-114,119,-153,-151,-152,-154,-95,-96,-98,-110,-258,119,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-113,119,-116,-117,119,-132,-133,119,-119,-99,-100,-101,-104,-102,-103,-105,119,-52,119,119,119,-120,-97,119,119,119,119,119,119,-90,-110,119,119,-115,119,-118,119,-51,119,119,119,119,119,119,119,119,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,119,-110,119,-124,-155,119,119,119,-122,119,119,119,119,119,119,119,-123,119,-258,-258,]),'TYPECAST':([81,90,105,111,112,115,116,117,118,119,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,190,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,331,333,334,336,338,340,345,357,367,368,380,],[122,122,122,122,122,122,-153,-151,-152,-154,-258,122,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,122,122,122,122,-52,122,122,122,122,122,122,-90,122,122,-51,122,122,122,122,122,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,122,-214,-197,122,122,122,-213,122,122,-258,-258,]),'FLOAT':([81,90,105,111,112,115,116,117,118,119,126,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,190,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,331,333,334,336,338,340,345,357,367,368,380,],[-107,-107,-107,-107,-107,-107,-107,-151,-152,-154,197,-258,-107,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-107,-107,-107,-107,-52,-107,-107,-107,-107,-107,-107,-90,-107,-107,-51,-107,-107,-107,-107,-107,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,-107,-214,-197,-107,-107,-107,-213,-107,-107,-258,-258,]),'IMAGINARY':([81,90,105,111,112,115,116,117,118,119,127,134,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,185,190,201,202,211,222,245,246,251,252,256,259,267,271,273,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,305,307,331,333,334,336,338,340,345,357,367,368,380,],[-108,-108,-108,-108,-108,-108,-108,-151,-152,-154,198,-258,-108,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-153,-108,-108,-108,-108,-52,-108,-108,-108,-108,-108,-108,-90,-108,-108,-51,-108,-108,-108,-108,-108,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-258,-198,-108,-214,-197,-108,-108,-108,-213,-108,-108,-258,-258,]),'RIGHT_BRACKET':([94,109,110,113,114,120,121,123,124,151,152,153,154,181,183,184,187,188,191,193,194,195,196,197,198,199,212,213,215,219,221,266,267,268,313,314,315,316,335,346,362,],[150,-127,-131,-112,-114,-95,-96,-98,-110,-21,-22,-23,-24,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,266,-130,-120,-97,-115,-258,-118,335,-129,-124,-155,-122,362,-123,]),'LOG_OR':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[163,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,163,-119,-99,-100,-101,-104,-102,-103,-105,163,163,-120,-97,163,-110,163,-115,-118,163,163,163,163,163,-110,163,-124,-155,163,163,163,-122,163,163,163,-123,]),'LOG_AND':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[164,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,164,-119,-99,-100,-101,-104,-102,-103,-105,164,164,-120,-97,164,-110,164,-115,-118,164,164,164,164,164,-110,164,-124,-155,164,164,164,-122,164,164,164,-123,]),'EQ':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[167,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,167,-119,-99,-100,-101,-104,-102,-103,-105,167,167,-120,-97,167,-110,167,-115,-118,167,167,167,167,167,-110,167,-124,-155,167,167,167,-122,167,167,167,-123,]),'NEQ':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[168,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,168,-119,-99,-100,-101,-104,-102,-103,-105,168,168,-120,-97,168,-110,168,-115,-118,168,168,168,168,168,-110,168,-124,-155,168,168,168,-122,168,168,168,-123,]),'LT':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[169,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,169,-119,-99,-100,-101,-104,-102,-103,-105,169,169,-120,-97,169,-110,169,-115,-118,169,169,169,169,169,-110,169,-124,-155,169,169,169,-122,169,169,169,-123,]),'GT':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[170,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,170,-119,-99,-100,-101,-104,-102,-103,-105,170,170,-120,-97,170,-110,170,-115,-118,170,170,170,170,170,-110,170,-124,-155,170,170,170,-122,170,170,170,-123,]),'LEQ':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[171,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,171,-119,-99,-100,-101,-104,-102,-103,-105,171,171,-120,-97,171,-110,171,-115,-118,171,171,171,171,171,-110,171,-124,-155,171,171,171,-122,171,171,171,-123,]),'GEQ':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[172,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,172,-119,-99,-100,-101,-104,-102,-103,-105,172,172,-120,-97,172,-110,172,-115,-118,172,172,172,172,172,-110,172,-124,-155,172,172,172,-122,172,172,172,-123,]),'OR':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[174,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,174,-119,-99,-100,-101,-104,-102,-103,-105,174,174,-120,-97,174,-110,174,-115,-118,174,174,174,174,174,-110,174,-124,-155,174,174,174,-122,174,174,174,-123,]),'XOR':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[175,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,175,-119,-99,-100,-101,-104,-102,-103,-105,175,175,-120,-97,175,-110,175,-115,-118,175,175,175,175,175,-110,175,-124,-155,175,175,175,-122,175,175,175,-123,]),'DIV':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[176,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,176,-119,-99,-100,-101,-104,-102,-103,-105,176,176,-120,-97,176,-110,176,-115,-118,176,176,176,176,176,-110,176,-124,-155,176,176,176,-122,176,176,176,-123,]),'MOD':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[177,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,177,-119,-99,-100,-101,-104,-102,-103,-105,177,177,-120,-97,177,-110,177,-115,-118,177,177,177,177,177,-110,177,-124,-155,177,177,177,-122,177,177,177,-123,]),'LSHIFT':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[178,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,178,-119,-99,-100,-101,-104,-102,-103,-105,178,178,-120,-97,178,-110,178,-115,-118,178,178,178,178,178,-110,178,-124,-155,178,178,178,-122,178,178,178,-123,]),'RSHIFT':([108,109,110,113,114,120,121,123,124,181,183,184,187,188,189,191,193,194,195,196,197,198,199,212,213,219,221,247,257,265,266,268,270,277,286,287,306,309,314,315,316,320,325,327,335,346,348,353,362,],[179,-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,179,-119,-99,-100,-101,-104,-102,-103,-105,179,179,-120,-97,179,-110,179,-115,-118,179,179,179,179,179,-110,179,-124,-155,179,179,179,-122,179,179,179,-123,]),'INC':([109,110,113,114,120,121,123,124,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,278,-110,-115,-118,278,-110,-124,-155,278,-122,-123,]),'DEC':([109,110,113,114,120,121,123,124,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,279,-110,-115,-118,279,-110,-124,-155,279,-122,-123,]),'PLUS_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,293,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'MINUS_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,294,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'MULT_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,295,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'DIV_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,296,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'MOD_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,297,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'AND_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,298,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'OR_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,299,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'XOR_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,300,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'LSHIFT_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,301,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'RSHIFT_ASSIGN':([109,110,113,114,120,121,123,124,160,162,181,183,184,187,188,191,193,194,195,196,197,198,199,212,219,221,247,257,258,265,266,268,306,309,315,316,325,335,362,],[-127,-131,-112,-114,-95,-96,-98,-110,-68,-70,-113,-116,-117,-132,-133,-119,-99,-100,-101,-104,-102,-103,-105,-128,-120,-97,-258,-110,302,-69,-115,-118,-258,-110,-124,-155,-258,-122,-123,]),'RETURN':([134,201,202,271,273,368,380,],[-258,245,-52,-51,245,-258,-258,]),'SCAN':([134,201,202,271,273,368,380,],[-258,246,-52,-51,246,-258,-258,]),'BREAK':([134,201,202,271,273,368,380,],[-258,248,-52,-51,248,-258,-258,]),'CONTINUE':([134,201,202,271,273,368,380,],[-258,249,-52,-51,249,-258,-258,]),'GOTO':([134,201,202,271,273,368,380,],[-258,250,-52,-51,250,-258,-258,]),'PRINT':([134,201,202,271,273,368,380,],[-258,251,-52,-51,251,-258,-258,]),'IF':([134,201,202,271,273,364,368,380,],[-258,252,-52,-51,252,252,-258,-258,]),'MALLOC':([134,201,202,271,273,368,380,],[-258,255,-52,-51,255,-258,-258,]),'FOR':([134,201,202,271,273,368,380,],[-258,256,-52,-51,256,-258,-258,]),'SWITCH':([134,201,202,271,273,368,380,],[-258,259,-52,-51,259,-258,-258,]),'RIGHT_BRACES':([134,155,200,201,202,209,210,271,311,329,341,342,343,355,359,360,368,371,379,380,385,],[-258,-258,223,-50,-52,262,-28,-51,-27,-258,354,-207,-258,-206,370,-216,-258,-215,-208,-258,-217,]),'CASE':([201,202,271,329,341,342,343,355,359,360,368,371,379,380,385,],[-50,-52,-51,-258,357,-207,-258,-206,373,-216,-258,-215,-208,-258,-217,]),'DEFAULT':([201,202,271,329,341,342,343,355,359,360,368,371,379,380,385,],[-50,-52,-51,-258,358,-207,-258,-206,374,-216,-258,-215,-208,-258,-217,]),'ELSE':([223,337,347,],[-49,-91,364,]),'QUICK_ASSIGN':([257,309,332,],[290,290,345,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'SourceFile':([0,],[2,]),'PackageClause':([0,],[3,]),'PackageName':([4,13,45,],[6,29,29,]),'ImportDeclRep':([5,],[8,]),'epsilon':([5,8,13,26,35,37,39,43,45,80,86,87,108,134,145,155,182,185,201,245,247,248,249,259,267,273,289,305,306,325,329,340,343,347,367,368,380,382,],[9,12,30,46,51,74,76,79,30,106,137,140,162,202,74,210,215,218,240,276,162,282,282,307,215,240,322,333,162,162,342,351,360,365,240,202,202,387,]),'TopLevelDeclRep':([8,],[10,]),'ImportDecl':([8,],[11,]),'TopLevelDecl':([10,],[14,]),'Declaration':([10,201,273,],[15,225,225,]),'FunctionDecl':([10,],[16,]),'ConstDecl':([10,201,273,],[17,17,17,]),'TypeDecl':([10,201,273,],[18,18,18,]),'VarDecl':([10,201,273,],[19,19,19,]),'ImportSpec':([13,45,],[25,83,]),'PackageNameDotOpt':([13,45,],[27,27,]),'FunctionName':([20,],[32,]),'ConstSpec':([21,50,],[34,89,]),'IdentifierList':([21,23,50,78,87,204,205,209,],[36,44,36,44,143,143,143,264,]),'TypeSpec':([22,75,],[38,101,]),'TypeDef':([22,75,],[40,40,]),'VarSpec':([23,78,],[42,103,]),'ImportSpecRep':([26,],[45,]),'ImportPath':([27,],[47,]),'CreateScope':([32,201,256,273,287,364,],[49,229,289,229,319,377,]),'ConstSpecRep':([35,],[50,]),'Type':([36,41,44,55,72,86,87,122,143,150,204,205,220,264,373,375,390,],[52,77,80,91,98,136,144,192,206,208,144,144,269,312,382,269,391,]),'TypeName':([36,41,44,55,72,86,87,93,122,143,150,204,205,220,264,373,375,390,],[53,53,53,53,53,53,53,149,53,53,53,53,53,53,53,53,53,53,]),'TypeLit':([36,41,44,55,72,86,87,122,143,150,204,205,220,264,373,375,390,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TypeToken':([36,41,44,55,72,86,87,93,122,143,150,204,205,220,264,373,375,390,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'QualifiedIdent':([36,41,44,55,72,86,87,93,122,143,150,204,205,220,264,373,375,390,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ArrayType':([36,41,44,55,72,86,87,122,143,150,204,205,220,264,373,375,390,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'StructType':([36,41,44,55,72,86,87,122,143,150,204,205,220,264,373,375,390,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'PointerType':([36,41,44,55,72,86,87,122,143,150,204,205,220,264,373,375,390,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CreateFuncScope':([36,41,44,55,72,86,87,122,143,150,204,205,220,264,373,375,390,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'IdentifierRep':([37,145,],[73,73,]),'TypeSpecRep':([39,],[75,]),'VarSpecRep':([43,],[78,]),'Function':([49,],[84,]),'Signature':([49,],[85,]),'Parameters':([49,],[86,]),'ArrayLength':([70,],[94,]),'I':([70,81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[95,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'BaseType':([72,],[97,]),'ExpressionListOpt':([80,],[104,]),'ExpressionList':([81,90,105,185,201,245,259,273,289,291,357,367,],[107,147,159,217,258,275,258,258,258,328,369,258,]),'Expression':([81,90,105,115,161,182,185,201,211,222,245,246,251,252,259,267,273,288,289,290,291,336,338,340,357,367,],[108,108,108,189,212,213,108,247,265,270,108,277,286,287,306,314,247,320,325,327,108,346,348,353,108,247,]),'UnaryExpr':([81,90,105,111,112,115,161,182,185,201,211,222,245,246,251,252,259,267,273,288,289,290,291,336,338,340,357,367,],[109,109,109,187,188,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'PrimaryExpr':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[110,110,110,110,110,110,191,110,110,110,191,110,110,110,110,110,110,110,110,110,110,110,110,110,110,344,110,110,110,110,110,]),'UnaryOp':([81,90,105,108,111,112,115,161,182,185,189,201,211,212,213,222,245,246,247,251,252,259,265,267,270,273,277,286,287,288,289,290,291,306,314,320,325,327,336,338,340,346,348,353,357,367,],[111,111,111,173,111,111,111,111,111,111,173,111,111,173,173,111,111,111,173,111,111,111,173,111,173,111,173,173,173,111,111,111,111,173,173,173,173,173,111,111,111,173,173,173,111,111,]),'Operand':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'Conversion':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'Literal':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'OperandName':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'BasicLit':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'F':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'C':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'S':([81,90,105,111,112,115,116,161,182,185,190,201,211,222,245,246,251,252,259,267,273,288,289,290,291,331,336,338,340,357,367,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'EndScope':([84,85,262,272,337,339,384,],[130,131,310,317,347,349,389,]),'FunctionBody':([85,],[132,]),'Block':([85,229,319,321,377,],[133,272,337,339,384,]),'TypeOpt':([86,],[135,]),'ParameterListOpt':([87,],[138,]),'ParametersList':([87,],[139,]),'ParameterDecl':([87,204,205,],[141,260,261,]),'ParameterDeclCommaRep':([87,],[142,]),'ExpressionRep':([108,247,306,325,],[160,160,160,160,]),'BinaryOp':([108,189,212,213,247,265,270,277,286,287,306,314,320,325,327,346,348,353,],[161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,]),'RelOp':([108,189,212,213,247,265,270,277,286,287,306,314,320,325,327,346,348,353,],[165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,]),'AddMulOp':([108,189,212,213,247,265,270,277,286,287,306,314,320,325,327,346,348,353,],[166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,]),'Selector':([110,191,344,],[181,181,181,]),'Slice':([110,191,344,],[183,183,183,]),'TypeAssertion':([110,191,344,],[184,184,184,]),'StatementList':([134,368,380,],[200,379,385,]),'StatementRep':([134,368,380,],[201,201,201,]),'ElementType':([150,],[207,]),'FieldDeclRep':([155,],[209,]),'ExpressionOpt':([182,259,267,],[214,304,313,]),'ExpressionListTypeOpt':([185,],[216,]),'Statement':([201,273,],[224,318,]),'LabeledStmt':([201,273,],[226,226,]),'SimpleStmt':([201,259,273,289,367,],[227,308,227,326,378,]),'ReturnStmt':([201,273,],[228,228,]),'ScanStmt':([201,273,],[230,230,]),'BreakStmt':([201,273,],[231,231,]),'ContinueStmt':([201,273,],[232,232,]),'GotoStmt':([201,273,],[233,233,]),'PrintStmt':([201,273,],[234,234,]),'IfStmt':([201,273,364,],[235,235,376,]),'SwitchStmt':([201,273,],[236,236,]),'MallocStmt':([201,273,],[237,237,]),'ForStmt':([201,273,],[238,238,]),'Label':([201,248,249,250,273,],[239,281,281,285,239,]),'ExpressionStmt':([201,259,273,289,367,],[241,241,241,241,241,]),'IncDecStmt':([201,259,273,289,367,],[242,242,242,242,242,]),'Assignment':([201,259,273,289,367,],[243,243,243,243,243,]),'ShortVarDecl':([201,259,273,289,367,],[244,244,244,244,244,]),'ExprSwitchStmt':([201,273,],[253,253,]),'TypeSwitchStmt':([201,273,],[254,254,]),'FieldDecl':([209,],[263,]),'ExpressionListPureOpt':([245,],[274,]),'LabelOpt':([248,249,],[280,284,]),'assign_op':([258,],[291,]),'AssignOp':([258,],[292,]),'SimpleStmtOpt':([259,],[305,]),'ConditionBlockOpt':([289,],[321,]),'Condition':([289,340,],[323,352,]),'ForClause':([289,],[324,]),'TypeSwitchGuard':([305,],[330,]),'IdentifierOpt':([305,],[331,]),'ExprCaseClauseRep':([329,],[341,]),'ConditionOpt':([340,],[350,]),'ExprCaseClause':([341,],[355,]),'ExprSwitchCase':([341,],[356,]),'TypeCaseClauseOpt':([343,],[359,]),'ElseOpt':([347,],[363,]),'TypeCaseClause':([359,],[371,]),'TypeSwitchCase':([359,],[372,]),'TypeList':([373,],[381,]),'TypeRep':([382,],[386,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','ourparser.py',168),
  ('Type -> TypeName','Type',1,'p_type','ourparser.py',178),
  ('Type -> TypeLit','Type',1,'p_type','ourparser.py',179),
  ('Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS','Type',3,'p_type','ourparser.py',180),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','ourparser.py',190),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','ourparser.py',191),
  ('TypeToken -> INT_T','TypeToken',1,'p_type_token','ourparser.py',198),
  ('TypeToken -> FLOAT_T','TypeToken',1,'p_type_token','ourparser.py',199),
  ('TypeToken -> UINT_T','TypeToken',1,'p_type_token','ourparser.py',200),
  ('TypeToken -> COMPLEX_T','TypeToken',1,'p_type_token','ourparser.py',201),
  ('TypeToken -> RUNE_T','TypeToken',1,'p_type_token','ourparser.py',202),
  ('TypeToken -> BOOL_T','TypeToken',1,'p_type_token','ourparser.py',203),
  ('TypeToken -> STRING_T','TypeToken',1,'p_type_token','ourparser.py',204),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','ourparser.py',205),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','ourparser.py',218),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','ourparser.py',219),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','ourparser.py',220),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','ourparser.py',226),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','ourparser.py',227),
  ('ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType','ArrayType',4,'p_array_type','ourparser.py',235),
  ('ArrayLength -> I INTEGER','ArrayLength',2,'p_array_length','ourparser.py',251),
  ('ArrayLength -> I OCTAL','ArrayLength',2,'p_array_length','ourparser.py',252),
  ('ArrayLength -> I HEX','ArrayLength',2,'p_array_length','ourparser.py',253),
  ('ArrayLength -> I RUNE','ArrayLength',2,'p_array_length','ourparser.py',254),
  ('ElementType -> Type','ElementType',1,'p_element_type','ourparser.py',259),
  ('StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope','StructType',6,'p_struct_type','ourparser.py',267),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','ourparser.py',274),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','ourparser.py',275),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','ourparser.py',286),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','ourparser.py',298),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','ourparser.py',299),
  ('Tag -> STRING','Tag',1,'p_Tag','ourparser.py',305),
  ('PointerType -> MULT BaseType','PointerType',2,'p_point_type','ourparser.py',313),
  ('BaseType -> Type','BaseType',1,'p_base_type','ourparser.py',320),
  ('Signature -> Parameters TypeOpt','Signature',2,'p_sign','ourparser.py',328),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','ourparser.py',349),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','ourparser.py',350),
  ('Result -> Parameters','Result',1,'p_result','ourparser.py',358),
  ('Result -> Type','Result',1,'p_result','ourparser.py',359),
  ('Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS','Parameters',3,'p_params','ourparser.py',365),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_param_list_opt','ourparser.py',371),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_param_list_opt','ourparser.py',372),
  ('ParametersList -> ParameterDecl','ParametersList',1,'p_param_list','ourparser.py',378),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_param_list','ourparser.py',379),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','ourparser.py',385),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','ourparser.py',386),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','ourparser.py',396),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','ourparser.py',397),
  ('Block -> LEFT_BRACES StatementList RIGHT_BRACES','Block',3,'p_block','ourparser.py',417),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','ourparser.py',423),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','ourparser.py',429),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','ourparser.py',430),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','ourparser.py',442),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','ourparser.py',443),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','ourparser.py',444),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','ourparser.py',450),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','ourparser.py',451),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','ourparser.py',459),
  ('ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS','ConstDecl',4,'p_const_decl','ourparser.py',460),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','ourparser.py',469),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','ourparser.py',470),
  ('ConstSpec -> IdentifierList Type ASSIGN ExpressionList','ConstSpec',4,'p_const_spec','ourparser.py',480),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','ourparser.py',510),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','ourparser.py',511),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','ourparser.py',520),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','ourparser.py',539),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','ourparser.py',540),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','ourparser.py',562),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','ourparser.py',574),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','ourparser.py',575),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','ourparser.py',594),
  ('TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS','TypeDecl',4,'p_type_decl','ourparser.py',595),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','ourparser.py',604),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','ourparser.py',605),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','ourparser.py',614),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','ourparser.py',622),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','ourparser.py',630),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','ourparser.py',642),
  ('VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS','VarDecl',4,'p_var_decl','ourparser.py',643),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','ourparser.py',652),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','ourparser.py',653),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','ourparser.py',663),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','ourparser.py',664),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','ourparser.py',741),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','ourparser.py',742),
  ('ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression','ShortVarDecl',3,'p_short_var_decl','ourparser.py',754),
  ('FunctionDecl -> FUNC FunctionName CreateScope Function EndScope','FunctionDecl',5,'p_func_decl','ourparser.py',774),
  ('FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope','FunctionDecl',5,'p_func_decl','ourparser.py',775),
  ('CreateFuncScope -> <empty>','CreateFuncScope',0,'p_create_func_scope','ourparser.py',795),
  ('CreateScope -> <empty>','CreateScope',0,'p_create_scope','ourparser.py',801),
  ('EndScope -> <empty>','EndScope',0,'p_delete_scope','ourparser.py',807),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','ourparser.py',813),
  ('Function -> Signature FunctionBody','Function',2,'p_func','ourparser.py',819),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','ourparser.py',845),
  ('Operand -> Literal','Operand',1,'p_operand','ourparser.py',853),
  ('Operand -> OperandName','Operand',1,'p_operand','ourparser.py',854),
  ('Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS','Operand',3,'p_operand','ourparser.py',855),
  ('Literal -> BasicLit','Literal',1,'p_literal','ourparser.py',864),
  ('BasicLit -> I INTEGER','BasicLit',2,'p_basic_lit','ourparser.py',872),
  ('BasicLit -> I OCTAL','BasicLit',2,'p_basic_lit','ourparser.py',873),
  ('BasicLit -> I HEX','BasicLit',2,'p_basic_lit','ourparser.py',874),
  ('BasicLit -> F FLOAT','BasicLit',2,'p_basic_lit','ourparser.py',875),
  ('BasicLit -> C IMAGINARY','BasicLit',2,'p_basic_lit','ourparser.py',876),
  ('BasicLit -> I RUNE','BasicLit',2,'p_basic_lit','ourparser.py',877),
  ('BasicLit -> S STRING','BasicLit',2,'p_basic_lit','ourparser.py',878),
  ('I -> <empty>','I',0,'p_I','ourparser.py',897),
  ('F -> <empty>','F',0,'p_F','ourparser.py',903),
  ('C -> <empty>','C',0,'p_C','ourparser.py',909),
  ('S -> <empty>','S',0,'p_S','ourparser.py',915),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','ourparser.py',921),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_quali_ident','ourparser.py',943),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','ourparser.py',967),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','ourparser.py',968),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','ourparser.py',969),
  ('PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET','PrimaryExpr',4,'p_prim_expr','ourparser.py',970),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','ourparser.py',971),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','ourparser.py',972),
  ('PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS','PrimaryExpr',4,'p_prim_expr','ourparser.py',973),
  ('PrimaryExpr -> MULT PrimaryExpr','PrimaryExpr',2,'p_prim_expr','ourparser.py',974),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','ourparser.py',1178),
  ('Index -> LEFT_BRACKET Expression RIGHT_BRACKET','Index',3,'p_index','ourparser.py',1205),
  ('Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET','Slice',5,'p_slice','ourparser.py',1211),
  ('Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET','Slice',7,'p_slice','ourparser.py',1212),
  ('TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS','TypeAssertion',4,'p_type_assert','ourparser.py',1221),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','ourparser.py',1227),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','ourparser.py',1228),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','ourparser.py',1236),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','ourparser.py',1237),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','ourparser.py',1266),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','ourparser.py',1267),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','ourparser.py',1274),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','ourparser.py',1275),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','ourparser.py',1276),
  ('BinaryOp -> LOG_OR','BinaryOp',1,'p_binary_op','ourparser.py',1315),
  ('BinaryOp -> LOG_AND','BinaryOp',1,'p_binary_op','ourparser.py',1316),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','ourparser.py',1317),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','ourparser.py',1318),
  ('RelOp -> EQ','RelOp',1,'p_rel_op','ourparser.py',1329),
  ('RelOp -> NEQ','RelOp',1,'p_rel_op','ourparser.py',1330),
  ('RelOp -> LT','RelOp',1,'p_rel_op','ourparser.py',1331),
  ('RelOp -> GT','RelOp',1,'p_rel_op','ourparser.py',1332),
  ('RelOp -> LEQ','RelOp',1,'p_rel_op','ourparser.py',1333),
  ('RelOp -> GEQ','RelOp',1,'p_rel_op','ourparser.py',1334),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','ourparser.py',1351),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','ourparser.py',1352),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','ourparser.py',1353),
  ('AddMulOp -> DIV','AddMulOp',1,'p_add_mul_op','ourparser.py',1354),
  ('AddMulOp -> MOD','AddMulOp',1,'p_add_mul_op','ourparser.py',1355),
  ('AddMulOp -> LSHIFT','AddMulOp',1,'p_add_mul_op','ourparser.py',1356),
  ('AddMulOp -> RSHIFT','AddMulOp',1,'p_add_mul_op','ourparser.py',1357),
  ('UnaryOp -> ADD','UnaryOp',1,'p_unary_op','ourparser.py',1376),
  ('UnaryOp -> SUB','UnaryOp',1,'p_unary_op','ourparser.py',1377),
  ('UnaryOp -> MULT','UnaryOp',1,'p_unary_op','ourparser.py',1378),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','ourparser.py',1379),
  ('Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS','Conversion',5,'p_conversion','ourparser.py',1394),
  ('Statement -> Declaration','Statement',1,'p_statement','ourparser.py',1403),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','ourparser.py',1404),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','ourparser.py',1405),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','ourparser.py',1406),
  ('Statement -> CreateScope Block EndScope','Statement',3,'p_statement','ourparser.py',1407),
  ('Statement -> ScanStmt','Statement',1,'p_statement','ourparser.py',1408),
  ('Statement -> BreakStmt','Statement',1,'p_statement','ourparser.py',1409),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','ourparser.py',1410),
  ('Statement -> GotoStmt','Statement',1,'p_statement','ourparser.py',1411),
  ('Statement -> PrintStmt','Statement',1,'p_statement','ourparser.py',1412),
  ('Statement -> IfStmt','Statement',1,'p_statement','ourparser.py',1413),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','ourparser.py',1414),
  ('Statement -> MallocStmt','Statement',1,'p_statement','ourparser.py',1415),
  ('Statement -> ForStmt','Statement',1,'p_statement','ourparser.py',1416),
  ('PrintStmt -> PRINT Expression','PrintStmt',2,'p_print_stmt','ourparser.py',1425),
  ('ScanStmt -> SCAN Expression','ScanStmt',2,'p_scan_stmt','ourparser.py',1432),
  ('MallocStmt -> MALLOC LEFT_PARANTHESIS Expression COMMA Expression RIGHT_PARANTHESIS','MallocStmt',6,'p_malloc_stmt','ourparser.py',1438),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','ourparser.py',1445),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','ourparser.py',1446),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','ourparser.py',1447),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','ourparser.py',1448),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','ourparser.py',1449),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','ourparser.py',1455),
  ('Label -> IDENTIFIER','Label',1,'p_label','ourparser.py',1475),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','ourparser.py',1481),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_inc_dec','ourparser.py',1488),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_inc_dec','ourparser.py',1489),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','ourparser.py',1497),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','ourparser.py',1533),
  ('AssignOp -> PLUS_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1539),
  ('AssignOp -> MINUS_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1540),
  ('AssignOp -> MULT_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1541),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1542),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1543),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1544),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1545),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1546),
  ('AssignOp -> LSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1547),
  ('AssignOp -> RSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1548),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','ourparser.py',1549),
  ('IfStmt -> IF Expression CreateScope Block EndScope ElseOpt','IfStmt',6,'p_if_statement','ourparser.py',1555),
  ('SimpleStmtOpt -> SimpleStmt SEMICOLON','SimpleStmtOpt',2,'p_SimpleStmtOpt','ourparser.py',1581),
  ('SimpleStmtOpt -> epsilon','SimpleStmtOpt',1,'p_SimpleStmtOpt','ourparser.py',1582),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','ourparser.py',1591),
  ('ElseOpt -> ELSE CreateScope Block EndScope','ElseOpt',4,'p_else_opt','ourparser.py',1592),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','ourparser.py',1593),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','ourparser.py',1606),
  ('SwitchStmt -> TypeSwitchStmt','SwitchStmt',1,'p_switch_statement','ourparser.py',1607),
  ('ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES','ExprSwitchStmt',5,'p_expr_switch_stmt','ourparser.py',1613),
  ('StartSwitch -> <empty>','StartSwitch',0,'p_start_switch','ourparser.py',1642),
  ('ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause','ExprCaseClauseRep',2,'p_expr_case_clause_rep','ourparser.py',1651),
  ('ExprCaseClauseRep -> epsilon','ExprCaseClauseRep',1,'p_expr_case_clause_rep','ourparser.py',1652),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','ourparser.py',1669),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_expr_switch_case','ourparser.py',1684),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','ourparser.py',1685),
  ('TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES','TypeSwitchStmt',6,'p_type_switch_stmt','ourparser.py',1699),
  ('TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS','TypeSwitchGuard',6,'p_type_switch_guard','ourparser.py',1705),
  ('IdentifierOpt -> IDENTIFIER QUICK_ASSIGN','IdentifierOpt',2,'p_identifier_opt','ourparser.py',1712),
  ('IdentifierOpt -> epsilon','IdentifierOpt',1,'p_identifier_opt','ourparser.py',1713),
  ('TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause','TypeCaseClauseOpt',2,'p_type_case_clause_opt','ourparser.py',1723),
  ('TypeCaseClauseOpt -> epsilon','TypeCaseClauseOpt',1,'p_type_case_clause_opt','ourparser.py',1724),
  ('TypeCaseClause -> TypeSwitchCase COLON StatementList','TypeCaseClause',3,'p_type_case_clause','ourparser.py',1733),
  ('TypeSwitchCase -> CASE TypeList','TypeSwitchCase',2,'p_type_switch_case','ourparser.py',1739),
  ('TypeSwitchCase -> DEFAULT','TypeSwitchCase',1,'p_type_switch_case','ourparser.py',1740),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','ourparser.py',1749),
  ('TypeRep -> TypeRep COMMA Type','TypeRep',3,'p_type_rep','ourparser.py',1755),
  ('TypeRep -> epsilon','TypeRep',1,'p_type_rep','ourparser.py',1756),
  ('ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope','ForStmt',5,'p_for','ourparser.py',1768),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','ourparser.py',1779),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','ourparser.py',1780),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','ourparser.py',1781),
  ('Condition -> Expression','Condition',1,'p_condition','ourparser.py',1788),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','ourparser.py',1794),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','ourparser.py',1822),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','ourparser.py',1823),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','ourparser.py',1829),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','ourparser.py',1830),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','ourparser.py',1835),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','ourparser.py',1843),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','ourparser.py',1852),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','ourparser.py',1853),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','ourparser.py',1858),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','ourparser.py',1872),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','ourparser.py',1886),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','ourparser.py',1887),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','ourparser.py',1892),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','ourparser.py',1903),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','ourparser.py',1910),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','ourparser.py',1911),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','ourparser.py',1920),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','ourparser.py',1921),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','ourparser.py',1932),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','ourparser.py',1937),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','ourparser.py',1949),
  ('ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS','ImportDecl',4,'p_import_decl','ourparser.py',1950),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','ourparser.py',1958),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','ourparser.py',1959),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','ourparser.py',1968),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','ourparser.py',1977),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','ourparser.py',1978),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','ourparser.py',1979),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','ourparser.py',1988),
  ('epsilon -> <empty>','epsilon',0,'p_empty','ourparser.py',1995),
]
