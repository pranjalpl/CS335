
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLOG_ORleftLOG_ANDleftORleftXORleftANDleftEQNEQleftLTGTLEQGEQleftLSHIFTRSHIFTleftADDSUBleftMULTDIVMODSTRUCT FUNC CONST TYPE VAR IF ELSE SWITCH CASE DEFAULT FOR RANGE RETURN BREAK CONTINUE GOTO PACKAGE IMPORT INT_T FLOAT_T UINT_T COMPLEX_T RUNE_T BOOL_T STRING_T TYPECAST ADD SUB MULT DIV MOD ASSIGN AND LOG_AND INC DEC LEFT_PARANTHESIS RIGHT_PARANTHESIS OR XOR LSHIFT RSHIFT PLUS_ASSIGN MINUS_ASSIGN MULT_ASSIGN DIV_ASSIGN MOD_ASSIGN AND_ASSIGN OR_ASSIGN XOR_ASSIGN LSHIFT_ASSIGN RSHIFT_ASSIGN LOG_OR EQ LT GT NOT NEQ LEQ GEQ QUICK_ASSIGN LEFT_BRACKET RIGHT_BRACKET LEFT_BRACES RIGHT_BRACES COMMA DOT SEMICOLON COLON INTEGER OCTAL HEX FLOAT STRING IMAGINARY RUNE IDENTIFIERstart : SourceFileType : TypeName\n            | TypeLit\n            | LEFT_PARANTHESIS Type RIGHT_PARANTHESISTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT_T\n                 | FLOAT_T\n                 | UINT_T\n                 | COMPLEX_T\n                 | RUNE_T\n                 | BOOL_T\n                 | STRING_T\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | StructType\n               | PointerTypeTypeOpt : Type\n               | epsilonArrayType : LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType ArrayLength : Expression  ElementType : Type StructType : STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList Type TagOpt TagOpt : Tag\n             | epsilon  Tag : STRING PointerType : MULT BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESISParameterListOpt : ParametersList\n                             | epsilonParametersList : Type\n                      | IdentifierList Type\n                      | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                             | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LEFT_BRACES StatementList RIGHT_BRACESStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclTopLevelDecl : Declaration\n                  | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESISConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESISTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESISVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER QUICK_ASSIGN Expression FunctionDecl : FUNC FunctionName Function\n                    | FUNC FunctionName SignatureFunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockOperand : Literal\n               | OperandName\n               | LEFT_PARANTHESIS Expression RIGHT_PARANTHESISLiteral : BasicLitBasicLit : INTEGER\n                | OCTAL\n                | HEX\n                | FLOAT\n                | IMAGINARY\n                | RUNE\n                | STRINGOperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNameCompositeLit : LiteralType LiteralValueLiteralType : ArrayType\n                   | ElementType\n                   | TypeNameLiteralValue : LEFT_BRACES ElementListOpt RIGHT_BRACESElementListOpt : ElementList\n                           | epsilonElementList : KeyedElement KeyedElementCommaRepKeyedElementCommaRep : KeyedElementCommaRep COMMA KeyedElement\n                            | epsilonKeyedElement : Key COLON Element\n                    | ElementKey : FieldName\n           | Expression\n           | LiteralValueFieldName : IDENTIFIERElement : Expression\n               | LiteralValuePrimaryExpr : Operand\n                   | PrimaryExpr Selector\n                   | Conversion\n                   | PrimaryExpr Index\n                   | PrimaryExpr Slice\n                   | PrimaryExpr TypeAssertion\n                   | PrimaryExpr ArgumentsSelector : DOT IDENTIFIERIndex : LEFT_BRACKET Expression RIGHT_BRACKETSlice : LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET\n             | LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKETTypeAssertion : DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESISArguments : LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESISExpressionListTypeOpt : ExpressionList\n                             | epsilonExpressionListCommaOpt : COMMA ExpressionList\n                              | epsilonExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprBinaryOp : LOG_OR\n                | LOG_AND\n                | RelOp\n                | AddMulOpRelOp : EQ\n             | NEQ\n             | LT\n             | GT\n             | LEQ\n             | GEQAddMulOp : UnaryOp\n                | OR\n                | XOR\n                | DIV\n                | MOD\n                | LSHIFT\n                | RSHIFTUnaryOp : ADD\n               | SUB\n               | MULT\n               | AND Conversion : TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESISStatement : Declaration\n                 | LabeledStmt\n                 | SimpleStmt\n                 | ReturnStmt\n                 | BreakStmt\n                 | ContinueStmt\n                 | GotoStmt\n                 | Block\n                 | IfStmt\n                 | SwitchStmt\n                 | ForStmt  SimpleStmt : epsilon\n                 | ExpressionStmt\n                 | IncDecStmt\n                 | Assignment\n                 | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INC\n                 | Expression DEC  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUS_ASSIGN\n               | MINUS_ASSIGN\n               | MULT_ASSIGN\n               | DIV_ASSIGN\n               | MOD_ASSIGN\n               | AND_ASSIGN\n               | OR_ASSIGN\n               | XOR_ASSIGN\n               | LSHIFT_ASSIGN\n               | RSHIFT_ASSIGN\n               | ASSIGN  IfStmt : IF Expression Block ElseOpt  SimpleStmtOpt : SimpleStmt SEMICOLON\n                    | epsilon  ElseOpt : ELSE IfStmt\n              | ELSE Block\n              | epsilon  SwitchStmt : ExprSwitchStmt\n                 | TypeSwitchStmt  ExprSwitchStmt : SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES ExprCaseClauseRep : ExprCaseClauseRep ExprCaseClause\n                        | epsilon ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                     | DEFAULT  TypeSwitchStmt : SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES TypeSwitchGuard : IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS  IdentifierOpt : IDENTIFIER QUICK_ASSIGN\n                    | epsilon  TypeCaseClauseOpt : TypeCaseClauseOpt TypeCaseClause\n                        | epsilon  TypeCaseClause : TypeSwitchCase COLON StatementList TypeSwitchCase : CASE TypeList\n                     | DEFAULT  TypeList : Type TypeRep TypeRep : TypeRep COMMA Type\n              | epsilon ForStmt : FOR ConditionBlockOpt BlockConditionBlockOpt : epsilon\n             | Condition\n             | ForClause\n             | RangeClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n          | Condition RangeClause : ExpressionIdentListOpt RANGE ExpressionExpressionIdentListOpt : epsilon\n             | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n             | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n        | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n          | IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilon ImportPath : STRING epsilon : '
    
_lr_action_items = {'PACKAGE':([0,],[4,]),'$end':([1,2,5,8,9,10,12,24,31,],[0,-1,-265,-265,-250,-249,-253,-251,-252,]),'SEMICOLON':([3,6,7,11,14,15,16,17,18,19,25,34,36,37,38,40,41,43,48,49,50,51,52,56,58,60,61,63,64,65,66,67,68,69,70,71,72,73,74,80,81,85,88,90,91,92,93,94,95,96,97,98,99,109,110,113,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,141,142,144,145,146,147,148,149,151,152,153,156,157,159,164,165,166,186,187,188,189,190,194,195,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,220,221,222,223,224,225,226,227,230,231,232,233,234,236,241,242,243,244,252,254,255,258,259,260,261,262,263,264,265,266,267,268,270,271,273,277,278,282,299,300,301,304,306,309,310,311,312,313,314,317,318,325,328,329,330,331,332,333,335,336,337,338,339,346,348,349,351,361,363,369,371,],[5,-254,-255,24,31,-54,-55,-51,-52,-53,-256,-56,-265,-265,-69,-73,-74,-77,-260,-264,-86,-87,-265,-60,-62,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-63,-65,-76,-265,-257,154,-89,-90,-265,-35,-32,-33,-34,-36,-57,163,-14,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-30,-31,-70,201,-75,-78,202,-81,-84,-82,-265,-265,-50,-37,-61,-4,-103,-123,-125,-126,-127,-128,-144,-145,-64,-83,-66,-68,-47,258,-168,-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182,-183,-265,-265,-265,-186,-208,-209,-265,-102,-265,-20,-22,-140,-129,-93,-23,308,-49,-265,-241,-242,-243,-244,-246,-247,-185,-245,-248,-187,-188,-179,-186,314,-102,-186,-179,324,-130,-134,-265,-67,-184,-265,-228,-265,-85,-189,-133,-167,-26,-27,-28,-29,-202,-207,350,-235,-236,-233,-131,-205,-206,-210,-265,-216,-132,-265,]),'IDENTIFIER':([4,13,20,21,22,23,26,35,36,37,39,42,44,45,46,47,52,53,54,55,62,75,77,79,80,81,82,83,84,86,87,89,94,100,105,107,111,114,119,120,123,124,125,126,129,130,140,143,150,154,156,157,159,161,162,163,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,191,192,193,198,199,200,201,202,225,226,227,228,229,233,236,238,245,253,256,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,308,314,315,316,321,323,324,345,347,350,354,358,361,366,368,371,374,379,],[7,7,33,37,42,37,-265,-265,76,-265,-265,76,-265,76,7,-259,76,107,37,-59,76,113,132,76,-63,-65,42,-72,76,37,-80,132,-265,107,76,-265,132,76,132,132,-163,-164,-165,-166,132,76,-265,200,132,-258,234,-50,-37,107,107,-58,76,132,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,244,132,132,37,-25,-64,-71,-79,132,266,266,266,132,282,282,76,76,132,76,132,-49,234,132,132,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,322,-204,132,-24,132,132,-201,132,-219,-203,-218,132,282,132,244,-265,76,76,-265,113,76,]),'IMPORT':([5,8,9,24,],[-265,13,-250,-251,]),'FUNC':([5,8,9,10,12,24,31,],[-265,-265,-250,20,-253,-251,-252,]),'CONST':([5,8,9,10,12,24,31,94,156,157,258,259,361,371,],[-265,-265,-250,21,-253,-251,-252,-265,21,-50,-49,21,-265,-265,]),'TYPE':([5,8,9,10,12,24,31,36,37,42,45,52,53,62,79,80,81,84,94,100,105,107,114,130,156,157,159,161,162,167,200,238,245,256,258,259,361,366,368,371,379,],[-265,-265,-250,22,-253,-251,-252,75,-265,75,75,75,75,75,75,-63,-65,75,-265,75,75,-265,75,75,22,-50,-37,75,75,75,-64,75,75,75,-49,22,-265,75,374,-265,75,]),'VAR':([5,8,9,10,12,24,31,94,156,157,258,259,361,371,],[-265,-265,-250,23,-253,-251,-252,-265,23,-50,-49,23,-265,-265,]),'STRING':([7,13,26,27,28,29,30,46,47,60,61,63,64,65,66,67,68,69,70,71,72,73,74,77,89,94,111,113,119,120,123,124,125,126,129,141,142,150,154,156,157,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,241,242,253,254,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,309,314,315,316,321,323,324,345,347,350,354,361,371,],[-255,-265,-265,49,-261,-262,-263,-265,-259,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,139,139,-265,139,-14,139,139,-163,-164,-165,-166,139,-30,-31,139,-258,139,-50,-4,-103,139,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,139,139,139,139,139,139,-20,-22,139,-23,139,-49,139,139,139,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,139,332,139,139,-201,139,-219,-203,-218,139,139,139,-265,-265,]),'LEFT_PARANTHESIS':([13,21,22,23,32,33,36,37,42,45,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,84,89,94,100,105,107,111,113,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,150,156,157,159,161,162,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,197,200,225,229,233,234,236,238,241,242,244,245,252,253,254,256,257,258,259,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,304,305,306,314,315,316,321,323,324,325,328,344,345,346,347,350,354,358,361,366,368,369,371,379,],[26,35,39,44,53,-88,62,-265,62,62,100,62,-2,-3,62,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,129,62,-63,-65,62,129,-265,62,62,-265,129,-14,193,129,129,-122,-124,-163,-164,-165,-166,-91,-92,129,62,-94,-102,-95,-96,-97,-98,-99,-100,-101,-30,-31,129,129,-50,-37,62,62,-4,-103,62,129,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-123,-125,-126,-127,-128,245,129,129,253,-64,129,129,129,-102,129,62,-20,-22,-129,62,-93,129,-23,62,129,-49,129,-102,129,129,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,-130,129,-134,129,129,-201,129,-219,-203,-133,-167,193,-218,-131,129,129,129,368,-265,62,62,-132,-265,62,]),'DOT':([13,26,46,47,76,107,118,121,122,127,128,131,132,133,134,135,136,137,138,139,154,186,187,188,189,190,234,244,252,282,304,306,325,328,344,346,369,],[28,-265,28,-259,114,114,191,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-258,-123,-125,-126,-127,-128,-102,-129,-93,-102,-130,-134,-133,-167,358,-131,-132,]),'RIGHT_PARANTHESIS':([26,35,39,44,46,47,53,54,55,60,61,63,64,65,66,67,68,69,70,71,72,73,74,82,83,86,87,100,101,102,103,104,106,112,113,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,141,142,153,154,158,160,163,165,166,186,187,188,189,190,193,194,195,196,201,202,204,205,237,239,240,241,242,243,244,249,250,251,252,254,302,303,304,306,307,310,325,328,346,369,374,],[-265,-265,-265,-265,90,-259,-265,109,-59,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,144,-72,147,-80,-265,159,-38,-39,-40,-42,165,-14,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-30,-31,-265,-258,165,-41,-58,-4,-103,-123,-125,-126,-127,-128,-265,-144,-145,252,-71,-79,-66,-68,-43,-46,-44,-20,-22,-140,-129,306,-135,-136,-93,-23,-45,325,-130,-134,328,-67,-133,-167,-131,-132,378,]),'ASSIGN':([36,37,42,45,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,80,81,88,113,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,141,142,165,166,186,187,188,189,190,194,195,200,204,205,230,234,235,241,242,243,244,252,254,277,281,282,299,304,306,310,325,328,346,369,],[-265,-265,84,89,111,-19,-18,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-63,-65,150,-14,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-30,-31,-4,-103,-123,-125,-126,-127,-128,-144,-145,-64,-66,-68,-265,-102,296,-20,-22,-140,-129,-93,-23,-265,316,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'INT_T':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,114,130,159,161,162,167,200,238,245,256,366,368,379,],[68,-265,68,68,68,68,68,68,-63,-65,68,68,68,-265,68,68,-37,68,68,68,-64,68,68,68,68,68,68,]),'FLOAT_T':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,114,130,159,161,162,167,200,238,245,256,366,368,379,],[69,-265,69,69,69,69,69,69,-63,-65,69,69,69,-265,69,69,-37,69,69,69,-64,69,69,69,69,69,69,]),'UINT_T':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,114,130,159,161,162,167,200,238,245,256,366,368,379,],[70,-265,70,70,70,70,70,70,-63,-65,70,70,70,-265,70,70,-37,70,70,70,-64,70,70,70,70,70,70,]),'COMPLEX_T':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,114,130,159,161,162,167,200,238,245,256,366,368,379,],[71,-265,71,71,71,71,71,71,-63,-65,71,71,71,-265,71,71,-37,71,71,71,-64,71,71,71,71,71,71,]),'RUNE_T':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,114,130,159,161,162,167,200,238,245,256,366,368,379,],[72,-265,72,72,72,72,72,72,-63,-65,72,72,72,-265,72,72,-37,72,72,72,-64,72,72,72,72,72,72,]),'BOOL_T':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,114,130,159,161,162,167,200,238,245,256,366,368,379,],[73,-265,73,73,73,73,73,73,-63,-65,73,73,73,-265,73,73,-37,73,73,73,-64,73,73,73,73,73,73,]),'STRING_T':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,114,130,159,161,162,167,200,238,245,256,366,368,379,],[74,-265,74,74,74,74,74,74,-63,-65,74,74,74,-265,74,74,-37,74,74,74,-64,74,74,74,74,74,74,]),'LEFT_BRACKET':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,118,121,122,127,128,130,131,132,133,134,135,136,137,138,139,159,161,162,167,186,187,188,189,190,200,234,238,244,245,252,256,282,304,306,325,328,344,346,366,368,369,379,],[77,-265,77,77,77,77,77,77,-63,-65,77,77,77,-265,192,-122,-124,-91,-92,77,-94,-102,-95,-96,-97,-98,-99,-100,-101,-37,77,77,77,-123,-125,-126,-127,-128,-64,-102,77,-129,77,-93,77,-102,-130,-134,-133,-167,192,-131,77,77,-132,77,]),'STRUCT':([36,37,42,45,52,53,62,79,80,81,84,100,105,107,130,159,161,162,167,200,238,245,256,366,368,379,],[78,-265,78,78,78,78,78,78,-63,-65,78,78,78,-265,78,-37,78,78,78,-64,78,78,78,78,78,78,]),'MULT':([36,37,42,45,52,53,62,77,79,80,81,84,89,94,100,105,107,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,150,153,156,157,159,161,162,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,200,225,229,230,233,234,236,238,243,244,245,246,252,253,256,257,258,259,269,277,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,299,304,305,306,307,310,314,315,316,317,325,327,328,339,340,346,347,350,354,359,361,366,368,369,371,379,],[79,-265,79,79,79,79,79,125,79,-63,-65,79,125,-265,79,79,-265,125,125,-139,-143,125,125,-122,-124,-163,-164,-165,-166,-91,-92,125,79,-94,-102,-95,-96,-97,-98,-99,-100,-101,125,125,125,-50,-37,79,79,79,125,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-123,-125,-126,-127,-128,125,125,-144,-145,125,-64,125,125,125,125,-102,125,79,125,-129,79,125,-93,125,79,125,-49,125,125,125,-102,125,125,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,125,-130,125,-134,125,125,125,125,-201,125,-133,125,-167,125,125,-131,125,125,125,125,-265,79,79,-132,-265,79,]),'COMMA':([37,60,61,63,64,65,66,67,68,69,70,71,72,73,74,80,81,104,106,107,108,113,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,141,142,153,158,160,165,166,186,187,188,189,190,194,195,200,204,205,230,234,237,239,240,241,242,243,244,252,254,277,282,299,302,304,306,310,325,328,346,369,373,376,377,380,],[-265,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,143,-65,-46,161,-265,162,-14,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-30,-31,-265,-46,-45,-4,-103,-123,-125,-126,-127,-128,-144,-145,-64,257,-68,-265,-102,-43,-46,-44,-20,-22,-140,-129,-93,-23,-265,-102,-265,-45,-130,-134,-67,-133,-167,-131,-132,-265,379,-227,-226,]),'LEFT_BRACES':([51,52,60,61,63,64,65,66,67,68,69,70,71,72,73,74,78,94,95,96,97,98,99,113,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,141,142,153,156,157,159,165,166,186,187,188,189,190,194,195,204,205,220,221,222,223,224,230,233,236,241,242,243,244,252,254,258,259,269,270,271,272,273,274,275,276,277,282,297,299,300,304,306,310,317,318,320,325,328,334,340,346,350,360,361,369,371,378,],[94,-265,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,140,-265,-35,-32,-33,-34,-36,-14,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-30,-31,-265,94,-50,-37,-4,-103,-123,-125,-126,-127,-128,-144,-145,-66,-68,-179,-180,-181,-182,-183,-186,-265,-265,-20,-22,-140,-129,-93,-23,-49,94,94,-187,-188,94,-229,-230,-231,-232,-233,-102,319,-141,-142,-130,-134,-67,-85,-189,343,-133,-167,94,-237,-131,-265,-234,-265,-132,-265,-217,]),'COLON':([60,61,63,64,65,66,67,68,69,70,71,72,73,74,113,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,141,142,153,165,166,186,187,188,189,190,192,194,195,204,205,219,234,241,242,243,244,246,247,248,252,254,304,306,310,325,327,328,346,353,355,362,365,367,369,372,373,376,377,380,],[-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-14,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-30,-31,-265,-4,-103,-123,-125,-126,-127,-128,-265,-144,-145,-66,-68,259,-185,-20,-22,-140,-129,-141,305,-142,-93,-23,-130,-134,-67,-133,347,-167,-131,361,-215,-214,371,-224,-132,-223,-265,-225,-227,-226,]),'NOT':([77,89,94,111,119,120,123,124,125,126,129,150,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,253,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,305,314,315,316,347,350,354,361,371,],[120,120,-265,120,120,120,-163,-164,-165,-166,120,120,120,-50,120,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,120,120,120,120,120,120,120,120,-49,120,120,120,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,120,120,120,-201,120,120,120,-265,-265,]),'ADD':([77,89,94,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,137,138,139,150,153,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,225,229,230,233,234,236,243,244,246,252,253,257,258,259,269,277,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,299,304,305,306,307,310,314,315,316,317,325,327,328,339,340,346,347,350,354,359,361,369,371,],[123,123,-265,123,123,-139,-143,123,123,-122,-124,-163,-164,-165,-166,-91,-92,123,-94,-102,-95,-96,-97,-98,-99,-100,-101,123,123,123,-50,123,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-123,-125,-126,-127,-128,123,123,-144,-145,123,123,123,123,123,-102,123,123,-129,123,-93,123,123,-49,123,123,123,-102,123,123,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,123,-130,123,-134,123,123,123,123,-201,123,-133,123,-167,123,123,-131,123,123,123,123,-265,-132,-265,]),'SUB':([77,89,94,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,137,138,139,150,153,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,225,229,230,233,234,236,243,244,246,252,253,257,258,259,269,277,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,299,304,305,306,307,310,314,315,316,317,325,327,328,339,340,346,347,350,354,359,361,369,371,],[124,124,-265,124,124,-139,-143,124,124,-122,-124,-163,-164,-165,-166,-91,-92,124,-94,-102,-95,-96,-97,-98,-99,-100,-101,124,124,124,-50,124,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-123,-125,-126,-127,-128,124,124,-144,-145,124,124,124,124,124,-102,124,124,-129,124,-93,124,124,-49,124,124,124,-102,124,124,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,124,-130,124,-134,124,124,124,124,-201,124,-133,124,-167,124,124,-131,124,124,124,124,-265,-132,-265,]),'AND':([77,89,94,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,137,138,139,150,153,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,225,229,230,233,234,236,243,244,246,252,253,257,258,259,269,277,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,299,304,305,306,307,310,314,315,316,317,325,327,328,339,340,346,347,350,354,359,361,369,371,],[126,126,-265,126,126,-139,-143,126,126,-122,-124,-163,-164,-165,-166,-91,-92,126,-94,-102,-95,-96,-97,-98,-99,-100,-101,126,126,126,-50,126,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-123,-125,-126,-127,-128,126,126,-144,-145,126,126,126,126,126,-102,126,126,-129,126,-93,126,126,-49,126,126,126,-102,126,126,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,126,-130,126,-134,126,126,126,126,-201,126,-133,126,-167,126,126,-131,126,126,126,126,-265,-132,-265,]),'TYPECAST':([77,89,94,111,119,120,123,124,125,126,129,150,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,253,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,314,315,316,321,323,324,345,347,350,354,361,371,],[130,130,-265,130,130,130,-163,-164,-165,-166,130,130,130,-50,130,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,130,130,130,130,130,130,130,130,-49,130,130,130,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,130,130,130,-201,130,-219,-203,-218,130,130,130,-265,-265,]),'INTEGER':([77,89,94,111,119,120,123,124,125,126,129,150,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,253,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,314,315,316,321,323,324,345,347,350,354,361,371,],[133,133,-265,133,133,133,-163,-164,-165,-166,133,133,133,-50,133,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,133,133,133,133,133,133,133,133,-49,133,133,133,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,133,133,133,-201,133,-219,-203,-218,133,133,133,-265,-265,]),'OCTAL':([77,89,94,111,119,120,123,124,125,126,129,150,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,253,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,314,315,316,321,323,324,345,347,350,354,361,371,],[134,134,-265,134,134,134,-163,-164,-165,-166,134,134,134,-50,134,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,134,134,134,134,134,134,134,134,-49,134,134,134,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,134,134,134,-201,134,-219,-203,-218,134,134,134,-265,-265,]),'HEX':([77,89,94,111,119,120,123,124,125,126,129,150,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,253,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,314,315,316,321,323,324,345,347,350,354,361,371,],[135,135,-265,135,135,135,-163,-164,-165,-166,135,135,135,-50,135,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,135,135,135,135,135,135,135,135,-49,135,135,135,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,135,135,135,-201,135,-219,-203,-218,135,135,135,-265,-265,]),'FLOAT':([77,89,94,111,119,120,123,124,125,126,129,150,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,253,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,314,315,316,321,323,324,345,347,350,354,361,371,],[136,136,-265,136,136,136,-163,-164,-165,-166,136,136,136,-50,136,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,136,136,136,136,136,136,136,136,-49,136,136,136,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,136,136,136,-201,136,-219,-203,-218,136,136,136,-265,-265,]),'IMAGINARY':([77,89,94,111,119,120,123,124,125,126,129,150,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,253,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,314,315,316,321,323,324,345,347,350,354,361,371,],[137,137,-265,137,137,137,-163,-164,-165,-166,137,137,137,-50,137,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,137,137,137,137,137,137,137,137,-49,137,137,137,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,137,137,137,-201,137,-219,-203,-218,137,137,137,-265,-265,]),'RUNE':([77,89,94,111,119,120,123,124,125,126,129,150,156,157,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,192,193,225,229,233,236,253,257,258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,305,314,315,316,321,323,324,345,347,350,354,361,371,],[138,138,-265,138,138,138,-163,-164,-165,-166,138,138,138,-50,138,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,138,138,138,138,138,138,138,138,-49,138,138,138,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-265,-204,138,138,138,-201,138,-219,-203,-218,138,138,138,-265,-265,]),'RETURN':([94,156,157,258,259,361,371,],[-265,225,-50,-49,225,-265,-265,]),'BREAK':([94,156,157,258,259,361,371,],[-265,226,-50,-49,226,-265,-265,]),'CONTINUE':([94,156,157,258,259,361,371,],[-265,227,-50,-49,227,-265,-265,]),'GOTO':([94,156,157,258,259,361,371,],[-265,228,-50,-49,228,-265,-265,]),'IF':([94,156,157,258,259,334,361,371,],[-265,229,-50,-49,229,229,-265,-265,]),'FOR':([94,156,157,258,259,361,371,],[-265,233,-50,-49,233,-265,-265,]),'SWITCH':([94,156,157,258,259,361,371,],[-265,236,-50,-49,236,-265,-265,]),'RIGHT_BRACES':([94,140,155,156,157,198,199,258,308,319,341,342,343,352,356,357,361,364,370,371,375,],[-265,-265,206,-48,-50,254,-25,-49,-24,-265,351,-212,-265,-211,363,-221,-265,-220,-213,-265,-222,]),'RIGHT_BRACKET':([115,116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,243,244,246,248,252,304,305,306,325,326,327,328,346,359,369,],[167,-21,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-140,-129,304,-142,-93,-130,-265,-134,-133,346,-141,-167,-131,369,-132,]),'LOG_OR':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[169,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,169,-123,-125,-126,-127,-128,-144,-145,169,169,-102,169,-129,169,-93,169,169,-102,169,-130,-134,169,169,169,-133,169,-167,169,169,-131,169,-132,]),'LOG_AND':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[170,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,170,-123,-125,-126,-127,-128,-144,-145,170,170,-102,170,-129,170,-93,170,170,-102,170,-130,-134,170,170,170,-133,170,-167,170,170,-131,170,-132,]),'EQ':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[173,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,173,-123,-125,-126,-127,-128,-144,-145,173,173,-102,173,-129,173,-93,173,173,-102,173,-130,-134,173,173,173,-133,173,-167,173,173,-131,173,-132,]),'NEQ':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[174,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,174,-123,-125,-126,-127,-128,-144,-145,174,174,-102,174,-129,174,-93,174,174,-102,174,-130,-134,174,174,174,-133,174,-167,174,174,-131,174,-132,]),'LT':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[175,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,175,-123,-125,-126,-127,-128,-144,-145,175,175,-102,175,-129,175,-93,175,175,-102,175,-130,-134,175,175,175,-133,175,-167,175,175,-131,175,-132,]),'GT':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[176,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,176,-123,-125,-126,-127,-128,-144,-145,176,176,-102,176,-129,176,-93,176,176,-102,176,-130,-134,176,176,176,-133,176,-167,176,176,-131,176,-132,]),'LEQ':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[177,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,177,-123,-125,-126,-127,-128,-144,-145,177,177,-102,177,-129,177,-93,177,177,-102,177,-130,-134,177,177,177,-133,177,-167,177,177,-131,177,-132,]),'GEQ':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[178,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,178,-123,-125,-126,-127,-128,-144,-145,178,178,-102,178,-129,178,-93,178,178,-102,178,-130,-134,178,178,178,-133,178,-167,178,178,-131,178,-132,]),'OR':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[180,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,180,-123,-125,-126,-127,-128,-144,-145,180,180,-102,180,-129,180,-93,180,180,-102,180,-130,-134,180,180,180,-133,180,-167,180,180,-131,180,-132,]),'XOR':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[181,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,181,-123,-125,-126,-127,-128,-144,-145,181,181,-102,181,-129,181,-93,181,181,-102,181,-130,-134,181,181,181,-133,181,-167,181,181,-131,181,-132,]),'DIV':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[182,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,182,-123,-125,-126,-127,-128,-144,-145,182,182,-102,182,-129,182,-93,182,182,-102,182,-130,-134,182,182,182,-133,182,-167,182,182,-131,182,-132,]),'MOD':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[183,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,183,-123,-125,-126,-127,-128,-144,-145,183,183,-102,183,-129,183,-93,183,183,-102,183,-130,-134,183,183,183,-133,183,-167,183,183,-131,183,-132,]),'LSHIFT':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[184,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,184,-123,-125,-126,-127,-128,-144,-145,184,184,-102,184,-129,184,-93,184,184,-102,184,-130,-134,184,184,184,-133,184,-167,184,184,-131,184,-132,]),'RSHIFT':([116,117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,153,186,187,188,189,190,194,195,196,230,234,243,244,246,252,269,277,282,299,304,306,307,310,317,325,327,328,339,340,346,359,369,],[185,-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,185,-123,-125,-126,-127,-128,-144,-145,185,185,-102,185,-129,185,-93,185,185,-102,185,-130,-134,185,185,185,-133,185,-167,185,185,-131,185,-132,]),'INC':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,230,234,243,244,252,277,282,299,304,306,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,270,-102,-140,-129,-93,270,-102,270,-130,-134,-133,-167,-131,-132,]),'DEC':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,230,234,243,244,252,277,282,299,304,306,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,271,-102,-140,-129,-93,271,-102,271,-130,-134,-133,-167,-131,-132,]),'PLUS_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,286,-140,-129,-93,-265,286,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'MINUS_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,287,-140,-129,-93,-265,287,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'MULT_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,288,-140,-129,-93,-265,288,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'DIV_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,289,-140,-129,-93,-265,289,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'MOD_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,290,-140,-129,-93,-265,290,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'AND_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,291,-140,-129,-93,-265,291,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'OR_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,292,-140,-129,-93,-265,292,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'XOR_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,293,-140,-129,-93,-265,293,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'LSHIFT_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,294,-140,-129,-93,-265,294,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'RSHIFT_ASSIGN':([117,118,121,122,127,128,131,132,133,134,135,136,137,138,139,186,187,188,189,190,194,195,204,205,230,234,235,243,244,252,277,281,282,299,304,306,310,325,328,346,369,],[-139,-143,-122,-124,-91,-92,-94,-102,-95,-96,-97,-98,-99,-100,-101,-123,-125,-126,-127,-128,-144,-145,-66,-68,-265,-102,295,-140,-129,-93,-265,295,-102,-265,-130,-134,-67,-133,-167,-131,-132,]),'CASE':([156,157,258,319,341,342,343,352,356,357,361,364,370,371,375,],[-48,-50,-49,-265,354,-212,-265,-211,366,-221,-265,-220,-213,-265,-222,]),'DEFAULT':([156,157,258,319,341,342,343,352,356,357,361,364,370,371,375,],[-48,-50,-49,-265,355,-212,-265,-211,367,-221,-265,-220,-213,-265,-222,]),'ELSE':([206,312,],[-47,334,]),'RANGE':([233,273,279,280,316,],[-265,-238,315,-239,-240,]),'QUICK_ASSIGN':([234,282,322,],[283,283,345,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'SourceFile':([0,],[2,]),'PackageClause':([0,],[3,]),'PackageName':([4,13,46,],[6,29,29,]),'ImportDeclRep':([5,],[8,]),'epsilon':([5,8,13,26,35,36,37,39,44,46,52,53,88,94,100,107,140,153,156,192,193,225,226,227,230,233,236,259,277,298,299,305,309,312,314,319,343,350,361,371,373,],[9,12,30,47,55,58,81,83,87,30,98,103,151,157,103,81,199,205,220,248,251,262,265,265,205,273,300,220,205,323,205,248,331,335,337,342,357,220,157,157,377,]),'TopLevelDeclRep':([8,],[10,]),'ImportDecl':([8,],[11,]),'TopLevelDecl':([10,],[14,]),'Declaration':([10,156,259,],[15,208,208,]),'FunctionDecl':([10,],[16,]),'ConstDecl':([10,156,259,],[17,17,17,]),'TypeDecl':([10,156,259,],[18,18,18,]),'VarDecl':([10,156,259,],[19,19,19,]),'ImportSpec':([13,46,],[25,91,]),'PackageNameDotOpt':([13,46,],[27,27,]),'FunctionName':([20,],[32,]),'ConstSpec':([21,54,],[34,110,]),'IdentifierList':([21,23,53,54,86,100,161,162,198,],[36,45,105,36,45,105,238,238,256,]),'TypeSpec':([22,82,],[38,145,]),'AliasDecl':([22,82,],[40,40,]),'TypeDef':([22,82,],[41,41,]),'VarSpec':([23,86,],[43,148,]),'ImportSpecRep':([26,],[46,]),'ImportPath':([27,],[48,]),'Function':([32,],[50,]),'Signature':([32,],[51,]),'Parameters':([32,52,],[52,95,]),'ConstSpecRep':([35,],[54,]),'TypeExprListOpt':([36,],[56,]),'TypeOpt':([36,],[57,]),'Type':([36,42,45,52,53,62,79,84,100,105,130,161,162,167,238,245,256,366,368,379,],[59,85,88,99,104,112,142,146,158,160,197,239,239,242,302,303,309,373,303,380,]),'TypeName':([36,42,45,52,53,62,79,84,100,105,114,130,161,162,167,238,245,256,366,368,379,],[60,60,60,60,60,60,60,60,60,60,166,60,60,60,60,60,60,60,60,60,60,]),'TypeLit':([36,42,45,52,53,62,79,84,100,105,130,161,162,167,238,245,256,366,368,379,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TypeToken':([36,42,45,52,53,62,79,84,100,105,114,130,161,162,167,238,245,256,366,368,379,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'QualifiedIdent':([36,42,45,52,53,62,79,84,100,105,114,130,161,162,167,238,245,256,366,368,379,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'ArrayType':([36,42,45,52,53,62,79,84,100,105,130,161,162,167,238,245,256,366,368,379,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'StructType':([36,42,45,52,53,62,79,84,100,105,130,161,162,167,238,245,256,366,368,379,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'PointerType':([36,42,45,52,53,62,79,84,100,105,130,161,162,167,238,245,256,366,368,379,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'IdentifierRep':([37,107,],[80,80,]),'TypeSpecRep':([39,],[82,]),'VarSpecRep':([44,],[86,]),'FunctionBody':([51,],[92,]),'Block':([51,156,259,269,272,334,],[93,215,215,312,313,349,]),'ResultOpt':([52,],[96,]),'Result':([52,],[97,]),'ParameterListOpt':([53,100,],[101,101,]),'ParametersList':([53,100,],[102,102,]),'ParameterDeclCommaRep':([53,100,],[106,106,]),'ParameterDecl':([53,100,161,162,],[108,108,237,240,]),'ArrayLength':([77,],[115,]),'Expression':([77,89,111,129,150,156,168,192,193,225,229,233,236,253,257,259,283,284,305,314,315,347,350,354,],[116,153,153,196,153,230,243,246,153,153,269,277,299,307,310,230,317,153,327,339,340,359,230,153,]),'UnaryExpr':([77,89,111,119,120,129,150,156,168,192,193,225,229,233,236,253,257,259,283,284,305,314,315,347,350,354,],[117,117,117,194,195,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'PrimaryExpr':([77,89,111,119,120,129,150,156,168,192,193,225,229,233,236,253,257,259,283,284,305,314,315,321,347,350,354,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,344,118,118,118,]),'UnaryOp':([77,89,111,116,119,120,129,150,153,156,168,192,193,196,225,229,230,233,236,243,246,253,257,259,269,277,283,284,299,305,307,310,314,315,317,327,339,340,347,350,354,359,],[119,119,119,179,119,119,119,119,179,119,119,119,119,179,119,119,179,119,119,179,179,119,119,119,179,179,119,119,179,119,179,179,119,119,179,179,179,179,119,119,119,179,]),'Operand':([77,89,111,119,120,129,150,156,168,192,193,225,229,233,236,253,257,259,283,284,305,314,315,321,347,350,354,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'Conversion':([77,89,111,119,120,129,150,156,168,192,193,225,229,233,236,253,257,259,283,284,305,314,315,321,347,350,354,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'Literal':([77,89,111,119,120,129,150,156,168,192,193,225,229,233,236,253,257,259,283,284,305,314,315,321,347,350,354,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'OperandName':([77,89,111,119,120,129,150,156,168,192,193,225,229,233,236,253,257,259,283,284,305,314,315,321,347,350,354,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'BasicLit':([77,89,111,119,120,129,150,156,168,192,193,225,229,233,236,253,257,259,283,284,305,314,315,321,347,350,354,],[131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,]),'BaseType':([79,],[141,]),'ExpressionListOpt':([88,],[149,]),'ExpressionList':([89,111,150,156,193,225,233,236,259,284,350,354,],[152,164,203,235,250,261,281,235,235,318,235,362,]),'StatementList':([94,361,371,],[155,370,375,]),'StatementRep':([94,361,371,],[156,156,156,]),'BinaryOp':([116,153,196,230,243,246,269,277,299,307,310,317,327,339,340,359,],[168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,]),'RelOp':([116,153,196,230,243,246,269,277,299,307,310,317,327,339,340,359,],[171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,]),'AddMulOp':([116,153,196,230,243,246,269,277,299,307,310,317,327,339,340,359,],[172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,]),'Selector':([118,344,],[186,186,]),'Index':([118,344,],[187,187,]),'Slice':([118,344,],[188,188,]),'TypeAssertion':([118,344,],[189,189,]),'Arguments':([118,344,],[190,190,]),'FieldDeclRep':([140,],[198,]),'ExpressionRep':([153,230,277,299,],[204,204,204,204,]),'Statement':([156,259,],[207,311,]),'LabeledStmt':([156,259,],[209,209,]),'SimpleStmt':([156,233,236,259,350,],[210,278,301,210,360,]),'ReturnStmt':([156,259,],[211,211,]),'BreakStmt':([156,259,],[212,212,]),'ContinueStmt':([156,259,],[213,213,]),'GotoStmt':([156,259,],[214,214,]),'IfStmt':([156,259,334,],[216,216,348,]),'SwitchStmt':([156,259,],[217,217,]),'ForStmt':([156,259,],[218,218,]),'Label':([156,226,227,228,259,],[219,264,264,268,219,]),'ExpressionStmt':([156,233,236,259,350,],[221,221,221,221,221,]),'IncDecStmt':([156,233,236,259,350,],[222,222,222,222,222,]),'Assignment':([156,233,236,259,350,],[223,223,223,223,223,]),'ShortVarDecl':([156,233,236,259,350,],[224,224,224,224,224,]),'ExprSwitchStmt':([156,259,],[231,231,]),'TypeSwitchStmt':([156,259,],[232,232,]),'ElementType':([167,],[241,]),'ExpressionOpt':([192,236,305,],[247,297,326,]),'ExpressionListTypeOpt':([193,],[249,]),'FieldDecl':([198,],[255,]),'ExpressionListPureOpt':([225,],[260,]),'LabelOpt':([226,227,],[263,267,]),'ConditionBlockOpt':([233,],[272,]),'Condition':([233,314,],[274,338,]),'ForClause':([233,],[275,]),'RangeClause':([233,],[276,]),'ExpressionIdentListOpt':([233,],[279,]),'ExpressionIdentifier':([233,],[280,]),'assign_op':([235,281,],[284,284,]),'AssignOp':([235,281,],[285,285,]),'SimpleStmtOpt':([236,],[298,]),'TypeSwitchGuard':([298,],[320,]),'IdentifierOpt':([298,],[321,]),'TagOpt':([309,],[329,]),'Tag':([309,],[330,]),'ElseOpt':([312,],[333,]),'ConditionOpt':([314,],[336,]),'ExprCaseClauseRep':([319,],[341,]),'ExprCaseClause':([341,],[352,]),'ExprSwitchCase':([341,],[353,]),'TypeCaseClauseOpt':([343,],[356,]),'TypeCaseClause':([356,],[364,]),'TypeSwitchCase':([356,],[365,]),'TypeList':([366,],[372,]),'TypeRep':([373,],[376,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',24),
  ('Type -> TypeName','Type',1,'p_type','parser.py',31),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',32),
  ('Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS','Type',3,'p_type','parser.py',33),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',40),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',41),
  ('TypeToken -> INT_T','TypeToken',1,'p_type_token','parser.py',45),
  ('TypeToken -> FLOAT_T','TypeToken',1,'p_type_token','parser.py',46),
  ('TypeToken -> UINT_T','TypeToken',1,'p_type_token','parser.py',47),
  ('TypeToken -> COMPLEX_T','TypeToken',1,'p_type_token','parser.py',48),
  ('TypeToken -> RUNE_T','TypeToken',1,'p_type_token','parser.py',49),
  ('TypeToken -> BOOL_T','TypeToken',1,'p_type_token','parser.py',50),
  ('TypeToken -> STRING_T','TypeToken',1,'p_type_token','parser.py',51),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',52),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',59),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',60),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',61),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',65),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',66),
  ('ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType','ArrayType',4,'p_array_type','parser.py',76),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',80),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',84),
  ('StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES','StructType',4,'p_struct_type','parser.py',92),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',96),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',97),
  ('FieldDecl -> IdentifierList Type TagOpt','FieldDecl',3,'p_field_decl','parser.py',104),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','parser.py',108),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','parser.py',109),
  ('Tag -> STRING','Tag',1,'p_Tag','parser.py',113),
  ('PointerType -> MULT BaseType','PointerType',2,'p_point_type','parser.py',120),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',124),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',131),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',135),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',136),
  ('Result -> Parameters','Result',1,'p_result','parser.py',140),
  ('Result -> Type','Result',1,'p_result','parser.py',141),
  ('Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS','Parameters',3,'p_params','parser.py',145),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_param_list_opt','parser.py',149),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_param_list_opt','parser.py',150),
  ('ParametersList -> Type','ParametersList',1,'p_param_list','parser.py',154),
  ('ParametersList -> IdentifierList Type','ParametersList',2,'p_param_list','parser.py',155),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_param_list','parser.py',156),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',163),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',164),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',168),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',169),
  ('Block -> LEFT_BRACES StatementList RIGHT_BRACES','Block',3,'p_block','parser.py',179),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',183),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',187),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',188),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',198),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',199),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',200),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',204),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',205),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',212),
  ('ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS','ConstDecl',4,'p_const_decl','parser.py',213),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',220),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',221),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',228),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',232),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',233),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',240),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',244),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',245),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',252),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',256),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',257),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',267),
  ('TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS','TypeDecl',4,'p_type_decl','parser.py',268),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',275),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',276),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',283),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',284),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',288),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',295),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',302),
  ('VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS','VarDecl',4,'p_var_decl','parser.py',303),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',310),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',311),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',318),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',319),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',326),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',327),
  ('ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',337),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',345),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',346),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',350),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',354),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',358),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',365),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',366),
  ('Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS','Operand',3,'p_operand','parser.py',367),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',374),
  ('BasicLit -> INTEGER','BasicLit',1,'p_basic_lit','parser.py',379),
  ('BasicLit -> OCTAL','BasicLit',1,'p_basic_lit','parser.py',380),
  ('BasicLit -> HEX','BasicLit',1,'p_basic_lit','parser.py',381),
  ('BasicLit -> FLOAT','BasicLit',1,'p_basic_lit','parser.py',382),
  ('BasicLit -> IMAGINARY','BasicLit',1,'p_basic_lit','parser.py',383),
  ('BasicLit -> RUNE','BasicLit',1,'p_basic_lit','parser.py',384),
  ('BasicLit -> STRING','BasicLit',1,'p_basic_lit','parser.py',385),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',389),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_quali_ident','parser.py',396),
  ('CompositeLit -> LiteralType LiteralValue','CompositeLit',2,'p_comp_lit','parser.py',403),
  ('LiteralType -> ArrayType','LiteralType',1,'p_lit_type','parser.py',407),
  ('LiteralType -> ElementType','LiteralType',1,'p_lit_type','parser.py',408),
  ('LiteralType -> TypeName','LiteralType',1,'p_lit_type','parser.py',409),
  ('LiteralValue -> LEFT_BRACES ElementListOpt RIGHT_BRACES','LiteralValue',3,'p_lit_val','parser.py',413),
  ('ElementListOpt -> ElementList','ElementListOpt',1,'p_elem_list_comma_opt','parser.py',417),
  ('ElementListOpt -> epsilon','ElementListOpt',1,'p_elem_list_comma_opt','parser.py',418),
  ('ElementList -> KeyedElement KeyedElementCommaRep','ElementList',2,'p_elem_list','parser.py',422),
  ('KeyedElementCommaRep -> KeyedElementCommaRep COMMA KeyedElement','KeyedElementCommaRep',3,'p_key_elem_comma_rep','parser.py',426),
  ('KeyedElementCommaRep -> epsilon','KeyedElementCommaRep',1,'p_key_elem_comma_rep','parser.py',427),
  ('KeyedElement -> Key COLON Element','KeyedElement',3,'p_key_elem','parser.py',434),
  ('KeyedElement -> Element','KeyedElement',1,'p_key_elem','parser.py',435),
  ('Key -> FieldName','Key',1,'p_key','parser.py',442),
  ('Key -> Expression','Key',1,'p_key','parser.py',443),
  ('Key -> LiteralValue','Key',1,'p_key','parser.py',444),
  ('FieldName -> IDENTIFIER','FieldName',1,'p_field_name','parser.py',448),
  ('Element -> Expression','Element',1,'p_elem','parser.py',452),
  ('Element -> LiteralValue','Element',1,'p_elem','parser.py',453),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',460),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',461),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',462),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_prim_expr','parser.py',463),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',464),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',465),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_prim_expr','parser.py',466),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',473),
  ('Index -> LEFT_BRACKET Expression RIGHT_BRACKET','Index',3,'p_index','parser.py',477),
  ('Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET','Slice',5,'p_slice','parser.py',481),
  ('Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET','Slice',7,'p_slice','parser.py',482),
  ('TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS','TypeAssertion',4,'p_type_assert','parser.py',489),
  ('Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS','Arguments',3,'p_argument','parser.py',493),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',497),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',498),
  ('ExpressionListCommaOpt -> COMMA ExpressionList','ExpressionListCommaOpt',2,'p_expr_list_comma_opt','parser.py',506),
  ('ExpressionListCommaOpt -> epsilon','ExpressionListCommaOpt',1,'p_expr_list_comma_opt','parser.py',507),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',517),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',518),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',525),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',526),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',530),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',531),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',532),
  ('BinaryOp -> LOG_OR','BinaryOp',1,'p_binary_op','parser.py',541),
  ('BinaryOp -> LOG_AND','BinaryOp',1,'p_binary_op','parser.py',542),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',543),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','parser.py',544),
  ('RelOp -> EQ','RelOp',1,'p_rel_op','parser.py',553),
  ('RelOp -> NEQ','RelOp',1,'p_rel_op','parser.py',554),
  ('RelOp -> LT','RelOp',1,'p_rel_op','parser.py',555),
  ('RelOp -> GT','RelOp',1,'p_rel_op','parser.py',556),
  ('RelOp -> LEQ','RelOp',1,'p_rel_op','parser.py',557),
  ('RelOp -> GEQ','RelOp',1,'p_rel_op','parser.py',558),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','parser.py',573),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','parser.py',574),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','parser.py',575),
  ('AddMulOp -> DIV','AddMulOp',1,'p_add_mul_op','parser.py',576),
  ('AddMulOp -> MOD','AddMulOp',1,'p_add_mul_op','parser.py',577),
  ('AddMulOp -> LSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',578),
  ('AddMulOp -> RSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',579),
  ('UnaryOp -> ADD','UnaryOp',1,'p_unary_op','parser.py',596),
  ('UnaryOp -> SUB','UnaryOp',1,'p_unary_op','parser.py',597),
  ('UnaryOp -> MULT','UnaryOp',1,'p_unary_op','parser.py',598),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',599),
  ('Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS','Conversion',5,'p_conversion','parser.py',615),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',626),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',627),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',628),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',629),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',630),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',631),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',632),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',633),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',634),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',635),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',636),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',642),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',643),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',644),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',645),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',646),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',651),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',655),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',660),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_inc_dec','parser.py',664),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_inc_dec','parser.py',665),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',673),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',677),
  ('AssignOp -> PLUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',681),
  ('AssignOp -> MINUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',682),
  ('AssignOp -> MULT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',683),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',684),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',685),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',686),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',687),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',688),
  ('AssignOp -> LSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',689),
  ('AssignOp -> RSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',690),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',691),
  ('IfStmt -> IF Expression Block ElseOpt','IfStmt',4,'p_if_statement','parser.py',696),
  ('SimpleStmtOpt -> SimpleStmt SEMICOLON','SimpleStmtOpt',2,'p_SimpleStmtOpt','parser.py',700),
  ('SimpleStmtOpt -> epsilon','SimpleStmtOpt',1,'p_SimpleStmtOpt','parser.py',701),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',708),
  ('ElseOpt -> ELSE Block','ElseOpt',2,'p_else_opt','parser.py',709),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',710),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',725),
  ('SwitchStmt -> TypeSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',726),
  ('ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES','ExprSwitchStmt',5,'p_expr_switch_stmt','parser.py',731),
  ('ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause','ExprCaseClauseRep',2,'p_expr_case_clause_rep','parser.py',735),
  ('ExprCaseClauseRep -> epsilon','ExprCaseClauseRep',1,'p_expr_case_clause_rep','parser.py',736),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','parser.py',743),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_expr_switch_case','parser.py',747),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','parser.py',748),
  ('TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES','TypeSwitchStmt',6,'p_type_switch_stmt','parser.py',755),
  ('TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS','TypeSwitchGuard',6,'p_type_switch_guard','parser.py',760),
  ('IdentifierOpt -> IDENTIFIER QUICK_ASSIGN','IdentifierOpt',2,'p_identifier_opt','parser.py',765),
  ('IdentifierOpt -> epsilon','IdentifierOpt',1,'p_identifier_opt','parser.py',766),
  ('TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause','TypeCaseClauseOpt',2,'p_type_case_clause_opt','parser.py',774),
  ('TypeCaseClauseOpt -> epsilon','TypeCaseClauseOpt',1,'p_type_case_clause_opt','parser.py',775),
  ('TypeCaseClause -> TypeSwitchCase COLON StatementList','TypeCaseClause',3,'p_type_case_clause','parser.py',782),
  ('TypeSwitchCase -> CASE TypeList','TypeSwitchCase',2,'p_type_switch_case','parser.py',787),
  ('TypeSwitchCase -> DEFAULT','TypeSwitchCase',1,'p_type_switch_case','parser.py',788),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','parser.py',795),
  ('TypeRep -> TypeRep COMMA Type','TypeRep',3,'p_type_rep','parser.py',799),
  ('TypeRep -> epsilon','TypeRep',1,'p_type_rep','parser.py',800),
  ('ForStmt -> FOR ConditionBlockOpt Block','ForStmt',3,'p_for','parser.py',815),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',819),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',820),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',821),
  ('ConditionBlockOpt -> RangeClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',822),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',826),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',830),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',835),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',836),
  ('RangeClause -> ExpressionIdentListOpt RANGE Expression','RangeClause',3,'p_rageclause','parser.py',841),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',845),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',846),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',850),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',857),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',861),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',862),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',866),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',870),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',874),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',875),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',879),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',886),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',890),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',891),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',898),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',899),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',909),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',914),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',921),
  ('ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS','ImportDecl',4,'p_import_decl','parser.py',922),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',929),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',930),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',937),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',941),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',942),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',943),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',950),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',956),
]
