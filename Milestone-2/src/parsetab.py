
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLOG_ORleftLOG_ANDleftORleftXORleftANDleftEQNEQleftLTGTLEQGEQleftLSHIFTRSHIFTleftADDSUBleftMULTDIVMODADD AND AND_ASSIGN ASSIGN BOOL_T BREAK CASE COLON COMMA COMPLEX_T CONST CONTINUE DEC DEFAULT DIV DIV_ASSIGN DOT ELSE EQ FLOAT FLOAT_T FOR FUNC GEQ GOTO GT HEX IDENTIFIER IF IMAGINARY IMPORT INC INTEGER INT_T LEFT_BRACES LEFT_BRACKET LEFT_PARANTHESIS LEQ LOG_AND LOG_OR LSHIFT LSHIFT_ASSIGN LT MINUS_ASSIGN MOD MOD_ASSIGN MULT MULT_ASSIGN NEQ NOT OCTAL OR OR_ASSIGN PACKAGE PLUS_ASSIGN QUICK_ASSIGN RANGE RETURN RIGHT_BRACES RIGHT_BRACKET RIGHT_PARANTHESIS RSHIFT RSHIFT_ASSIGN RUNE RUNE_T SEMICOLON STRING STRING_T STRUCT SUB SWITCH TYPE TYPECAST UINT_T VAR XOR XOR_ASSIGNstart : SourceFileType : TypeName\n            | TypeLit\n            | LEFT_PARANTHESIS Type RIGHT_PARANTHESISTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT_T\n                 | FLOAT_T\n                 | UINT_T\n                 | COMPLEX_T\n                 | RUNE_T\n                 | BOOL_T\n                 | STRING_T\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | StructType\n               | PointerTypeTypeOpt : Type\n               | epsilonArrayType : LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType ArrayLength : Expression  ElementType : Type StructType : CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                    | epsilon  FieldDecl : IdentifierList Type TagOpt : Tag\n                | epsilon  Tag : STRING PointerType : MULT BaseTypeBaseType : TypeSignature : Parameters TypeOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESISParameterListOpt : ParametersList\n                             | epsilonParametersList : ParameterDecl\n                      | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                             | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LEFT_BRACES StatementList RIGHT_BRACESStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                    | TypeDecl\n                    | VarDeclTopLevelDecl : Declaration\n                    | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESISConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList Type ASSIGN ExpressionListTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESISTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESISVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER QUICK_ASSIGN Expression FunctionDecl : FUNC FunctionName CreateScope Function EndScope\n                    | FUNC FunctionName CreateScope Signature EndScopeCreateFuncScope : CreateScope : EndScope : FunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockOperand : Literal\n               | OperandName\n               | LEFT_PARANTHESIS Expression RIGHT_PARANTHESISLiteral : BasicLitBasicLit : I INTEGER\n                | I OCTAL\n                | I HEX\n                | F FLOAT\n                | C IMAGINARY\n                | I RUNE\n                | S STRING I :  F :  C :  S : OperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNamePrimaryExpr : Operand\n                   | PrimaryExpr Selector\n                   | Conversion\n                   | PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET\n                   | PrimaryExpr Slice\n                   | PrimaryExpr TypeAssertion\n                   | PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESISSelector : DOT IDENTIFIERIndex : LEFT_BRACKET Expression RIGHT_BRACKETSlice : LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET\n             | LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKETTypeAssertion : DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESISExpressionListTypeOpt : ExpressionList\n                             | epsilonExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprBinaryOp : LOG_OR\n                | LOG_AND\n                | RelOp\n                | AddMulOpRelOp : EQ\n             | NEQ\n             | LT\n             | GT\n             | LEQ\n             | GEQAddMulOp : UnaryOp\n                | OR\n                | XOR\n                | DIV\n                | MOD\n                | LSHIFT\n                | RSHIFTUnaryOp : ADD\n               | SUB\n               | MULT\n               | AND Conversion : TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESISStatement : Declaration\n                 | LabeledStmt\n                 | SimpleStmt\n                 | ReturnStmt\n                 | CreateScope Block EndScope\n                 | BreakStmt\n                 | ContinueStmt\n                 | GotoStmt\n                 | Block\n                 | IfStmt\n                 | SwitchStmt\n                 | ForStmt  SimpleStmt : epsilon\n                    | ExpressionStmt\n                    | IncDecStmt\n                    | Assignment\n                    | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INC\n                    | Expression DEC  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUS_ASSIGN\n                 | MINUS_ASSIGN\n                 | MULT_ASSIGN\n                 | DIV_ASSIGN\n                 | MOD_ASSIGN\n                 | AND_ASSIGN\n                 | OR_ASSIGN\n                 | XOR_ASSIGN\n                 | LSHIFT_ASSIGN\n                 | RSHIFT_ASSIGN\n                 | ASSIGN  IfStmt : IF Expression CreateScope Block EndScope ElseOpt SimpleStmtOpt : SimpleStmt SEMICOLON\n                        | epsilon  ElseOpt : ELSE IfStmt\n                | ELSE CreateScope Block EndScope\n                | epsilon  SwitchStmt : ExprSwitchStmt\n                    | TypeSwitchStmt  ExprSwitchStmt : SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES StartSwitch :  ExprCaseClauseRep : ExprCaseClauseRep ExprCaseClause\n                            | epsilon ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                        | DEFAULT  TypeSwitchStmt : SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES TypeSwitchGuard : IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS  IdentifierOpt : IDENTIFIER QUICK_ASSIGN\n                      | epsilon  TypeCaseClauseOpt : TypeCaseClauseOpt TypeCaseClause\n                          | epsilon  TypeCaseClause : TypeSwitchCase COLON StatementList TypeSwitchCase : CASE TypeList\n                       | DEFAULT  TypeList : Type TypeRep TypeRep : TypeRep COMMA Type\n                | epsilon ForStmt : FOR CreateScope ConditionBlockOpt Block EndScopeConditionBlockOpt : epsilon\n                | Condition\n                | ForClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n            | Condition ExpressionIdentListOpt : epsilon\n               | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n                            | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n            | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n            | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                        | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n            | IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n                | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                            | PackageName\n                            | epsilon ImportPath : STRING epsilon : '
    
_lr_action_items = {'PACKAGE':([0,],[4,]),'$end':([1,2,5,8,9,10,12,24,31,],[0,-1,-249,-249,-234,-233,-237,-235,-236,]),'SEMICOLON':([3,6,7,11,14,15,16,17,18,19,25,34,38,40,42,47,48,53,54,56,57,58,59,60,61,62,63,64,65,66,67,77,80,82,83,84,85,86,88,89,92,96,97,100,101,107,108,110,111,117,118,120,121,122,123,124,126,127,128,130,131,132,133,134,135,136,137,147,148,149,169,171,172,175,176,179,180,181,182,183,184,185,190,191,192,194,195,196,200,201,202,209,211,216,217,218,219,220,221,223,224,225,226,227,228,229,231,232,233,234,235,236,237,238,241,242,243,244,245,247,250,252,255,256,258,259,260,261,262,263,264,265,266,267,268,269,270,272,273,274,291,292,293,294,297,298,299,301,302,303,306,309,310,311,312,319,321,322,323,330,331,332,333,334,335,336,344,345,347,349,351,357,361,365,370,],[5,-238,-239,24,31,-53,-54,-50,-51,-52,-240,-55,-68,-72,-75,-244,-248,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-74,-249,-241,129,-88,-88,-249,-56,146,-14,-123,-127,-109,-111,-92,-93,-95,-107,-30,-31,-69,188,-76,189,-79,-82,-80,-249,-84,-85,-90,-91,-249,-32,-18,-19,-59,-4,-108,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-81,-65,-67,-249,-49,-37,-20,-22,-124,-116,-94,-46,259,-152,-153,-154,-155,-160,-157,-158,-159,-161,-162,-163,-164,-165,-166,-167,-168,-249,-249,-249,-171,-193,-194,-87,-107,-249,-112,-115,-88,300,-66,-48,-88,-249,-225,-226,-227,-228,-230,-231,-170,-229,-232,-172,-173,-249,-171,-164,318,-107,-120,-151,-23,-26,-156,-169,-164,-171,323,-83,-174,-118,-88,-88,-249,-249,-214,348,-220,-221,-218,-195,-119,-187,-192,-249,-202,-190,-249,-88,-191,]),'IDENTIFIER':([4,13,20,21,22,23,26,35,36,37,39,41,43,44,45,46,50,51,55,68,70,72,73,74,75,76,78,79,81,86,87,90,93,98,99,102,103,104,105,106,109,119,125,129,134,143,145,146,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,174,186,187,188,189,194,195,196,197,198,210,212,213,214,215,236,237,238,239,240,244,247,251,257,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,300,315,317,318,320,323,328,339,343,348,349,354,356,361,364,371,],[7,7,33,37,41,37,-249,-249,69,-249,-249,69,-249,69,7,-243,37,-58,69,92,111,69,-62,-64,41,-71,37,-78,111,69,145,111,69,111,111,111,-147,-148,-149,-150,69,187,111,-242,-249,69,-249,-57,69,111,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,111,111,209,-249,-63,-70,-77,245,-49,-37,145,145,69,111,37,-25,111,111,268,268,268,111,-87,294,111,69,-48,245,294,111,111,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,316,-189,-24,111,-205,-188,111,111,-204,111,209,294,-249,69,69,-249,92,69,]),'IMPORT':([5,8,9,24,],[-249,13,-234,-235,]),'FUNC':([5,8,9,10,12,24,31,],[-249,-249,-234,20,-237,-235,-236,]),'CONST':([5,8,9,10,12,24,31,134,194,195,259,261,349,361,],[-249,-249,-234,21,-237,-235,-236,-249,21,-49,-48,21,-249,-249,]),'TYPE':([5,8,9,10,12,24,31,36,37,41,44,55,72,73,74,86,87,93,109,134,143,145,150,187,194,195,196,197,198,210,257,259,261,349,354,356,361,371,],[-249,-249,-234,22,-237,-235,-236,68,-249,68,68,68,68,-62,-64,68,68,68,68,-249,68,-249,68,-63,22,-49,-37,68,68,68,68,-48,22,-249,68,364,-249,68,]),'VAR':([5,8,9,10,12,24,31,134,194,195,259,261,349,361,],[-249,-249,-234,23,-237,-235,-236,-249,23,-49,-48,23,-249,-249,]),'STRING':([7,13,26,27,28,29,30,45,46,70,81,90,98,99,102,103,104,105,106,115,125,129,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,315,317,318,320,323,328,339,348,349,361,],[-239,-249,-249,48,-245,-246,-247,-249,-243,-106,-106,-106,-106,-106,-106,-147,-148,-149,-150,185,-106,-242,-249,-106,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-106,-106,-106,-49,-106,-106,-106,-106,-87,-106,-106,-48,-106,-106,-106,-106,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,-106,-205,-188,-106,-106,-204,-106,-106,-249,-249,]),'LEFT_PARANTHESIS':([13,21,22,23,32,33,36,37,41,44,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,73,74,81,86,87,90,92,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,117,118,125,134,143,145,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,182,183,184,185,187,194,195,196,197,198,200,201,209,210,211,212,215,236,240,244,245,247,250,251,252,255,257,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,294,297,298,299,315,317,318,319,320,323,327,328,339,343,344,348,349,354,356,361,371,],[26,35,39,43,-87,-89,55,-249,55,55,87,-2,-3,55,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,102,55,-62,-64,102,55,55,102,-14,173,102,102,-109,-111,102,-147,-148,-149,-150,-92,-93,55,-95,-107,-30,-31,102,-249,55,-249,-4,-108,55,102,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-110,102,-113,-114,102,210,212,-96,-97,-98,-101,-99,-100,-102,-63,102,-49,-37,55,55,-20,-22,-116,55,-94,102,102,102,102,-87,-107,102,-112,102,-115,-88,55,-48,102,102,102,102,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,-107,-120,-151,-23,102,-205,-188,-118,102,102,173,-204,102,356,-119,102,-249,55,55,-249,55,]),'DOT':([13,26,45,46,69,97,100,101,107,108,110,111,129,145,169,171,172,179,180,181,182,183,184,185,209,211,245,250,252,294,297,298,319,327,344,],[28,-249,28,-243,93,174,-109,-111,-92,-93,-95,-107,-242,93,-110,-113,-114,-96,-97,-98,-101,-99,-100,-102,-116,-94,-107,-112,-115,-107,-120,-151,-118,343,-119,]),'RIGHT_PARANTHESIS':([26,35,39,43,45,46,50,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,75,76,78,79,87,91,92,96,97,100,101,107,108,110,111,117,118,128,129,138,139,140,141,142,144,146,148,149,169,171,172,173,175,176,177,179,180,181,182,183,184,185,188,189,191,192,199,200,201,202,206,207,208,209,211,248,249,250,252,253,254,255,258,297,298,299,319,344,364,],[-249,-249,-249,-249,82,-243,88,-58,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,120,-71,122,-78,-249,148,-14,-123,-127,-109,-111,-92,-93,-95,-107,-30,-31,-249,-242,196,-38,-39,-40,-41,-45,-57,-4,-108,-110,-113,-114,-249,-128,-129,211,-96,-97,-98,-101,-99,-100,-102,-70,-77,-65,-67,-44,-20,-22,-124,252,-121,-122,-116,-94,-43,-42,-112,-115,297,298,-88,-66,-120,-151,-23,-118,-119,369,]),'INT_T':([36,37,41,44,55,72,73,74,86,87,93,109,143,145,150,187,196,197,198,210,257,354,356,371,],[61,-249,61,61,61,61,-62,-64,61,61,61,61,61,-249,61,-63,-37,61,61,61,61,61,61,61,]),'FLOAT_T':([36,37,41,44,55,72,73,74,86,87,93,109,143,145,150,187,196,197,198,210,257,354,356,371,],[62,-249,62,62,62,62,-62,-64,62,62,62,62,62,-249,62,-63,-37,62,62,62,62,62,62,62,]),'UINT_T':([36,37,41,44,55,72,73,74,86,87,93,109,143,145,150,187,196,197,198,210,257,354,356,371,],[63,-249,63,63,63,63,-62,-64,63,63,63,63,63,-249,63,-63,-37,63,63,63,63,63,63,63,]),'COMPLEX_T':([36,37,41,44,55,72,73,74,86,87,93,109,143,145,150,187,196,197,198,210,257,354,356,371,],[64,-249,64,64,64,64,-62,-64,64,64,64,64,64,-249,64,-63,-37,64,64,64,64,64,64,64,]),'RUNE_T':([36,37,41,44,55,72,73,74,86,87,93,109,143,145,150,187,196,197,198,210,257,354,356,371,],[65,-249,65,65,65,65,-62,-64,65,65,65,65,65,-249,65,-63,-37,65,65,65,65,65,65,65,]),'BOOL_T':([36,37,41,44,55,72,73,74,86,87,93,109,143,145,150,187,196,197,198,210,257,354,356,371,],[66,-249,66,66,66,66,-62,-64,66,66,66,66,66,-249,66,-63,-37,66,66,66,66,66,66,66,]),'STRING_T':([36,37,41,44,55,72,73,74,86,87,93,109,143,145,150,187,196,197,198,210,257,354,356,371,],[67,-249,67,67,67,67,-62,-64,67,67,67,67,67,-249,67,-63,-37,67,67,67,67,67,67,67,]),'LEFT_BRACKET':([36,37,41,44,55,72,73,74,86,87,97,100,101,107,108,109,110,111,143,145,150,169,171,172,179,180,181,182,183,184,185,187,196,197,198,209,210,211,245,250,252,257,294,297,298,319,327,344,354,356,371,],[70,-249,70,70,70,70,-62,-64,70,70,170,-109,-111,-92,-93,70,-95,-107,70,-249,70,-110,-113,-114,-96,-97,-98,-101,-99,-100,-102,-63,-37,70,70,-116,70,-94,-107,-112,-115,70,-107,-120,-151,-118,170,-119,70,70,70,]),'MULT':([36,37,41,44,55,70,72,73,74,81,86,87,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,125,128,134,143,145,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,179,180,181,182,183,184,185,187,194,195,196,197,198,202,203,209,210,211,212,215,236,240,241,244,245,247,250,251,252,254,257,258,259,261,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,291,294,296,297,298,309,311,319,320,323,329,335,339,344,348,349,354,356,361,371,],[72,-249,72,72,72,105,72,-62,-64,105,72,72,105,105,-123,-127,105,105,-109,-111,105,-147,-148,-149,-150,-92,-93,72,-95,-107,105,105,-249,72,-249,72,105,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-110,105,-113,-114,105,-128,-129,105,-96,-97,-98,-101,-99,-100,-102,-63,105,-49,-37,72,72,105,105,-116,72,-94,105,105,105,105,105,-87,-107,105,-112,105,-115,105,72,105,-48,105,105,105,105,105,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,105,-107,105,-120,-151,105,105,-118,105,105,105,105,105,-119,105,-249,72,72,-249,72,]),'STRUCT':([36,37,41,44,55,71,72,73,74,86,87,109,143,145,150,187,196,197,198,210,257,354,356,371,],[-86,-249,-86,-86,-86,116,-86,-62,-64,-86,-86,-86,-86,-249,-86,-63,-37,-86,-86,-86,-86,-86,-86,-86,]),'COMMA':([37,53,54,56,57,58,59,60,61,62,63,64,65,66,67,73,74,92,96,97,100,101,107,108,110,111,117,118,128,141,142,144,145,148,149,169,171,172,175,176,179,180,181,182,183,184,185,187,191,192,199,200,201,202,209,211,241,245,248,249,250,252,255,258,291,294,297,298,299,309,319,344,363,367,368,372,],[-249,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,119,-64,-14,-123,-127,-109,-111,-92,-93,-95,-107,-30,-31,-249,197,198,-45,-249,-4,-108,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-63,215,-67,-44,-20,-22,-124,-116,-94,-249,-107,-43,-42,-112,-115,-88,-66,-249,-107,-120,-151,-23,-249,-118,-119,-249,371,-213,-212,]),'ASSIGN':([37,44,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,73,74,80,92,96,97,100,101,107,108,110,111,117,118,148,149,169,171,172,175,176,179,180,181,182,183,184,185,187,191,192,200,201,202,209,211,241,245,246,250,252,255,258,291,294,297,298,299,309,319,344,],[-249,81,90,-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-62,-64,125,-14,-123,-127,-109,-111,-92,-93,-95,-107,-30,-31,-4,-108,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-63,-65,-67,-20,-22,-124,-116,-94,-249,-107,288,-112,-115,-88,-66,-249,-107,-120,-151,-23,-249,-118,-119,]),'LEFT_BRACES':([53,54,56,57,58,59,60,61,62,63,64,65,66,67,85,86,92,96,97,100,101,107,108,110,111,116,117,118,128,134,135,136,137,148,149,169,171,172,175,176,179,180,181,182,183,184,185,191,192,194,195,196,200,201,202,209,211,222,231,232,233,234,235,241,244,247,250,252,255,258,259,261,271,272,273,274,289,291,292,294,297,298,299,304,305,306,307,308,309,311,312,314,319,344,346,348,349,358,359,361,369,],[-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,134,-249,-14,-123,-127,-109,-111,-92,-93,-95,-107,186,-30,-31,-249,-249,-32,-18,-19,-4,-108,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,134,-49,-37,-20,-22,-124,-116,-94,134,-164,-165,-166,-167,-168,-171,-87,-249,-112,-115,-88,-66,-48,134,-87,-172,-173,-249,313,-125,-126,-107,-120,-151,-23,134,134,-215,-216,-217,-218,-83,-174,326,-118,-119,-87,-249,-249,134,-219,-249,-203,]),'COLON':([53,54,56,57,58,59,60,61,62,63,64,65,66,67,92,96,97,100,101,107,108,110,111,117,118,128,148,149,169,170,171,172,175,176,179,180,181,182,183,184,185,191,192,200,201,202,203,204,205,209,211,230,245,250,252,255,258,296,297,298,299,319,338,340,344,350,353,355,362,363,367,368,372,],[-2,-3,-5,-6,-15,-16,-17,-7,-8,-9,-10,-11,-12,-13,-14,-123,-127,-109,-111,-92,-93,-95,-107,-30,-31,-249,-4,-108,-110,-249,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-20,-22,-124,-125,251,-126,-116,-94,261,-170,-112,-115,-88,-66,320,-120,-151,-23,-118,349,-201,-119,-200,361,-210,-209,-249,-211,-213,-212,]),'NOT':([70,81,90,98,99,102,103,104,105,106,125,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,320,323,339,348,349,361,],[99,99,99,99,99,99,-147,-148,-149,-150,99,-249,99,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,99,99,99,-49,99,99,99,99,-87,99,99,-48,99,99,99,99,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,99,99,99,99,-249,-249,]),'ADD':([70,81,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,125,128,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,179,180,181,182,183,184,185,194,195,202,203,209,211,212,215,236,240,241,244,245,247,250,251,252,254,258,259,261,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,291,294,296,297,298,309,311,319,320,323,329,335,339,344,348,349,361,],[103,103,103,103,-123,-127,103,103,-109,-111,103,-147,-148,-149,-150,-92,-93,-95,-107,103,103,-249,103,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-110,103,-113,-114,103,-128,-129,103,-96,-97,-98,-101,-99,-100,-102,103,-49,103,103,-116,-94,103,103,103,103,103,-87,-107,103,-112,103,-115,103,103,-48,103,103,103,103,103,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,103,-107,103,-120,-151,103,103,-118,103,103,103,103,103,-119,103,-249,-249,]),'SUB':([70,81,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,125,128,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,179,180,181,182,183,184,185,194,195,202,203,209,211,212,215,236,240,241,244,245,247,250,251,252,254,258,259,261,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,291,294,296,297,298,309,311,319,320,323,329,335,339,344,348,349,361,],[104,104,104,104,-123,-127,104,104,-109,-111,104,-147,-148,-149,-150,-92,-93,-95,-107,104,104,-249,104,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-110,104,-113,-114,104,-128,-129,104,-96,-97,-98,-101,-99,-100,-102,104,-49,104,104,-116,-94,104,104,104,104,104,-87,-107,104,-112,104,-115,104,104,-48,104,104,104,104,104,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,104,-107,104,-120,-151,104,104,-118,104,104,104,104,104,-119,104,-249,-249,]),'AND':([70,81,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,125,128,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,179,180,181,182,183,184,185,194,195,202,203,209,211,212,215,236,240,241,244,245,247,250,251,252,254,258,259,261,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,291,294,296,297,298,309,311,319,320,323,329,335,339,344,348,349,361,],[106,106,106,106,-123,-127,106,106,-109,-111,106,-147,-148,-149,-150,-92,-93,-95,-107,106,106,-249,106,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-110,106,-113,-114,106,-128,-129,106,-96,-97,-98,-101,-99,-100,-102,106,-49,106,106,-116,-94,106,106,106,106,106,-87,-107,106,-112,106,-115,106,106,-48,106,106,106,106,106,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,106,-107,106,-120,-151,106,106,-118,106,106,106,106,106,-119,106,-249,-249,]),'TYPECAST':([70,81,90,98,99,102,103,104,105,106,125,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,315,317,318,320,323,328,339,348,349,361,],[109,109,109,109,109,109,-147,-148,-149,-150,109,-249,109,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,109,109,109,-49,109,109,109,109,-87,109,109,-48,109,109,109,109,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,109,-205,-188,109,109,-204,109,109,-249,-249,]),'INTEGER':([70,81,90,98,99,102,103,104,105,106,112,125,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,315,317,318,320,323,328,339,348,349,361,],[-103,-103,-103,-103,-103,-103,-147,-148,-149,-150,179,-103,-249,-103,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-103,-103,-103,-49,-103,-103,-103,-103,-87,-103,-103,-48,-103,-103,-103,-103,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,-103,-205,-188,-103,-103,-204,-103,-103,-249,-249,]),'OCTAL':([70,81,90,98,99,102,103,104,105,106,112,125,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,315,317,318,320,323,328,339,348,349,361,],[-103,-103,-103,-103,-103,-103,-147,-148,-149,-150,180,-103,-249,-103,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-103,-103,-103,-49,-103,-103,-103,-103,-87,-103,-103,-48,-103,-103,-103,-103,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,-103,-205,-188,-103,-103,-204,-103,-103,-249,-249,]),'HEX':([70,81,90,98,99,102,103,104,105,106,112,125,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,315,317,318,320,323,328,339,348,349,361,],[-103,-103,-103,-103,-103,-103,-147,-148,-149,-150,181,-103,-249,-103,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-103,-103,-103,-49,-103,-103,-103,-103,-87,-103,-103,-48,-103,-103,-103,-103,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,-103,-205,-188,-103,-103,-204,-103,-103,-249,-249,]),'RUNE':([70,81,90,98,99,102,103,104,105,106,112,125,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,315,317,318,320,323,328,339,348,349,361,],[-103,-103,-103,-103,-103,-103,-147,-148,-149,-150,182,-103,-249,-103,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-103,-103,-103,-49,-103,-103,-103,-103,-87,-103,-103,-48,-103,-103,-103,-103,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,-103,-205,-188,-103,-103,-204,-103,-103,-249,-249,]),'FLOAT':([70,81,90,98,99,102,103,104,105,106,113,125,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,315,317,318,320,323,328,339,348,349,361,],[-104,-104,-104,-104,-104,-104,-147,-148,-149,-150,183,-104,-249,-104,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-104,-104,-104,-49,-104,-104,-104,-104,-87,-104,-104,-48,-104,-104,-104,-104,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,-104,-205,-188,-104,-104,-204,-104,-104,-249,-249,]),'IMAGINARY':([70,81,90,98,99,102,103,104,105,106,114,125,134,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,194,195,212,215,236,240,244,247,251,259,261,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,290,292,315,317,318,320,323,328,339,348,349,361,],[-105,-105,-105,-105,-105,-105,-147,-148,-149,-150,184,-105,-249,-105,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-105,-105,-105,-49,-105,-105,-105,-105,-87,-105,-105,-48,-105,-105,-105,-105,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-249,-189,-105,-205,-188,-105,-105,-204,-105,-105,-249,-249,]),'RIGHT_BRACKET':([94,95,96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,202,203,205,209,211,250,251,252,295,296,297,298,319,329,344,],[150,-21,-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-124,250,-126,-116,-94,-112,-249,-115,319,-125,-120,-151,-118,344,-119,]),'LOG_OR':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[152,-123,-127,-109,-111,-92,-93,-95,-107,152,-110,-113,-114,-128,-129,152,-96,-97,-98,-101,-99,-100,-102,152,152,-116,-94,152,-107,-112,-115,152,152,152,152,-107,152,-120,-151,152,152,-118,152,152,-119,]),'LOG_AND':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[153,-123,-127,-109,-111,-92,-93,-95,-107,153,-110,-113,-114,-128,-129,153,-96,-97,-98,-101,-99,-100,-102,153,153,-116,-94,153,-107,-112,-115,153,153,153,153,-107,153,-120,-151,153,153,-118,153,153,-119,]),'EQ':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[156,-123,-127,-109,-111,-92,-93,-95,-107,156,-110,-113,-114,-128,-129,156,-96,-97,-98,-101,-99,-100,-102,156,156,-116,-94,156,-107,-112,-115,156,156,156,156,-107,156,-120,-151,156,156,-118,156,156,-119,]),'NEQ':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[157,-123,-127,-109,-111,-92,-93,-95,-107,157,-110,-113,-114,-128,-129,157,-96,-97,-98,-101,-99,-100,-102,157,157,-116,-94,157,-107,-112,-115,157,157,157,157,-107,157,-120,-151,157,157,-118,157,157,-119,]),'LT':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[158,-123,-127,-109,-111,-92,-93,-95,-107,158,-110,-113,-114,-128,-129,158,-96,-97,-98,-101,-99,-100,-102,158,158,-116,-94,158,-107,-112,-115,158,158,158,158,-107,158,-120,-151,158,158,-118,158,158,-119,]),'GT':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[159,-123,-127,-109,-111,-92,-93,-95,-107,159,-110,-113,-114,-128,-129,159,-96,-97,-98,-101,-99,-100,-102,159,159,-116,-94,159,-107,-112,-115,159,159,159,159,-107,159,-120,-151,159,159,-118,159,159,-119,]),'LEQ':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[160,-123,-127,-109,-111,-92,-93,-95,-107,160,-110,-113,-114,-128,-129,160,-96,-97,-98,-101,-99,-100,-102,160,160,-116,-94,160,-107,-112,-115,160,160,160,160,-107,160,-120,-151,160,160,-118,160,160,-119,]),'GEQ':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[161,-123,-127,-109,-111,-92,-93,-95,-107,161,-110,-113,-114,-128,-129,161,-96,-97,-98,-101,-99,-100,-102,161,161,-116,-94,161,-107,-112,-115,161,161,161,161,-107,161,-120,-151,161,161,-118,161,161,-119,]),'OR':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[163,-123,-127,-109,-111,-92,-93,-95,-107,163,-110,-113,-114,-128,-129,163,-96,-97,-98,-101,-99,-100,-102,163,163,-116,-94,163,-107,-112,-115,163,163,163,163,-107,163,-120,-151,163,163,-118,163,163,-119,]),'XOR':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[164,-123,-127,-109,-111,-92,-93,-95,-107,164,-110,-113,-114,-128,-129,164,-96,-97,-98,-101,-99,-100,-102,164,164,-116,-94,164,-107,-112,-115,164,164,164,164,-107,164,-120,-151,164,164,-118,164,164,-119,]),'DIV':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[165,-123,-127,-109,-111,-92,-93,-95,-107,165,-110,-113,-114,-128,-129,165,-96,-97,-98,-101,-99,-100,-102,165,165,-116,-94,165,-107,-112,-115,165,165,165,165,-107,165,-120,-151,165,165,-118,165,165,-119,]),'MOD':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[166,-123,-127,-109,-111,-92,-93,-95,-107,166,-110,-113,-114,-128,-129,166,-96,-97,-98,-101,-99,-100,-102,166,166,-116,-94,166,-107,-112,-115,166,166,166,166,-107,166,-120,-151,166,166,-118,166,166,-119,]),'LSHIFT':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[167,-123,-127,-109,-111,-92,-93,-95,-107,167,-110,-113,-114,-128,-129,167,-96,-97,-98,-101,-99,-100,-102,167,167,-116,-94,167,-107,-112,-115,167,167,167,167,-107,167,-120,-151,167,167,-118,167,167,-119,]),'RSHIFT':([95,96,97,100,101,107,108,110,111,128,169,171,172,175,176,177,179,180,181,182,183,184,185,202,203,209,211,241,245,250,252,254,258,271,291,294,296,297,298,309,311,319,329,335,344,],[168,-123,-127,-109,-111,-92,-93,-95,-107,168,-110,-113,-114,-128,-129,168,-96,-97,-98,-101,-99,-100,-102,168,168,-116,-94,168,-107,-112,-115,168,168,168,168,-107,168,-120,-151,168,168,-118,168,168,-119,]),'INC':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,202,209,211,241,245,250,252,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-124,-116,-94,272,-107,-112,-115,272,-107,-120,-151,272,-118,-119,]),'DEC':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,202,209,211,241,245,250,252,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-124,-116,-94,273,-107,-112,-115,273,-107,-120,-151,273,-118,-119,]),'PLUS_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,278,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'MINUS_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,279,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'MULT_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,280,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'DIV_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,281,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'MOD_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,282,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'AND_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,283,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'OR_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,284,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'XOR_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,285,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'LSHIFT_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,286,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'RSHIFT_ASSIGN':([96,97,100,101,107,108,110,111,169,171,172,175,176,179,180,181,182,183,184,185,191,192,202,209,211,241,245,246,250,252,258,291,294,297,298,309,319,344,],[-123,-127,-109,-111,-92,-93,-95,-107,-110,-113,-114,-128,-129,-96,-97,-98,-101,-99,-100,-102,-65,-67,-124,-116,-94,-249,-107,287,-112,-115,-66,-249,-107,-120,-151,-249,-118,-119,]),'RETURN':([134,194,195,259,261,349,361,],[-249,236,-49,-48,236,-249,-249,]),'BREAK':([134,194,195,259,261,349,361,],[-249,237,-49,-48,237,-249,-249,]),'CONTINUE':([134,194,195,259,261,349,361,],[-249,238,-49,-48,238,-249,-249,]),'GOTO':([134,194,195,259,261,349,361,],[-249,239,-49,-48,239,-249,-249,]),'IF':([134,194,195,259,261,346,349,361,],[-249,240,-49,-48,240,240,-249,-249,]),'FOR':([134,194,195,259,261,349,361,],[-249,244,-49,-48,244,-249,-249,]),'SWITCH':([134,194,195,259,261,349,361,],[-249,247,-49,-48,247,-249,-249,]),'RIGHT_BRACES':([134,186,193,194,195,213,214,259,300,313,324,325,326,337,341,342,349,352,360,361,366,],[-249,-249,216,-47,-49,255,-25,-48,-24,-249,336,-198,-249,-197,351,-207,-249,-206,-199,-249,-208,]),'CASE':([194,195,259,313,324,325,326,337,341,342,349,352,360,361,366,],[-47,-49,-48,-249,339,-198,-249,-197,354,-207,-249,-206,-199,-249,-208,]),'DEFAULT':([194,195,259,313,324,325,326,337,341,342,349,352,360,361,366,],[-47,-49,-48,-249,340,-198,-249,-197,355,-207,-249,-206,-199,-249,-208,]),'ELSE':([216,321,330,],[-46,-88,346,]),'QUICK_ASSIGN':([245,294,316,],[275,275,328,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'SourceFile':([0,],[2,]),'PackageClause':([0,],[3,]),'PackageName':([4,13,45,],[6,29,29,]),'ImportDeclRep':([5,],[8,]),'epsilon':([5,8,13,26,35,37,39,43,45,80,86,87,128,134,145,170,173,186,194,236,237,238,241,247,251,261,274,290,291,309,313,323,326,330,348,349,361,363,],[9,12,30,46,51,74,76,79,30,126,137,140,192,195,74,205,208,214,231,264,267,267,192,292,205,231,306,317,192,192,325,333,342,347,231,195,195,368,]),'TopLevelDeclRep':([8,],[10,]),'ImportDecl':([8,],[11,]),'TopLevelDecl':([10,],[14,]),'Declaration':([10,194,261,],[15,218,218,]),'FunctionDecl':([10,],[16,]),'ConstDecl':([10,194,261,],[17,17,17,]),'TypeDecl':([10,194,261,],[18,18,18,]),'VarDecl':([10,194,261,],[19,19,19,]),'ImportSpec':([13,45,],[25,83,]),'PackageNameDotOpt':([13,45,],[27,27,]),'FunctionName':([20,],[32,]),'ConstSpec':([21,50,],[34,89,]),'IdentifierList':([21,23,50,78,87,197,198,213,],[36,44,36,44,143,143,143,257,]),'TypeSpec':([22,75,],[38,121,]),'TypeDef':([22,75,],[40,40,]),'VarSpec':([23,78,],[42,123,]),'ImportSpecRep':([26,],[45,]),'ImportPath':([27,],[47,]),'CreateScope':([32,194,244,261,271,346,],[49,222,274,222,304,358,]),'ConstSpecRep':([35,],[50,]),'Type':([36,41,44,55,72,86,87,109,143,150,197,198,210,257,354,356,371,],[52,77,80,91,118,136,144,178,199,201,144,144,253,301,363,253,372,]),'TypeName':([36,41,44,55,72,86,87,93,109,143,150,197,198,210,257,354,356,371,],[53,53,53,53,53,53,53,149,53,53,53,53,53,53,53,53,53,53,]),'TypeLit':([36,41,44,55,72,86,87,109,143,150,197,198,210,257,354,356,371,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TypeToken':([36,41,44,55,72,86,87,93,109,143,150,197,198,210,257,354,356,371,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'QualifiedIdent':([36,41,44,55,72,86,87,93,109,143,150,197,198,210,257,354,356,371,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ArrayType':([36,41,44,55,72,86,87,109,143,150,197,198,210,257,354,356,371,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'StructType':([36,41,44,55,72,86,87,109,143,150,197,198,210,257,354,356,371,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'PointerType':([36,41,44,55,72,86,87,109,143,150,197,198,210,257,354,356,371,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CreateFuncScope':([36,41,44,55,72,86,87,109,143,150,197,198,210,257,354,356,371,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'IdentifierRep':([37,145,],[73,73,]),'TypeSpecRep':([39,],[75,]),'VarSpecRep':([43,],[78,]),'Function':([49,],[84,]),'Signature':([49,],[85,]),'Parameters':([49,],[86,]),'ArrayLength':([70,],[94,]),'Expression':([70,81,90,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,320,323,339,348,],[95,128,128,177,128,202,203,128,241,254,258,128,271,291,296,241,309,311,128,329,335,128,241,]),'UnaryExpr':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,320,323,339,348,],[96,96,96,175,176,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'PrimaryExpr':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,327,97,97,97,97,]),'UnaryOp':([70,81,90,95,98,99,102,125,128,151,170,173,177,194,202,203,212,215,236,240,241,247,251,254,258,261,271,274,275,276,291,296,309,311,320,323,329,335,339,348,],[98,98,98,162,98,98,98,98,162,98,98,98,162,98,162,162,98,98,98,98,162,98,98,162,162,98,162,98,98,98,162,162,162,162,98,98,162,162,98,98,]),'Operand':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'Conversion':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'Literal':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'OperandName':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'BasicLit':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'I':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'F':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'C':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'S':([70,81,90,98,99,102,125,151,170,173,194,212,215,236,240,247,251,261,274,275,276,315,320,323,339,348,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'BaseType':([72,],[117,]),'ExpressionListOpt':([80,],[124,]),'ExpressionList':([81,90,125,173,194,236,247,261,274,276,339,348,],[127,147,190,207,246,263,246,246,246,312,350,246,]),'EndScope':([84,85,255,260,321,322,365,],[130,131,299,302,330,331,370,]),'FunctionBody':([85,],[132,]),'Block':([85,194,222,261,304,305,358,],[133,223,260,223,321,322,365,]),'TypeOpt':([86,],[135,]),'ParameterListOpt':([87,],[138,]),'ParametersList':([87,],[139,]),'ParameterDecl':([87,197,198,],[141,248,249,]),'ParameterDeclCommaRep':([87,],[142,]),'BinaryOp':([95,128,177,202,203,241,254,258,271,291,296,309,311,329,335,],[151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,]),'RelOp':([95,128,177,202,203,241,254,258,271,291,296,309,311,329,335,],[154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,]),'AddMulOp':([95,128,177,202,203,241,254,258,271,291,296,309,311,329,335,],[155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,]),'Selector':([97,327,],[169,169,]),'Slice':([97,327,],[171,171,]),'TypeAssertion':([97,327,],[172,172,]),'ExpressionRep':([128,241,291,309,],[191,191,191,191,]),'StatementList':([134,349,361,],[193,360,366,]),'StatementRep':([134,349,361,],[194,194,194,]),'ElementType':([150,],[200,]),'ExpressionOpt':([170,247,251,],[204,289,295,]),'ExpressionListTypeOpt':([173,],[206,]),'FieldDeclRep':([186,],[213,]),'Statement':([194,261,],[217,303,]),'LabeledStmt':([194,261,],[219,219,]),'SimpleStmt':([194,247,261,274,348,],[220,293,220,310,359,]),'ReturnStmt':([194,261,],[221,221,]),'BreakStmt':([194,261,],[224,224,]),'ContinueStmt':([194,261,],[225,225,]),'GotoStmt':([194,261,],[226,226,]),'IfStmt':([194,261,346,],[227,227,357,]),'SwitchStmt':([194,261,],[228,228,]),'ForStmt':([194,261,],[229,229,]),'Label':([194,237,238,239,261,],[230,266,266,270,230,]),'ExpressionStmt':([194,247,261,274,348,],[232,232,232,232,232,]),'IncDecStmt':([194,247,261,274,348,],[233,233,233,233,233,]),'Assignment':([194,247,261,274,348,],[234,234,234,234,234,]),'ShortVarDecl':([194,247,261,274,348,],[235,235,235,235,235,]),'ExprSwitchStmt':([194,261,],[242,242,]),'TypeSwitchStmt':([194,261,],[243,243,]),'FieldDecl':([213,],[256,]),'ExpressionListPureOpt':([236,],[262,]),'LabelOpt':([237,238,],[265,269,]),'assign_op':([246,],[276,]),'AssignOp':([246,],[277,]),'SimpleStmtOpt':([247,],[290,]),'ConditionBlockOpt':([274,],[305,]),'Condition':([274,323,],[307,334,]),'ForClause':([274,],[308,]),'TypeSwitchGuard':([290,],[314,]),'IdentifierOpt':([290,],[315,]),'ExprCaseClauseRep':([313,],[324,]),'ConditionOpt':([323,],[332,]),'ExprCaseClause':([324,],[337,]),'ExprSwitchCase':([324,],[338,]),'TypeCaseClauseOpt':([326,],[341,]),'ElseOpt':([330,],[345,]),'TypeCaseClause':([341,],[352,]),'TypeSwitchCase':([341,],[353,]),'TypeList':([354,],[362,]),'TypeRep':([363,],[367,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',149),
  ('Type -> TypeName','Type',1,'p_type','parser.py',159),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',160),
  ('Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS','Type',3,'p_type','parser.py',161),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',170),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',171),
  ('TypeToken -> INT_T','TypeToken',1,'p_type_token','parser.py',177),
  ('TypeToken -> FLOAT_T','TypeToken',1,'p_type_token','parser.py',178),
  ('TypeToken -> UINT_T','TypeToken',1,'p_type_token','parser.py',179),
  ('TypeToken -> COMPLEX_T','TypeToken',1,'p_type_token','parser.py',180),
  ('TypeToken -> RUNE_T','TypeToken',1,'p_type_token','parser.py',181),
  ('TypeToken -> BOOL_T','TypeToken',1,'p_type_token','parser.py',182),
  ('TypeToken -> STRING_T','TypeToken',1,'p_type_token','parser.py',183),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',184),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',197),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',198),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',199),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',205),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',206),
  ('ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType','ArrayType',4,'p_array_type','parser.py',214),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',223),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',229),
  ('StructType -> CreateFuncScope STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES EndScope','StructType',6,'p_struct_type','parser.py',237),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',244),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',245),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',256),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','parser.py',264),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','parser.py',265),
  ('Tag -> STRING','Tag',1,'p_Tag','parser.py',271),
  ('PointerType -> MULT BaseType','PointerType',2,'p_point_type','parser.py',279),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',286),
  ('Signature -> Parameters TypeOpt','Signature',2,'p_sign','parser.py',294),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',314),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',315),
  ('Result -> Parameters','Result',1,'p_result','parser.py',323),
  ('Result -> Type','Result',1,'p_result','parser.py',324),
  ('Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS','Parameters',3,'p_params','parser.py',330),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_param_list_opt','parser.py',336),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_param_list_opt','parser.py',337),
  ('ParametersList -> ParameterDecl','ParametersList',1,'p_param_list','parser.py',343),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_param_list','parser.py',344),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',350),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',351),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',360),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',361),
  ('Block -> LEFT_BRACES StatementList RIGHT_BRACES','Block',3,'p_block','parser.py',373),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',379),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',385),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',386),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',398),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',399),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',400),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',406),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',407),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',415),
  ('ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS','ConstDecl',4,'p_const_decl','parser.py',416),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',425),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',426),
  ('ConstSpec -> IdentifierList Type ASSIGN ExpressionList','ConstSpec',4,'p_const_spec','parser.py',436),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',462),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',463),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',472),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',486),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',487),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',504),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',515),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',516),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',534),
  ('TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS','TypeDecl',4,'p_type_decl','parser.py',535),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',544),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',545),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',554),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',562),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',570),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',582),
  ('VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS','VarDecl',4,'p_var_decl','parser.py',583),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',592),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',593),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',603),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',604),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',656),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',657),
  ('ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',668),
  ('FunctionDecl -> FUNC FunctionName CreateScope Function EndScope','FunctionDecl',5,'p_func_decl','parser.py',685),
  ('FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope','FunctionDecl',5,'p_func_decl','parser.py',686),
  ('CreateFuncScope -> <empty>','CreateFuncScope',0,'p_create_func_scope','parser.py',704),
  ('CreateScope -> <empty>','CreateScope',0,'p_create_scope','parser.py',710),
  ('EndScope -> <empty>','EndScope',0,'p_delete_scope','parser.py',716),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',722),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',728),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',750),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',758),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',759),
  ('Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS','Operand',3,'p_operand','parser.py',760),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',769),
  ('BasicLit -> I INTEGER','BasicLit',2,'p_basic_lit','parser.py',777),
  ('BasicLit -> I OCTAL','BasicLit',2,'p_basic_lit','parser.py',778),
  ('BasicLit -> I HEX','BasicLit',2,'p_basic_lit','parser.py',779),
  ('BasicLit -> F FLOAT','BasicLit',2,'p_basic_lit','parser.py',780),
  ('BasicLit -> C IMAGINARY','BasicLit',2,'p_basic_lit','parser.py',781),
  ('BasicLit -> I RUNE','BasicLit',2,'p_basic_lit','parser.py',782),
  ('BasicLit -> S STRING','BasicLit',2,'p_basic_lit','parser.py',783),
  ('I -> <empty>','I',0,'p_I','parser.py',794),
  ('F -> <empty>','F',0,'p_F','parser.py',800),
  ('C -> <empty>','C',0,'p_C','parser.py',806),
  ('S -> <empty>','S',0,'p_S','parser.py',812),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',818),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_quali_ident','parser.py',836),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',848),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',849),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',850),
  ('PrimaryExpr -> PrimaryExpr LEFT_BRACKET Expression RIGHT_BRACKET','PrimaryExpr',4,'p_prim_expr','parser.py',851),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',852),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',853),
  ('PrimaryExpr -> PrimaryExpr LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS','PrimaryExpr',4,'p_prim_expr','parser.py',854),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',904),
  ('Index -> LEFT_BRACKET Expression RIGHT_BRACKET','Index',3,'p_index','parser.py',927),
  ('Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET','Slice',5,'p_slice','parser.py',933),
  ('Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET','Slice',7,'p_slice','parser.py',934),
  ('TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS','TypeAssertion',4,'p_type_assert','parser.py',943),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',949),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',950),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',958),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',959),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',978),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',979),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',985),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',986),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',987),
  ('BinaryOp -> LOG_OR','BinaryOp',1,'p_binary_op','parser.py',1009),
  ('BinaryOp -> LOG_AND','BinaryOp',1,'p_binary_op','parser.py',1010),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',1011),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','parser.py',1012),
  ('RelOp -> EQ','RelOp',1,'p_rel_op','parser.py',1025),
  ('RelOp -> NEQ','RelOp',1,'p_rel_op','parser.py',1026),
  ('RelOp -> LT','RelOp',1,'p_rel_op','parser.py',1027),
  ('RelOp -> GT','RelOp',1,'p_rel_op','parser.py',1028),
  ('RelOp -> LEQ','RelOp',1,'p_rel_op','parser.py',1029),
  ('RelOp -> GEQ','RelOp',1,'p_rel_op','parser.py',1030),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','parser.py',1049),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','parser.py',1050),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','parser.py',1051),
  ('AddMulOp -> DIV','AddMulOp',1,'p_add_mul_op','parser.py',1052),
  ('AddMulOp -> MOD','AddMulOp',1,'p_add_mul_op','parser.py',1053),
  ('AddMulOp -> LSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',1054),
  ('AddMulOp -> RSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',1055),
  ('UnaryOp -> ADD','UnaryOp',1,'p_unary_op','parser.py',1074),
  ('UnaryOp -> SUB','UnaryOp',1,'p_unary_op','parser.py',1075),
  ('UnaryOp -> MULT','UnaryOp',1,'p_unary_op','parser.py',1076),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',1077),
  ('Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS','Conversion',5,'p_conversion','parser.py',1092),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',1101),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',1102),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',1103),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',1104),
  ('Statement -> CreateScope Block EndScope','Statement',3,'p_statement','parser.py',1105),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',1106),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',1107),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',1108),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',1109),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',1110),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',1111),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',1112),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',1121),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1122),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1123),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',1124),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',1125),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',1131),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',1151),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',1157),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_inc_dec','parser.py',1164),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_inc_dec','parser.py',1165),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',1173),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',1189),
  ('AssignOp -> PLUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1195),
  ('AssignOp -> MINUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1196),
  ('AssignOp -> MULT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1197),
  ('AssignOp -> DIV_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1198),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1199),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1200),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1201),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1202),
  ('AssignOp -> LSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1203),
  ('AssignOp -> RSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1204),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',1205),
  ('IfStmt -> IF Expression CreateScope Block EndScope ElseOpt','IfStmt',6,'p_if_statement','parser.py',1211),
  ('SimpleStmtOpt -> SimpleStmt SEMICOLON','SimpleStmtOpt',2,'p_SimpleStmtOpt','parser.py',1231),
  ('SimpleStmtOpt -> epsilon','SimpleStmtOpt',1,'p_SimpleStmtOpt','parser.py',1232),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',1241),
  ('ElseOpt -> ELSE CreateScope Block EndScope','ElseOpt',4,'p_else_opt','parser.py',1242),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',1243),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1256),
  ('SwitchStmt -> TypeSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1257),
  ('ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES','ExprSwitchStmt',5,'p_expr_switch_stmt','parser.py',1263),
  ('StartSwitch -> <empty>','StartSwitch',0,'p_start_switch','parser.py',1289),
  ('ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause','ExprCaseClauseRep',2,'p_expr_case_clause_rep','parser.py',1298),
  ('ExprCaseClauseRep -> epsilon','ExprCaseClauseRep',1,'p_expr_case_clause_rep','parser.py',1299),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','parser.py',1316),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_expr_switch_case','parser.py',1331),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','parser.py',1332),
  ('TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES','TypeSwitchStmt',6,'p_type_switch_stmt','parser.py',1346),
  ('TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS','TypeSwitchGuard',6,'p_type_switch_guard','parser.py',1352),
  ('IdentifierOpt -> IDENTIFIER QUICK_ASSIGN','IdentifierOpt',2,'p_identifier_opt','parser.py',1359),
  ('IdentifierOpt -> epsilon','IdentifierOpt',1,'p_identifier_opt','parser.py',1360),
  ('TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause','TypeCaseClauseOpt',2,'p_type_case_clause_opt','parser.py',1370),
  ('TypeCaseClauseOpt -> epsilon','TypeCaseClauseOpt',1,'p_type_case_clause_opt','parser.py',1371),
  ('TypeCaseClause -> TypeSwitchCase COLON StatementList','TypeCaseClause',3,'p_type_case_clause','parser.py',1380),
  ('TypeSwitchCase -> CASE TypeList','TypeSwitchCase',2,'p_type_switch_case','parser.py',1386),
  ('TypeSwitchCase -> DEFAULT','TypeSwitchCase',1,'p_type_switch_case','parser.py',1387),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','parser.py',1396),
  ('TypeRep -> TypeRep COMMA Type','TypeRep',3,'p_type_rep','parser.py',1402),
  ('TypeRep -> epsilon','TypeRep',1,'p_type_rep','parser.py',1403),
  ('ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope','ForStmt',5,'p_for','parser.py',1415),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1426),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1427),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1428),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',1436),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',1442),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',1463),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',1464),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',1470),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',1471),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',1477),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',1486),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1496),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1497),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',1503),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',1518),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',1533),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',1534),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',1540),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',1552),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',1560),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',1561),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',1571),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',1572),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',1584),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',1590),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',1603),
  ('ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS','ImportDecl',4,'p_import_decl','parser.py',1604),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',1613),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',1614),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',1624),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1634),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1635),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1636),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',1646),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',1654),
]
