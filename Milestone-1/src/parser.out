Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> SourceFile
Rule 2     Type -> TypeName
Rule 3     Type -> TypeLit
Rule 4     Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
Rule 5     TypeName -> TypeToken
Rule 6     TypeName -> QualifiedIdent
Rule 7     TypeToken -> INT_T
Rule 8     TypeToken -> FLOAT_T
Rule 9     TypeToken -> UINT_T
Rule 10    TypeToken -> COMPLEX_T
Rule 11    TypeToken -> RUNE_T
Rule 12    TypeToken -> BOOL_T
Rule 13    TypeToken -> STRING_T
Rule 14    TypeToken -> TYPE IDENTIFIER
Rule 15    TypeLit -> ArrayType
Rule 16    TypeLit -> StructType
Rule 17    TypeLit -> PointerType
Rule 18    TypeOpt -> Type
Rule 19    TypeOpt -> epsilon
Rule 20    ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
Rule 21    ArrayLength -> Expression
Rule 22    ElementType -> Type
Rule 23    StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
Rule 24    FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON
Rule 25    FieldDeclRep -> epsilon
Rule 26    FieldDecl -> IdentifierList Type TagOpt
Rule 27    TagOpt -> Tag
Rule 28    TagOpt -> epsilon
Rule 29    Tag -> STRING
Rule 30    PointerType -> MULT BaseType
Rule 31    BaseType -> Type
Rule 32    Signature -> Parameters ResultOpt
Rule 33    ResultOpt -> Result
Rule 34    ResultOpt -> epsilon
Rule 35    Result -> Parameters
Rule 36    Result -> Type
Rule 37    Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS
Rule 38    ParameterListOpt -> ParametersList
Rule 39    ParameterListOpt -> epsilon
Rule 40    ParametersList -> Type
Rule 41    ParametersList -> IdentifierList Type
Rule 42    ParametersList -> ParameterDeclCommaRep
Rule 43    ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl
Rule 44    ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl
Rule 45    ParameterDecl -> IdentifierList Type
Rule 46    ParameterDecl -> Type
Rule 47    Block -> LEFT_BRACES StatementList RIGHT_BRACES
Rule 48    StatementList -> StatementRep
Rule 49    StatementRep -> StatementRep Statement SEMICOLON
Rule 50    StatementRep -> epsilon
Rule 51    Declaration -> ConstDecl
Rule 52    Declaration -> TypeDecl
Rule 53    Declaration -> VarDecl
Rule 54    TopLevelDecl -> Declaration
Rule 55    TopLevelDecl -> FunctionDecl
Rule 56    ConstDecl -> CONST ConstSpec
Rule 57    ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
Rule 58    ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON
Rule 59    ConstSpecRep -> epsilon
Rule 60    ConstSpec -> IdentifierList TypeExprListOpt
Rule 61    TypeExprListOpt -> TypeOpt ASSIGN ExpressionList
Rule 62    TypeExprListOpt -> epsilon
Rule 63    IdentifierList -> IDENTIFIER IdentifierRep
Rule 64    IdentifierRep -> IdentifierRep COMMA IDENTIFIER
Rule 65    IdentifierRep -> epsilon
Rule 66    ExpressionList -> Expression ExpressionRep
Rule 67    ExpressionRep -> ExpressionRep COMMA Expression
Rule 68    ExpressionRep -> epsilon
Rule 69    TypeDecl -> TYPE TypeSpec
Rule 70    TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
Rule 71    TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON
Rule 72    TypeSpecRep -> epsilon
Rule 73    TypeSpec -> AliasDecl
Rule 74    TypeSpec -> TypeDef
Rule 75    AliasDecl -> IDENTIFIER ASSIGN Type
Rule 76    TypeDef -> IDENTIFIER Type
Rule 77    VarDecl -> VAR VarSpec
Rule 78    VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
Rule 79    VarSpecRep -> VarSpecRep VarSpec SEMICOLON
Rule 80    VarSpecRep -> epsilon
Rule 81    VarSpec -> IdentifierList Type ExpressionListOpt
Rule 82    VarSpec -> IdentifierList ASSIGN ExpressionList
Rule 83    ExpressionListOpt -> ASSIGN ExpressionList
Rule 84    ExpressionListOpt -> epsilon
Rule 85    ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression
Rule 86    FunctionDecl -> FUNC FunctionName Function
Rule 87    FunctionDecl -> FUNC FunctionName Signature
Rule 88    FunctionName -> IDENTIFIER
Rule 89    Function -> Signature FunctionBody
Rule 90    FunctionBody -> Block
Rule 91    Operand -> Literal
Rule 92    Operand -> OperandName
Rule 93    Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
Rule 94    Literal -> BasicLit
Rule 95    BasicLit -> INTEGER
Rule 96    BasicLit -> OCTAL
Rule 97    BasicLit -> HEX
Rule 98    BasicLit -> FLOAT
Rule 99    BasicLit -> IMAGINARY
Rule 100   BasicLit -> RUNE
Rule 101   BasicLit -> STRING
Rule 102   OperandName -> IDENTIFIER
Rule 103   QualifiedIdent -> IDENTIFIER DOT TypeName
Rule 104   CompositeLit -> LiteralType LiteralValue
Rule 105   LiteralType -> ArrayType
Rule 106   LiteralType -> ElementType
Rule 107   LiteralType -> TypeName
Rule 108   LiteralValue -> LEFT_BRACES ElementListOpt RIGHT_BRACES
Rule 109   ElementListOpt -> ElementList
Rule 110   ElementListOpt -> epsilon
Rule 111   ElementList -> KeyedElement KeyedElementCommaRep
Rule 112   KeyedElementCommaRep -> KeyedElementCommaRep COMMA KeyedElement
Rule 113   KeyedElementCommaRep -> epsilon
Rule 114   KeyedElement -> Key COLON Element
Rule 115   KeyedElement -> Element
Rule 116   Key -> FieldName
Rule 117   Key -> Expression
Rule 118   Key -> LiteralValue
Rule 119   FieldName -> IDENTIFIER
Rule 120   Element -> Expression
Rule 121   Element -> LiteralValue
Rule 122   PrimaryExpr -> Operand
Rule 123   PrimaryExpr -> PrimaryExpr Selector
Rule 124   PrimaryExpr -> Conversion
Rule 125   PrimaryExpr -> PrimaryExpr Index
Rule 126   PrimaryExpr -> PrimaryExpr Slice
Rule 127   PrimaryExpr -> PrimaryExpr TypeAssertion
Rule 128   PrimaryExpr -> PrimaryExpr Arguments
Rule 129   Selector -> DOT IDENTIFIER
Rule 130   Index -> LEFT_BRACKET Expression RIGHT_BRACKET
Rule 131   Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
Rule 132   Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
Rule 133   TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
Rule 134   Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS
Rule 135   ExpressionListTypeOpt -> ExpressionList
Rule 136   ExpressionListTypeOpt -> epsilon
Rule 137   ExpressionListCommaOpt -> COMMA ExpressionList
Rule 138   ExpressionListCommaOpt -> epsilon
Rule 139   Expression -> UnaryExpr
Rule 140   Expression -> Expression BinaryOp Expression
Rule 141   ExpressionOpt -> Expression
Rule 142   ExpressionOpt -> epsilon
Rule 143   UnaryExpr -> PrimaryExpr
Rule 144   UnaryExpr -> UnaryOp UnaryExpr
Rule 145   UnaryExpr -> NOT UnaryExpr
Rule 146   BinaryOp -> LOG_OR
Rule 147   BinaryOp -> LOG_AND
Rule 148   BinaryOp -> RelOp
Rule 149   BinaryOp -> AddMulOp
Rule 150   RelOp -> EQ
Rule 151   RelOp -> NEQ
Rule 152   RelOp -> LT
Rule 153   RelOp -> GT
Rule 154   RelOp -> LEQ
Rule 155   RelOp -> GEQ
Rule 156   AddMulOp -> UnaryOp
Rule 157   AddMulOp -> OR
Rule 158   AddMulOp -> XOR
Rule 159   AddMulOp -> DIV
Rule 160   AddMulOp -> MOD
Rule 161   AddMulOp -> LSHIFT
Rule 162   AddMulOp -> RSHIFT
Rule 163   UnaryOp -> ADD
Rule 164   UnaryOp -> SUB
Rule 165   UnaryOp -> MULT
Rule 166   UnaryOp -> AND
Rule 167   Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
Rule 168   Statement -> Declaration
Rule 169   Statement -> LabeledStmt
Rule 170   Statement -> SimpleStmt
Rule 171   Statement -> ReturnStmt
Rule 172   Statement -> BreakStmt
Rule 173   Statement -> ContinueStmt
Rule 174   Statement -> GotoStmt
Rule 175   Statement -> Block
Rule 176   Statement -> IfStmt
Rule 177   Statement -> SwitchStmt
Rule 178   Statement -> ForStmt
Rule 179   SimpleStmt -> epsilon
Rule 180   SimpleStmt -> ExpressionStmt
Rule 181   SimpleStmt -> IncDecStmt
Rule 182   SimpleStmt -> Assignment
Rule 183   SimpleStmt -> ShortVarDecl
Rule 184   LabeledStmt -> Label COLON Statement
Rule 185   Label -> IDENTIFIER
Rule 186   ExpressionStmt -> Expression
Rule 187   IncDecStmt -> Expression INC
Rule 188   IncDecStmt -> Expression DEC
Rule 189   Assignment -> ExpressionList assign_op ExpressionList
Rule 190   assign_op -> AssignOp
Rule 191   AssignOp -> PLUS_ASSIGN
Rule 192   AssignOp -> MINUS_ASSIGN
Rule 193   AssignOp -> MULT_ASSIGN
Rule 194   AssignOp -> DIV_ASSIGN
Rule 195   AssignOp -> MOD_ASSIGN
Rule 196   AssignOp -> AND_ASSIGN
Rule 197   AssignOp -> OR_ASSIGN
Rule 198   AssignOp -> XOR_ASSIGN
Rule 199   AssignOp -> LSHIFT_ASSIGN
Rule 200   AssignOp -> RSHIFT_ASSIGN
Rule 201   AssignOp -> ASSIGN
Rule 202   IfStmt -> IF Expression Block ElseOpt
Rule 203   SimpleStmtOpt -> SimpleStmt SEMICOLON
Rule 204   SimpleStmtOpt -> epsilon
Rule 205   ElseOpt -> ELSE IfStmt
Rule 206   ElseOpt -> ELSE Block
Rule 207   ElseOpt -> epsilon
Rule 208   SwitchStmt -> ExprSwitchStmt
Rule 209   SwitchStmt -> TypeSwitchStmt
Rule 210   ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
Rule 211   ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause
Rule 212   ExprCaseClauseRep -> epsilon
Rule 213   ExprCaseClause -> ExprSwitchCase COLON StatementList
Rule 214   ExprSwitchCase -> CASE ExpressionList
Rule 215   ExprSwitchCase -> DEFAULT
Rule 216   TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
Rule 217   TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
Rule 218   IdentifierOpt -> IDENTIFIER QUICK_ASSIGN
Rule 219   IdentifierOpt -> epsilon
Rule 220   TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause
Rule 221   TypeCaseClauseOpt -> epsilon
Rule 222   TypeCaseClause -> TypeSwitchCase COLON StatementList
Rule 223   TypeSwitchCase -> CASE TypeList
Rule 224   TypeSwitchCase -> DEFAULT
Rule 225   TypeList -> Type TypeRep
Rule 226   TypeRep -> TypeRep COMMA Type
Rule 227   TypeRep -> epsilon
Rule 228   ForStmt -> FOR ConditionBlockOpt Block
Rule 229   ConditionBlockOpt -> epsilon
Rule 230   ConditionBlockOpt -> Condition
Rule 231   ConditionBlockOpt -> ForClause
Rule 232   ConditionBlockOpt -> RangeClause
Rule 233   Condition -> Expression
Rule 234   ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt
Rule 235   ConditionOpt -> epsilon
Rule 236   ConditionOpt -> Condition
Rule 237   RangeClause -> ExpressionIdentListOpt RANGE Expression
Rule 238   ExpressionIdentListOpt -> epsilon
Rule 239   ExpressionIdentListOpt -> ExpressionIdentifier
Rule 240   ExpressionIdentifier -> ExpressionList ASSIGN
Rule 241   ReturnStmt -> RETURN ExpressionListPureOpt
Rule 242   ExpressionListPureOpt -> ExpressionList
Rule 243   ExpressionListPureOpt -> epsilon
Rule 244   BreakStmt -> BREAK LabelOpt
Rule 245   ContinueStmt -> CONTINUE LabelOpt
Rule 246   LabelOpt -> Label
Rule 247   LabelOpt -> epsilon
Rule 248   GotoStmt -> GOTO Label
Rule 249   SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep
Rule 250   ImportDeclRep -> epsilon
Rule 251   ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON
Rule 252   TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON
Rule 253   TopLevelDeclRep -> epsilon
Rule 254   PackageClause -> PACKAGE PackageName
Rule 255   PackageName -> IDENTIFIER
Rule 256   ImportDecl -> IMPORT ImportSpec
Rule 257   ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
Rule 258   ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON
Rule 259   ImportSpecRep -> epsilon
Rule 260   ImportSpec -> PackageNameDotOpt ImportPath
Rule 261   PackageNameDotOpt -> DOT
Rule 262   PackageNameDotOpt -> PackageName
Rule 263   PackageNameDotOpt -> epsilon
Rule 264   ImportPath -> STRING
Rule 265   epsilon -> <empty>

Terminals, with rules where they appear

ADD                  : 163
AND                  : 166
AND_ASSIGN           : 196
ASSIGN               : 61 75 82 83 201 240
BOOL_T               : 12
BREAK                : 244
CASE                 : 214 223
COLON                : 114 131 132 132 184 213 222
COMMA                : 43 44 64 67 112 137 226
COMPLEX_T            : 10
CONST                : 56 57
CONTINUE             : 245
DEC                  : 188
DEFAULT              : 215 224
DIV                  : 159
DIV_ASSIGN           : 194
DOT                  : 103 129 133 217 261
ELSE                 : 205 206
EQ                   : 150
FLOAT                : 98
FLOAT_T              : 8
FOR                  : 228
FUNC                 : 86 87
GEQ                  : 155
GOTO                 : 248
GT                   : 153
HEX                  : 97
IDENTIFIER           : 14 63 64 75 76 85 88 102 103 119 129 185 218 255
IF                   : 202
IMAGINARY            : 99
IMPORT               : 256 257
INC                  : 187
INTEGER              : 95
INT_T                : 7
LEFT_BRACES          : 23 47 108 210 216
LEFT_BRACKET         : 20 130 131 132
LEFT_PARANTHESIS     : 4 37 57 70 78 93 133 134 167 217 257
LEQ                  : 154
LOG_AND              : 147
LOG_OR               : 146
LSHIFT               : 161
LSHIFT_ASSIGN        : 199
LT                   : 152
MINUS_ASSIGN         : 192
MOD                  : 160
MOD_ASSIGN           : 195
MULT                 : 30 165
MULT_ASSIGN          : 193
NEQ                  : 151
NOT                  : 145
OCTAL                : 96
OR                   : 157
OR_ASSIGN            : 197
PACKAGE              : 254
PLUS_ASSIGN          : 191
QUICK_ASSIGN         : 85 218
RANGE                : 237
RETURN               : 241
RIGHT_BRACES         : 23 47 108 210 216
RIGHT_BRACKET        : 20 130 131 132
RIGHT_PARANTHESIS    : 4 37 57 70 78 93 133 134 167 217 257
RSHIFT               : 162
RSHIFT_ASSIGN        : 200
RUNE                 : 100
RUNE_T               : 11
SEMICOLON            : 24 49 58 71 79 203 234 234 249 251 252 258
STRING               : 29 101 264
STRING_T             : 13
STRUCT               : 23
SUB                  : 164
SWITCH               : 210 216
TYPE                 : 14 69 70 217
TYPECAST             : 167
UINT_T               : 9
VAR                  : 77 78
XOR                  : 158
XOR_ASSIGN           : 198
error                : 

Nonterminals, with rules where they appear

AddMulOp             : 149
AliasDecl            : 73
Arguments            : 128
ArrayLength          : 20
ArrayType            : 15 105
AssignOp             : 190
Assignment           : 182
BaseType             : 30
BasicLit             : 94
BinaryOp             : 140
Block                : 90 175 202 206 228
BreakStmt            : 172
CompositeLit         : 
Condition            : 230 236
ConditionBlockOpt    : 228
ConditionOpt         : 234
ConstDecl            : 51
ConstSpec            : 56 58
ConstSpecRep         : 57 58
ContinueStmt         : 173
Conversion           : 124
Declaration          : 54 168
Element              : 114 115
ElementList          : 109
ElementListOpt       : 108
ElementType          : 20 106
ElseOpt              : 202
ExprCaseClause       : 211
ExprCaseClauseRep    : 210 211
ExprSwitchCase       : 213
ExprSwitchStmt       : 208
Expression           : 21 66 67 85 93 117 120 130 132 132 140 140 141 167 186 187 188 202 233 237
ExpressionIdentListOpt : 237
ExpressionIdentifier : 239
ExpressionList       : 61 82 83 135 137 189 189 214 240 242
ExpressionListCommaOpt : 
ExpressionListOpt    : 81
ExpressionListPureOpt : 241
ExpressionListTypeOpt : 134
ExpressionOpt        : 131 131 132 210
ExpressionRep        : 66 67
ExpressionStmt       : 180
FieldDecl            : 24
FieldDeclRep         : 23 24
FieldName            : 116
ForClause            : 231
ForStmt              : 178
Function             : 86
FunctionBody         : 89
FunctionDecl         : 55
FunctionName         : 86 87
GotoStmt             : 174
IdentifierList       : 26 41 45 60 81 82
IdentifierOpt        : 217
IdentifierRep        : 63 64
IfStmt               : 176 205
ImportDecl           : 251
ImportDeclRep        : 249 251
ImportPath           : 260
ImportSpec           : 256 258
ImportSpecRep        : 257 258
IncDecStmt           : 181
Index                : 125
Key                  : 114
KeyedElement         : 111 112
KeyedElementCommaRep : 111 112
Label                : 184 246 248
LabelOpt             : 244 245
LabeledStmt          : 169
Literal              : 91
LiteralType          : 104
LiteralValue         : 104 118 121
Operand              : 122
OperandName          : 92
PackageClause        : 249
PackageName          : 254 262
PackageNameDotOpt    : 260
ParameterDecl        : 43 44 44
ParameterDeclCommaRep : 42 43
ParameterListOpt     : 37
Parameters           : 32 35
ParametersList       : 38
PointerType          : 17
PrimaryExpr          : 123 125 126 127 128 143 217
QualifiedIdent       : 6
RangeClause          : 232
RelOp                : 148
Result               : 33
ResultOpt            : 32
ReturnStmt           : 171
Selector             : 123
ShortVarDecl         : 183
Signature            : 87 89
SimpleStmt           : 170 203 234 234
SimpleStmtOpt        : 216
Slice                : 126
SourceFile           : 1
Statement            : 49 184
StatementList        : 47 213 222
StatementRep         : 48 49
StructType           : 16
SwitchStmt           : 177
Tag                  : 27
TagOpt               : 26
TopLevelDecl         : 252
TopLevelDeclRep      : 249 252
Type                 : 4 18 22 26 31 36 40 41 45 46 75 76 81 133 167 225 226
TypeAssertion        : 127
TypeCaseClause       : 220
TypeCaseClauseOpt    : 216 220
TypeDecl             : 52
TypeDef              : 74
TypeExprListOpt      : 60
TypeList             : 223
TypeLit              : 3
TypeName             : 2 103 107
TypeOpt              : 61
TypeRep              : 225 226
TypeSpec             : 69 71
TypeSpecRep          : 70 71
TypeSwitchCase       : 222
TypeSwitchGuard      : 216
TypeSwitchStmt       : 209
TypeToken            : 5
UnaryExpr            : 139 144 145
UnaryOp              : 144 156
VarDecl              : 53
VarSpec              : 77 79
VarSpecRep           : 78 79
assign_op            : 189
epsilon              : 19 25 28 34 39 50 59 62 65 68 72 80 84 110 113 136 138 142 179 204 207 212 219 221 227 229 235 238 243 247 250 253 259 263
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . SourceFile
    (249) SourceFile -> . PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep
    (254) PackageClause -> . PACKAGE PackageName

    PACKAGE         shift and go to state 4

    start                          shift and go to state 1
    SourceFile                     shift and go to state 2
    PackageClause                  shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> SourceFile .

    $end            reduce using rule 1 (start -> SourceFile .)


state 3

    (249) SourceFile -> PackageClause . SEMICOLON ImportDeclRep TopLevelDeclRep

    SEMICOLON       shift and go to state 5


state 4

    (254) PackageClause -> PACKAGE . PackageName
    (255) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 7

    PackageName                    shift and go to state 6

state 5

    (249) SourceFile -> PackageClause SEMICOLON . ImportDeclRep TopLevelDeclRep
    (250) ImportDeclRep -> . epsilon
    (251) ImportDeclRep -> . ImportDeclRep ImportDecl SEMICOLON
    (265) epsilon -> .

    IMPORT          reduce using rule 265 (epsilon -> .)
    FUNC            reduce using rule 265 (epsilon -> .)
    CONST           reduce using rule 265 (epsilon -> .)
    TYPE            reduce using rule 265 (epsilon -> .)
    VAR             reduce using rule 265 (epsilon -> .)
    $end            reduce using rule 265 (epsilon -> .)

    ImportDeclRep                  shift and go to state 8
    epsilon                        shift and go to state 9

state 6

    (254) PackageClause -> PACKAGE PackageName .

    SEMICOLON       reduce using rule 254 (PackageClause -> PACKAGE PackageName .)


state 7

    (255) PackageName -> IDENTIFIER .

    SEMICOLON       reduce using rule 255 (PackageName -> IDENTIFIER .)
    STRING          reduce using rule 255 (PackageName -> IDENTIFIER .)


state 8

    (249) SourceFile -> PackageClause SEMICOLON ImportDeclRep . TopLevelDeclRep
    (251) ImportDeclRep -> ImportDeclRep . ImportDecl SEMICOLON
    (252) TopLevelDeclRep -> . TopLevelDeclRep TopLevelDecl SEMICOLON
    (253) TopLevelDeclRep -> . epsilon
    (256) ImportDecl -> . IMPORT ImportSpec
    (257) ImportDecl -> . IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
    (265) epsilon -> .

    IMPORT          shift and go to state 13
    FUNC            reduce using rule 265 (epsilon -> .)
    CONST           reduce using rule 265 (epsilon -> .)
    TYPE            reduce using rule 265 (epsilon -> .)
    VAR             reduce using rule 265 (epsilon -> .)
    $end            reduce using rule 265 (epsilon -> .)

    TopLevelDeclRep                shift and go to state 10
    ImportDecl                     shift and go to state 11
    epsilon                        shift and go to state 12

state 9

    (250) ImportDeclRep -> epsilon .

    IMPORT          reduce using rule 250 (ImportDeclRep -> epsilon .)
    FUNC            reduce using rule 250 (ImportDeclRep -> epsilon .)
    CONST           reduce using rule 250 (ImportDeclRep -> epsilon .)
    TYPE            reduce using rule 250 (ImportDeclRep -> epsilon .)
    VAR             reduce using rule 250 (ImportDeclRep -> epsilon .)
    $end            reduce using rule 250 (ImportDeclRep -> epsilon .)


state 10

    (249) SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep .
    (252) TopLevelDeclRep -> TopLevelDeclRep . TopLevelDecl SEMICOLON
    (54) TopLevelDecl -> . Declaration
    (55) TopLevelDecl -> . FunctionDecl
    (51) Declaration -> . ConstDecl
    (52) Declaration -> . TypeDecl
    (53) Declaration -> . VarDecl
    (86) FunctionDecl -> . FUNC FunctionName Function
    (87) FunctionDecl -> . FUNC FunctionName Signature
    (56) ConstDecl -> . CONST ConstSpec
    (57) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (69) TypeDecl -> . TYPE TypeSpec
    (70) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (77) VarDecl -> . VAR VarSpec
    (78) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS

    $end            reduce using rule 249 (SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep .)
    FUNC            shift and go to state 20
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23

    TopLevelDecl                   shift and go to state 14
    Declaration                    shift and go to state 15
    FunctionDecl                   shift and go to state 16
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19

state 11

    (251) ImportDeclRep -> ImportDeclRep ImportDecl . SEMICOLON

    SEMICOLON       shift and go to state 24


state 12

    (253) TopLevelDeclRep -> epsilon .

    FUNC            reduce using rule 253 (TopLevelDeclRep -> epsilon .)
    CONST           reduce using rule 253 (TopLevelDeclRep -> epsilon .)
    TYPE            reduce using rule 253 (TopLevelDeclRep -> epsilon .)
    VAR             reduce using rule 253 (TopLevelDeclRep -> epsilon .)
    $end            reduce using rule 253 (TopLevelDeclRep -> epsilon .)


state 13

    (256) ImportDecl -> IMPORT . ImportSpec
    (257) ImportDecl -> IMPORT . LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS
    (260) ImportSpec -> . PackageNameDotOpt ImportPath
    (261) PackageNameDotOpt -> . DOT
    (262) PackageNameDotOpt -> . PackageName
    (263) PackageNameDotOpt -> . epsilon
    (255) PackageName -> . IDENTIFIER
    (265) epsilon -> .

    LEFT_PARANTHESIS shift and go to state 26
    DOT             shift and go to state 28
    IDENTIFIER      shift and go to state 7
    STRING          reduce using rule 265 (epsilon -> .)

    ImportSpec                     shift and go to state 25
    PackageNameDotOpt              shift and go to state 27
    PackageName                    shift and go to state 29
    epsilon                        shift and go to state 30

state 14

    (252) TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl . SEMICOLON

    SEMICOLON       shift and go to state 31


state 15

    (54) TopLevelDecl -> Declaration .

    SEMICOLON       reduce using rule 54 (TopLevelDecl -> Declaration .)


state 16

    (55) TopLevelDecl -> FunctionDecl .

    SEMICOLON       reduce using rule 55 (TopLevelDecl -> FunctionDecl .)


state 17

    (51) Declaration -> ConstDecl .

    SEMICOLON       reduce using rule 51 (Declaration -> ConstDecl .)


state 18

    (52) Declaration -> TypeDecl .

    SEMICOLON       reduce using rule 52 (Declaration -> TypeDecl .)


state 19

    (53) Declaration -> VarDecl .

    SEMICOLON       reduce using rule 53 (Declaration -> VarDecl .)


state 20

    (86) FunctionDecl -> FUNC . FunctionName Function
    (87) FunctionDecl -> FUNC . FunctionName Signature
    (88) FunctionName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 33

    FunctionName                   shift and go to state 32

state 21

    (56) ConstDecl -> CONST . ConstSpec
    (57) ConstDecl -> CONST . LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (60) ConstSpec -> . IdentifierList TypeExprListOpt
    (63) IdentifierList -> . IDENTIFIER IdentifierRep

    LEFT_PARANTHESIS shift and go to state 35
    IDENTIFIER      shift and go to state 37

    ConstSpec                      shift and go to state 34
    IdentifierList                 shift and go to state 36

state 22

    (69) TypeDecl -> TYPE . TypeSpec
    (70) TypeDecl -> TYPE . LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (73) TypeSpec -> . AliasDecl
    (74) TypeSpec -> . TypeDef
    (75) AliasDecl -> . IDENTIFIER ASSIGN Type
    (76) TypeDef -> . IDENTIFIER Type

    LEFT_PARANTHESIS shift and go to state 39
    IDENTIFIER      shift and go to state 42

    TypeSpec                       shift and go to state 38
    AliasDecl                      shift and go to state 40
    TypeDef                        shift and go to state 41

state 23

    (77) VarDecl -> VAR . VarSpec
    (78) VarDecl -> VAR . LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (81) VarSpec -> . IdentifierList Type ExpressionListOpt
    (82) VarSpec -> . IdentifierList ASSIGN ExpressionList
    (63) IdentifierList -> . IDENTIFIER IdentifierRep

    LEFT_PARANTHESIS shift and go to state 44
    IDENTIFIER      shift and go to state 37

    VarSpec                        shift and go to state 43
    IdentifierList                 shift and go to state 45

state 24

    (251) ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .

    IMPORT          reduce using rule 251 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    FUNC            reduce using rule 251 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    CONST           reduce using rule 251 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    TYPE            reduce using rule 251 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    VAR             reduce using rule 251 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)
    $end            reduce using rule 251 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON .)


state 25

    (256) ImportDecl -> IMPORT ImportSpec .

    SEMICOLON       reduce using rule 256 (ImportDecl -> IMPORT ImportSpec .)


state 26

    (257) ImportDecl -> IMPORT LEFT_PARANTHESIS . ImportSpecRep RIGHT_PARANTHESIS
    (258) ImportSpecRep -> . ImportSpecRep ImportSpec SEMICOLON
    (259) ImportSpecRep -> . epsilon
    (265) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    DOT             reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)
    STRING          reduce using rule 265 (epsilon -> .)

    ImportSpecRep                  shift and go to state 46
    epsilon                        shift and go to state 47

state 27

    (260) ImportSpec -> PackageNameDotOpt . ImportPath
    (264) ImportPath -> . STRING

    STRING          shift and go to state 49

    ImportPath                     shift and go to state 48

state 28

    (261) PackageNameDotOpt -> DOT .

    STRING          reduce using rule 261 (PackageNameDotOpt -> DOT .)


state 29

    (262) PackageNameDotOpt -> PackageName .

    STRING          reduce using rule 262 (PackageNameDotOpt -> PackageName .)


state 30

    (263) PackageNameDotOpt -> epsilon .

    STRING          reduce using rule 263 (PackageNameDotOpt -> epsilon .)


state 31

    (252) TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .

    FUNC            reduce using rule 252 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    CONST           reduce using rule 252 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    TYPE            reduce using rule 252 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    VAR             reduce using rule 252 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)
    $end            reduce using rule 252 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON .)


state 32

    (86) FunctionDecl -> FUNC FunctionName . Function
    (87) FunctionDecl -> FUNC FunctionName . Signature
    (89) Function -> . Signature FunctionBody
    (32) Signature -> . Parameters ResultOpt
    (37) Parameters -> . LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 53

    Function                       shift and go to state 50
    Signature                      shift and go to state 51
    Parameters                     shift and go to state 52

state 33

    (88) FunctionName -> IDENTIFIER .

    LEFT_PARANTHESIS reduce using rule 88 (FunctionName -> IDENTIFIER .)


state 34

    (56) ConstDecl -> CONST ConstSpec .

    SEMICOLON       reduce using rule 56 (ConstDecl -> CONST ConstSpec .)


state 35

    (57) ConstDecl -> CONST LEFT_PARANTHESIS . ConstSpecRep RIGHT_PARANTHESIS
    (58) ConstSpecRep -> . ConstSpecRep ConstSpec SEMICOLON
    (59) ConstSpecRep -> . epsilon
    (265) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)

    ConstSpecRep                   shift and go to state 54
    epsilon                        shift and go to state 55

state 36

    (60) ConstSpec -> IdentifierList . TypeExprListOpt
    (61) TypeExprListOpt -> . TypeOpt ASSIGN ExpressionList
    (62) TypeExprListOpt -> . epsilon
    (18) TypeOpt -> . Type
    (19) TypeOpt -> . epsilon
    (265) epsilon -> .
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    SEMICOLON       reduce using rule 265 (epsilon -> .)
    ASSIGN          reduce using rule 265 (epsilon -> .)
    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    TypeExprListOpt                shift and go to state 56
    TypeOpt                        shift and go to state 57
    epsilon                        shift and go to state 58
    Type                           shift and go to state 59
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 37

    (63) IdentifierList -> IDENTIFIER . IdentifierRep
    (64) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (65) IdentifierRep -> . epsilon
    (265) epsilon -> .

    COMMA           reduce using rule 265 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    INT_T           reduce using rule 265 (epsilon -> .)
    FLOAT_T         reduce using rule 265 (epsilon -> .)
    UINT_T          reduce using rule 265 (epsilon -> .)
    COMPLEX_T       reduce using rule 265 (epsilon -> .)
    RUNE_T          reduce using rule 265 (epsilon -> .)
    BOOL_T          reduce using rule 265 (epsilon -> .)
    STRING_T        reduce using rule 265 (epsilon -> .)
    TYPE            reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)
    LEFT_BRACKET    reduce using rule 265 (epsilon -> .)
    STRUCT          reduce using rule 265 (epsilon -> .)
    MULT            reduce using rule 265 (epsilon -> .)
    ASSIGN          reduce using rule 265 (epsilon -> .)
    SEMICOLON       reduce using rule 265 (epsilon -> .)

    IdentifierRep                  shift and go to state 80
    epsilon                        shift and go to state 81

state 38

    (69) TypeDecl -> TYPE TypeSpec .

    SEMICOLON       reduce using rule 69 (TypeDecl -> TYPE TypeSpec .)


state 39

    (70) TypeDecl -> TYPE LEFT_PARANTHESIS . TypeSpecRep RIGHT_PARANTHESIS
    (71) TypeSpecRep -> . TypeSpecRep TypeSpec SEMICOLON
    (72) TypeSpecRep -> . epsilon
    (265) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)

    TypeSpecRep                    shift and go to state 82
    epsilon                        shift and go to state 83

state 40

    (73) TypeSpec -> AliasDecl .

    SEMICOLON       reduce using rule 73 (TypeSpec -> AliasDecl .)


state 41

    (74) TypeSpec -> TypeDef .

    SEMICOLON       reduce using rule 74 (TypeSpec -> TypeDef .)


state 42

    (75) AliasDecl -> IDENTIFIER . ASSIGN Type
    (76) TypeDef -> IDENTIFIER . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    ASSIGN          shift and go to state 84
    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 85
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 43

    (77) VarDecl -> VAR VarSpec .

    SEMICOLON       reduce using rule 77 (VarDecl -> VAR VarSpec .)


state 44

    (78) VarDecl -> VAR LEFT_PARANTHESIS . VarSpecRep RIGHT_PARANTHESIS
    (79) VarSpecRep -> . VarSpecRep VarSpec SEMICOLON
    (80) VarSpecRep -> . epsilon
    (265) epsilon -> .

    RIGHT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)

    VarSpecRep                     shift and go to state 86
    epsilon                        shift and go to state 87

state 45

    (81) VarSpec -> IdentifierList . Type ExpressionListOpt
    (82) VarSpec -> IdentifierList . ASSIGN ExpressionList
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    ASSIGN          shift and go to state 89
    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 88
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 46

    (257) ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep . RIGHT_PARANTHESIS
    (258) ImportSpecRep -> ImportSpecRep . ImportSpec SEMICOLON
    (260) ImportSpec -> . PackageNameDotOpt ImportPath
    (261) PackageNameDotOpt -> . DOT
    (262) PackageNameDotOpt -> . PackageName
    (263) PackageNameDotOpt -> . epsilon
    (255) PackageName -> . IDENTIFIER
    (265) epsilon -> .

    RIGHT_PARANTHESIS shift and go to state 90
    DOT             shift and go to state 28
    IDENTIFIER      shift and go to state 7
    STRING          reduce using rule 265 (epsilon -> .)

    ImportSpec                     shift and go to state 91
    PackageNameDotOpt              shift and go to state 27
    PackageName                    shift and go to state 29
    epsilon                        shift and go to state 30

state 47

    (259) ImportSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 259 (ImportSpecRep -> epsilon .)
    DOT             reduce using rule 259 (ImportSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 259 (ImportSpecRep -> epsilon .)
    STRING          reduce using rule 259 (ImportSpecRep -> epsilon .)


state 48

    (260) ImportSpec -> PackageNameDotOpt ImportPath .

    SEMICOLON       reduce using rule 260 (ImportSpec -> PackageNameDotOpt ImportPath .)


state 49

    (264) ImportPath -> STRING .

    SEMICOLON       reduce using rule 264 (ImportPath -> STRING .)


state 50

    (86) FunctionDecl -> FUNC FunctionName Function .

    SEMICOLON       reduce using rule 86 (FunctionDecl -> FUNC FunctionName Function .)


state 51

    (87) FunctionDecl -> FUNC FunctionName Signature .
    (89) Function -> Signature . FunctionBody
    (90) FunctionBody -> . Block
    (47) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    SEMICOLON       reduce using rule 87 (FunctionDecl -> FUNC FunctionName Signature .)
    LEFT_BRACES     shift and go to state 94

    FunctionBody                   shift and go to state 92
    Block                          shift and go to state 93

state 52

    (32) Signature -> Parameters . ResultOpt
    (33) ResultOpt -> . Result
    (34) ResultOpt -> . epsilon
    (35) Result -> . Parameters
    (36) Result -> . Type
    (265) epsilon -> .
    (37) Parameters -> . LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_BRACES     reduce using rule 265 (epsilon -> .)
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    LEFT_PARANTHESIS shift and go to state 100
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Parameters                     shift and go to state 95
    ResultOpt                      shift and go to state 96
    Result                         shift and go to state 97
    epsilon                        shift and go to state 98
    Type                           shift and go to state 99
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 53

    (37) Parameters -> LEFT_PARANTHESIS . ParameterListOpt RIGHT_PARANTHESIS
    (38) ParameterListOpt -> . ParametersList
    (39) ParameterListOpt -> . epsilon
    (40) ParametersList -> . Type
    (41) ParametersList -> . IdentifierList Type
    (42) ParametersList -> . ParameterDeclCommaRep
    (265) epsilon -> .
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (63) IdentifierList -> . IDENTIFIER IdentifierRep
    (43) ParameterDeclCommaRep -> . ParameterDeclCommaRep COMMA ParameterDecl
    (44) ParameterDeclCommaRep -> . ParameterDecl COMMA ParameterDecl
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (45) ParameterDecl -> . IdentifierList Type
    (46) ParameterDecl -> . Type
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    RIGHT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    LEFT_PARANTHESIS shift and go to state 62
    IDENTIFIER      shift and go to state 107
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    ParameterListOpt               shift and go to state 101
    ParametersList                 shift and go to state 102
    epsilon                        shift and go to state 103
    Type                           shift and go to state 104
    IdentifierList                 shift and go to state 105
    ParameterDeclCommaRep          shift and go to state 106
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    ParameterDecl                  shift and go to state 108
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 54

    (57) ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep . RIGHT_PARANTHESIS
    (58) ConstSpecRep -> ConstSpecRep . ConstSpec SEMICOLON
    (60) ConstSpec -> . IdentifierList TypeExprListOpt
    (63) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_PARANTHESIS shift and go to state 109
    IDENTIFIER      shift and go to state 37

    ConstSpec                      shift and go to state 110
    IdentifierList                 shift and go to state 36

state 55

    (59) ConstSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 59 (ConstSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 59 (ConstSpecRep -> epsilon .)


state 56

    (60) ConstSpec -> IdentifierList TypeExprListOpt .

    SEMICOLON       reduce using rule 60 (ConstSpec -> IdentifierList TypeExprListOpt .)


state 57

    (61) TypeExprListOpt -> TypeOpt . ASSIGN ExpressionList

    ASSIGN          shift and go to state 111


state 58

    (62) TypeExprListOpt -> epsilon .
    (19) TypeOpt -> epsilon .

    SEMICOLON       reduce using rule 62 (TypeExprListOpt -> epsilon .)
    ASSIGN          reduce using rule 19 (TypeOpt -> epsilon .)


state 59

    (18) TypeOpt -> Type .

    ASSIGN          reduce using rule 18 (TypeOpt -> Type .)


state 60

    (2) Type -> TypeName .

    ASSIGN          reduce using rule 2 (Type -> TypeName .)
    SEMICOLON       reduce using rule 2 (Type -> TypeName .)
    LEFT_BRACES     reduce using rule 2 (Type -> TypeName .)
    RIGHT_PARANTHESIS reduce using rule 2 (Type -> TypeName .)
    COMMA           reduce using rule 2 (Type -> TypeName .)
    LEFT_PARANTHESIS reduce using rule 2 (Type -> TypeName .)
    STRING          reduce using rule 2 (Type -> TypeName .)
    COLON           reduce using rule 2 (Type -> TypeName .)


state 61

    (3) Type -> TypeLit .

    ASSIGN          reduce using rule 3 (Type -> TypeLit .)
    SEMICOLON       reduce using rule 3 (Type -> TypeLit .)
    LEFT_BRACES     reduce using rule 3 (Type -> TypeLit .)
    RIGHT_PARANTHESIS reduce using rule 3 (Type -> TypeLit .)
    COMMA           reduce using rule 3 (Type -> TypeLit .)
    LEFT_PARANTHESIS reduce using rule 3 (Type -> TypeLit .)
    STRING          reduce using rule 3 (Type -> TypeLit .)
    COLON           reduce using rule 3 (Type -> TypeLit .)


state 62

    (4) Type -> LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 112
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 63

    (5) TypeName -> TypeToken .

    ASSIGN          reduce using rule 5 (TypeName -> TypeToken .)
    SEMICOLON       reduce using rule 5 (TypeName -> TypeToken .)
    LEFT_BRACES     reduce using rule 5 (TypeName -> TypeToken .)
    RIGHT_PARANTHESIS reduce using rule 5 (TypeName -> TypeToken .)
    COMMA           reduce using rule 5 (TypeName -> TypeToken .)
    LEFT_PARANTHESIS reduce using rule 5 (TypeName -> TypeToken .)
    STRING          reduce using rule 5 (TypeName -> TypeToken .)
    COLON           reduce using rule 5 (TypeName -> TypeToken .)


state 64

    (6) TypeName -> QualifiedIdent .

    ASSIGN          reduce using rule 6 (TypeName -> QualifiedIdent .)
    SEMICOLON       reduce using rule 6 (TypeName -> QualifiedIdent .)
    LEFT_BRACES     reduce using rule 6 (TypeName -> QualifiedIdent .)
    RIGHT_PARANTHESIS reduce using rule 6 (TypeName -> QualifiedIdent .)
    COMMA           reduce using rule 6 (TypeName -> QualifiedIdent .)
    LEFT_PARANTHESIS reduce using rule 6 (TypeName -> QualifiedIdent .)
    STRING          reduce using rule 6 (TypeName -> QualifiedIdent .)
    COLON           reduce using rule 6 (TypeName -> QualifiedIdent .)


state 65

    (15) TypeLit -> ArrayType .

    ASSIGN          reduce using rule 15 (TypeLit -> ArrayType .)
    SEMICOLON       reduce using rule 15 (TypeLit -> ArrayType .)
    LEFT_BRACES     reduce using rule 15 (TypeLit -> ArrayType .)
    RIGHT_PARANTHESIS reduce using rule 15 (TypeLit -> ArrayType .)
    COMMA           reduce using rule 15 (TypeLit -> ArrayType .)
    LEFT_PARANTHESIS reduce using rule 15 (TypeLit -> ArrayType .)
    STRING          reduce using rule 15 (TypeLit -> ArrayType .)
    COLON           reduce using rule 15 (TypeLit -> ArrayType .)


state 66

    (16) TypeLit -> StructType .

    ASSIGN          reduce using rule 16 (TypeLit -> StructType .)
    SEMICOLON       reduce using rule 16 (TypeLit -> StructType .)
    LEFT_BRACES     reduce using rule 16 (TypeLit -> StructType .)
    RIGHT_PARANTHESIS reduce using rule 16 (TypeLit -> StructType .)
    COMMA           reduce using rule 16 (TypeLit -> StructType .)
    LEFT_PARANTHESIS reduce using rule 16 (TypeLit -> StructType .)
    STRING          reduce using rule 16 (TypeLit -> StructType .)
    COLON           reduce using rule 16 (TypeLit -> StructType .)


state 67

    (17) TypeLit -> PointerType .

    ASSIGN          reduce using rule 17 (TypeLit -> PointerType .)
    SEMICOLON       reduce using rule 17 (TypeLit -> PointerType .)
    LEFT_BRACES     reduce using rule 17 (TypeLit -> PointerType .)
    RIGHT_PARANTHESIS reduce using rule 17 (TypeLit -> PointerType .)
    COMMA           reduce using rule 17 (TypeLit -> PointerType .)
    LEFT_PARANTHESIS reduce using rule 17 (TypeLit -> PointerType .)
    STRING          reduce using rule 17 (TypeLit -> PointerType .)
    COLON           reduce using rule 17 (TypeLit -> PointerType .)


state 68

    (7) TypeToken -> INT_T .

    ASSIGN          reduce using rule 7 (TypeToken -> INT_T .)
    SEMICOLON       reduce using rule 7 (TypeToken -> INT_T .)
    LEFT_BRACES     reduce using rule 7 (TypeToken -> INT_T .)
    RIGHT_PARANTHESIS reduce using rule 7 (TypeToken -> INT_T .)
    COMMA           reduce using rule 7 (TypeToken -> INT_T .)
    LEFT_PARANTHESIS reduce using rule 7 (TypeToken -> INT_T .)
    STRING          reduce using rule 7 (TypeToken -> INT_T .)
    COLON           reduce using rule 7 (TypeToken -> INT_T .)


state 69

    (8) TypeToken -> FLOAT_T .

    ASSIGN          reduce using rule 8 (TypeToken -> FLOAT_T .)
    SEMICOLON       reduce using rule 8 (TypeToken -> FLOAT_T .)
    LEFT_BRACES     reduce using rule 8 (TypeToken -> FLOAT_T .)
    RIGHT_PARANTHESIS reduce using rule 8 (TypeToken -> FLOAT_T .)
    COMMA           reduce using rule 8 (TypeToken -> FLOAT_T .)
    LEFT_PARANTHESIS reduce using rule 8 (TypeToken -> FLOAT_T .)
    STRING          reduce using rule 8 (TypeToken -> FLOAT_T .)
    COLON           reduce using rule 8 (TypeToken -> FLOAT_T .)


state 70

    (9) TypeToken -> UINT_T .

    ASSIGN          reduce using rule 9 (TypeToken -> UINT_T .)
    SEMICOLON       reduce using rule 9 (TypeToken -> UINT_T .)
    LEFT_BRACES     reduce using rule 9 (TypeToken -> UINT_T .)
    RIGHT_PARANTHESIS reduce using rule 9 (TypeToken -> UINT_T .)
    COMMA           reduce using rule 9 (TypeToken -> UINT_T .)
    LEFT_PARANTHESIS reduce using rule 9 (TypeToken -> UINT_T .)
    STRING          reduce using rule 9 (TypeToken -> UINT_T .)
    COLON           reduce using rule 9 (TypeToken -> UINT_T .)


state 71

    (10) TypeToken -> COMPLEX_T .

    ASSIGN          reduce using rule 10 (TypeToken -> COMPLEX_T .)
    SEMICOLON       reduce using rule 10 (TypeToken -> COMPLEX_T .)
    LEFT_BRACES     reduce using rule 10 (TypeToken -> COMPLEX_T .)
    RIGHT_PARANTHESIS reduce using rule 10 (TypeToken -> COMPLEX_T .)
    COMMA           reduce using rule 10 (TypeToken -> COMPLEX_T .)
    LEFT_PARANTHESIS reduce using rule 10 (TypeToken -> COMPLEX_T .)
    STRING          reduce using rule 10 (TypeToken -> COMPLEX_T .)
    COLON           reduce using rule 10 (TypeToken -> COMPLEX_T .)


state 72

    (11) TypeToken -> RUNE_T .

    ASSIGN          reduce using rule 11 (TypeToken -> RUNE_T .)
    SEMICOLON       reduce using rule 11 (TypeToken -> RUNE_T .)
    LEFT_BRACES     reduce using rule 11 (TypeToken -> RUNE_T .)
    RIGHT_PARANTHESIS reduce using rule 11 (TypeToken -> RUNE_T .)
    COMMA           reduce using rule 11 (TypeToken -> RUNE_T .)
    LEFT_PARANTHESIS reduce using rule 11 (TypeToken -> RUNE_T .)
    STRING          reduce using rule 11 (TypeToken -> RUNE_T .)
    COLON           reduce using rule 11 (TypeToken -> RUNE_T .)


state 73

    (12) TypeToken -> BOOL_T .

    ASSIGN          reduce using rule 12 (TypeToken -> BOOL_T .)
    SEMICOLON       reduce using rule 12 (TypeToken -> BOOL_T .)
    LEFT_BRACES     reduce using rule 12 (TypeToken -> BOOL_T .)
    RIGHT_PARANTHESIS reduce using rule 12 (TypeToken -> BOOL_T .)
    COMMA           reduce using rule 12 (TypeToken -> BOOL_T .)
    LEFT_PARANTHESIS reduce using rule 12 (TypeToken -> BOOL_T .)
    STRING          reduce using rule 12 (TypeToken -> BOOL_T .)
    COLON           reduce using rule 12 (TypeToken -> BOOL_T .)


state 74

    (13) TypeToken -> STRING_T .

    ASSIGN          reduce using rule 13 (TypeToken -> STRING_T .)
    SEMICOLON       reduce using rule 13 (TypeToken -> STRING_T .)
    LEFT_BRACES     reduce using rule 13 (TypeToken -> STRING_T .)
    RIGHT_PARANTHESIS reduce using rule 13 (TypeToken -> STRING_T .)
    COMMA           reduce using rule 13 (TypeToken -> STRING_T .)
    LEFT_PARANTHESIS reduce using rule 13 (TypeToken -> STRING_T .)
    STRING          reduce using rule 13 (TypeToken -> STRING_T .)
    COLON           reduce using rule 13 (TypeToken -> STRING_T .)


state 75

    (14) TypeToken -> TYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 113


state 76

    (103) QualifiedIdent -> IDENTIFIER . DOT TypeName

    DOT             shift and go to state 114


state 77

    (20) ArrayType -> LEFT_BRACKET . ArrayLength RIGHT_BRACKET ElementType
    (21) ArrayLength -> . Expression
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ArrayLength                    shift and go to state 115
    Expression                     shift and go to state 116
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 78

    (23) StructType -> STRUCT . LEFT_BRACES FieldDeclRep RIGHT_BRACES

    LEFT_BRACES     shift and go to state 140


state 79

    (30) PointerType -> MULT . BaseType
    (31) BaseType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    BaseType                       shift and go to state 141
    Type                           shift and go to state 142
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 80

    (63) IdentifierList -> IDENTIFIER IdentifierRep .
    (64) IdentifierRep -> IdentifierRep . COMMA IDENTIFIER

    LEFT_PARANTHESIS reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    INT_T           reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    FLOAT_T         reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    UINT_T          reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    COMPLEX_T       reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    RUNE_T          reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    BOOL_T          reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    STRING_T        reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    TYPE            reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    IDENTIFIER      reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    LEFT_BRACKET    reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    STRUCT          reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    MULT            reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    ASSIGN          reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    SEMICOLON       reduce using rule 63 (IdentifierList -> IDENTIFIER IdentifierRep .)
    COMMA           shift and go to state 143


state 81

    (65) IdentifierRep -> epsilon .

    COMMA           reduce using rule 65 (IdentifierRep -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 65 (IdentifierRep -> epsilon .)
    INT_T           reduce using rule 65 (IdentifierRep -> epsilon .)
    FLOAT_T         reduce using rule 65 (IdentifierRep -> epsilon .)
    UINT_T          reduce using rule 65 (IdentifierRep -> epsilon .)
    COMPLEX_T       reduce using rule 65 (IdentifierRep -> epsilon .)
    RUNE_T          reduce using rule 65 (IdentifierRep -> epsilon .)
    BOOL_T          reduce using rule 65 (IdentifierRep -> epsilon .)
    STRING_T        reduce using rule 65 (IdentifierRep -> epsilon .)
    TYPE            reduce using rule 65 (IdentifierRep -> epsilon .)
    IDENTIFIER      reduce using rule 65 (IdentifierRep -> epsilon .)
    LEFT_BRACKET    reduce using rule 65 (IdentifierRep -> epsilon .)
    STRUCT          reduce using rule 65 (IdentifierRep -> epsilon .)
    MULT            reduce using rule 65 (IdentifierRep -> epsilon .)
    ASSIGN          reduce using rule 65 (IdentifierRep -> epsilon .)
    SEMICOLON       reduce using rule 65 (IdentifierRep -> epsilon .)


state 82

    (70) TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep . RIGHT_PARANTHESIS
    (71) TypeSpecRep -> TypeSpecRep . TypeSpec SEMICOLON
    (73) TypeSpec -> . AliasDecl
    (74) TypeSpec -> . TypeDef
    (75) AliasDecl -> . IDENTIFIER ASSIGN Type
    (76) TypeDef -> . IDENTIFIER Type

    RIGHT_PARANTHESIS shift and go to state 144
    IDENTIFIER      shift and go to state 42

    TypeSpec                       shift and go to state 145
    AliasDecl                      shift and go to state 40
    TypeDef                        shift and go to state 41

state 83

    (72) TypeSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 72 (TypeSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 72 (TypeSpecRep -> epsilon .)


state 84

    (75) AliasDecl -> IDENTIFIER ASSIGN . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 146
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 85

    (76) TypeDef -> IDENTIFIER Type .

    SEMICOLON       reduce using rule 76 (TypeDef -> IDENTIFIER Type .)


state 86

    (78) VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep . RIGHT_PARANTHESIS
    (79) VarSpecRep -> VarSpecRep . VarSpec SEMICOLON
    (81) VarSpec -> . IdentifierList Type ExpressionListOpt
    (82) VarSpec -> . IdentifierList ASSIGN ExpressionList
    (63) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_PARANTHESIS shift and go to state 147
    IDENTIFIER      shift and go to state 37

    VarSpec                        shift and go to state 148
    IdentifierList                 shift and go to state 45

state 87

    (80) VarSpecRep -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 80 (VarSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 80 (VarSpecRep -> epsilon .)


state 88

    (81) VarSpec -> IdentifierList Type . ExpressionListOpt
    (83) ExpressionListOpt -> . ASSIGN ExpressionList
    (84) ExpressionListOpt -> . epsilon
    (265) epsilon -> .

    ASSIGN          shift and go to state 150
    SEMICOLON       reduce using rule 265 (epsilon -> .)

    ExpressionListOpt              shift and go to state 149
    epsilon                        shift and go to state 151

state 89

    (82) VarSpec -> IdentifierList ASSIGN . ExpressionList
    (66) ExpressionList -> . Expression ExpressionRep
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ExpressionList                 shift and go to state 152
    Expression                     shift and go to state 153
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 90

    (257) ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 257 (ImportDecl -> IMPORT LEFT_PARANTHESIS ImportSpecRep RIGHT_PARANTHESIS .)


state 91

    (258) ImportSpecRep -> ImportSpecRep ImportSpec . SEMICOLON

    SEMICOLON       shift and go to state 154


state 92

    (89) Function -> Signature FunctionBody .

    SEMICOLON       reduce using rule 89 (Function -> Signature FunctionBody .)


state 93

    (90) FunctionBody -> Block .

    SEMICOLON       reduce using rule 90 (FunctionBody -> Block .)


state 94

    (47) Block -> LEFT_BRACES . StatementList RIGHT_BRACES
    (48) StatementList -> . StatementRep
    (49) StatementRep -> . StatementRep Statement SEMICOLON
    (50) StatementRep -> . epsilon
    (265) epsilon -> .

    RETURN          reduce using rule 265 (epsilon -> .)
    BREAK           reduce using rule 265 (epsilon -> .)
    CONTINUE        reduce using rule 265 (epsilon -> .)
    GOTO            reduce using rule 265 (epsilon -> .)
    LEFT_BRACES     reduce using rule 265 (epsilon -> .)
    IF              reduce using rule 265 (epsilon -> .)
    FOR             reduce using rule 265 (epsilon -> .)
    CONST           reduce using rule 265 (epsilon -> .)
    TYPE            reduce using rule 265 (epsilon -> .)
    VAR             reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)
    SWITCH          reduce using rule 265 (epsilon -> .)
    NOT             reduce using rule 265 (epsilon -> .)
    ADD             reduce using rule 265 (epsilon -> .)
    SUB             reduce using rule 265 (epsilon -> .)
    MULT            reduce using rule 265 (epsilon -> .)
    AND             reduce using rule 265 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    TYPECAST        reduce using rule 265 (epsilon -> .)
    INTEGER         reduce using rule 265 (epsilon -> .)
    OCTAL           reduce using rule 265 (epsilon -> .)
    HEX             reduce using rule 265 (epsilon -> .)
    FLOAT           reduce using rule 265 (epsilon -> .)
    IMAGINARY       reduce using rule 265 (epsilon -> .)
    RUNE            reduce using rule 265 (epsilon -> .)
    STRING          reduce using rule 265 (epsilon -> .)
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 265 (epsilon -> .)

    StatementList                  shift and go to state 155
    StatementRep                   shift and go to state 156
    epsilon                        shift and go to state 157

state 95

    (35) Result -> Parameters .

    LEFT_BRACES     reduce using rule 35 (Result -> Parameters .)
    SEMICOLON       reduce using rule 35 (Result -> Parameters .)


state 96

    (32) Signature -> Parameters ResultOpt .

    LEFT_BRACES     reduce using rule 32 (Signature -> Parameters ResultOpt .)
    SEMICOLON       reduce using rule 32 (Signature -> Parameters ResultOpt .)


state 97

    (33) ResultOpt -> Result .

    LEFT_BRACES     reduce using rule 33 (ResultOpt -> Result .)
    SEMICOLON       reduce using rule 33 (ResultOpt -> Result .)


state 98

    (34) ResultOpt -> epsilon .

    LEFT_BRACES     reduce using rule 34 (ResultOpt -> epsilon .)
    SEMICOLON       reduce using rule 34 (ResultOpt -> epsilon .)


state 99

    (36) Result -> Type .

    LEFT_BRACES     reduce using rule 36 (Result -> Type .)
    SEMICOLON       reduce using rule 36 (Result -> Type .)


state 100

    (37) Parameters -> LEFT_PARANTHESIS . ParameterListOpt RIGHT_PARANTHESIS
    (4) Type -> LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (38) ParameterListOpt -> . ParametersList
    (39) ParameterListOpt -> . epsilon
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (40) ParametersList -> . Type
    (41) ParametersList -> . IdentifierList Type
    (42) ParametersList -> . ParameterDeclCommaRep
    (265) epsilon -> .
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (63) IdentifierList -> . IDENTIFIER IdentifierRep
    (43) ParameterDeclCommaRep -> . ParameterDeclCommaRep COMMA ParameterDecl
    (44) ParameterDeclCommaRep -> . ParameterDecl COMMA ParameterDecl
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType
    (45) ParameterDecl -> . IdentifierList Type
    (46) ParameterDecl -> . Type

    LEFT_PARANTHESIS shift and go to state 62
    RIGHT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    IDENTIFIER      shift and go to state 107
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    ParameterListOpt               shift and go to state 101
    Type                           shift and go to state 158
    ParametersList                 shift and go to state 102
    epsilon                        shift and go to state 103
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    IdentifierList                 shift and go to state 105
    ParameterDeclCommaRep          shift and go to state 106
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67
    ParameterDecl                  shift and go to state 108

state 101

    (37) Parameters -> LEFT_PARANTHESIS ParameterListOpt . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 159


state 102

    (38) ParameterListOpt -> ParametersList .

    RIGHT_PARANTHESIS reduce using rule 38 (ParameterListOpt -> ParametersList .)


state 103

    (39) ParameterListOpt -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 39 (ParameterListOpt -> epsilon .)


state 104

    (40) ParametersList -> Type .
    (46) ParameterDecl -> Type .

    RIGHT_PARANTHESIS reduce using rule 40 (ParametersList -> Type .)
    COMMA           reduce using rule 46 (ParameterDecl -> Type .)


state 105

    (41) ParametersList -> IdentifierList . Type
    (45) ParameterDecl -> IdentifierList . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 160
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 106

    (42) ParametersList -> ParameterDeclCommaRep .
    (43) ParameterDeclCommaRep -> ParameterDeclCommaRep . COMMA ParameterDecl

    RIGHT_PARANTHESIS reduce using rule 42 (ParametersList -> ParameterDeclCommaRep .)
    COMMA           shift and go to state 161


state 107

    (63) IdentifierList -> IDENTIFIER . IdentifierRep
    (103) QualifiedIdent -> IDENTIFIER . DOT TypeName
    (64) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (65) IdentifierRep -> . epsilon
    (265) epsilon -> .

    DOT             shift and go to state 114
    COMMA           reduce using rule 265 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    INT_T           reduce using rule 265 (epsilon -> .)
    FLOAT_T         reduce using rule 265 (epsilon -> .)
    UINT_T          reduce using rule 265 (epsilon -> .)
    COMPLEX_T       reduce using rule 265 (epsilon -> .)
    RUNE_T          reduce using rule 265 (epsilon -> .)
    BOOL_T          reduce using rule 265 (epsilon -> .)
    STRING_T        reduce using rule 265 (epsilon -> .)
    TYPE            reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)
    LEFT_BRACKET    reduce using rule 265 (epsilon -> .)
    STRUCT          reduce using rule 265 (epsilon -> .)
    MULT            reduce using rule 265 (epsilon -> .)

    IdentifierRep                  shift and go to state 80
    epsilon                        shift and go to state 81

state 108

    (44) ParameterDeclCommaRep -> ParameterDecl . COMMA ParameterDecl

    COMMA           shift and go to state 162


state 109

    (57) ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 57 (ConstDecl -> CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS .)


state 110

    (58) ConstSpecRep -> ConstSpecRep ConstSpec . SEMICOLON

    SEMICOLON       shift and go to state 163


state 111

    (61) TypeExprListOpt -> TypeOpt ASSIGN . ExpressionList
    (66) ExpressionList -> . Expression ExpressionRep
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ExpressionList                 shift and go to state 164
    Expression                     shift and go to state 153
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 112

    (4) Type -> LEFT_PARANTHESIS Type . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 165


state 113

    (14) TypeToken -> TYPE IDENTIFIER .

    ASSIGN          reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    SEMICOLON       reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    LEFT_BRACES     reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    STRING          reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)
    COLON           reduce using rule 14 (TypeToken -> TYPE IDENTIFIER .)


state 114

    (103) QualifiedIdent -> IDENTIFIER DOT . TypeName
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName

    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76

    TypeName                       shift and go to state 166
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64

state 115

    (20) ArrayType -> LEFT_BRACKET ArrayLength . RIGHT_BRACKET ElementType

    RIGHT_BRACKET   shift and go to state 167


state 116

    (21) ArrayLength -> Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    RIGHT_BRACKET   reduce using rule 21 (ArrayLength -> Expression .)
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 117

    (139) Expression -> UnaryExpr .

    LOG_OR          reduce using rule 139 (Expression -> UnaryExpr .)
    LOG_AND         reduce using rule 139 (Expression -> UnaryExpr .)
    EQ              reduce using rule 139 (Expression -> UnaryExpr .)
    NEQ             reduce using rule 139 (Expression -> UnaryExpr .)
    LT              reduce using rule 139 (Expression -> UnaryExpr .)
    GT              reduce using rule 139 (Expression -> UnaryExpr .)
    LEQ             reduce using rule 139 (Expression -> UnaryExpr .)
    GEQ             reduce using rule 139 (Expression -> UnaryExpr .)
    OR              reduce using rule 139 (Expression -> UnaryExpr .)
    XOR             reduce using rule 139 (Expression -> UnaryExpr .)
    DIV             reduce using rule 139 (Expression -> UnaryExpr .)
    MOD             reduce using rule 139 (Expression -> UnaryExpr .)
    LSHIFT          reduce using rule 139 (Expression -> UnaryExpr .)
    RSHIFT          reduce using rule 139 (Expression -> UnaryExpr .)
    ADD             reduce using rule 139 (Expression -> UnaryExpr .)
    SUB             reduce using rule 139 (Expression -> UnaryExpr .)
    MULT            reduce using rule 139 (Expression -> UnaryExpr .)
    AND             reduce using rule 139 (Expression -> UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 139 (Expression -> UnaryExpr .)
    COMMA           reduce using rule 139 (Expression -> UnaryExpr .)
    SEMICOLON       reduce using rule 139 (Expression -> UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 139 (Expression -> UnaryExpr .)
    INC             reduce using rule 139 (Expression -> UnaryExpr .)
    DEC             reduce using rule 139 (Expression -> UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 139 (Expression -> UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 139 (Expression -> UnaryExpr .)
    MULT_ASSIGN     reduce using rule 139 (Expression -> UnaryExpr .)
    DIV_ASSIGN      reduce using rule 139 (Expression -> UnaryExpr .)
    MOD_ASSIGN      reduce using rule 139 (Expression -> UnaryExpr .)
    AND_ASSIGN      reduce using rule 139 (Expression -> UnaryExpr .)
    OR_ASSIGN       reduce using rule 139 (Expression -> UnaryExpr .)
    XOR_ASSIGN      reduce using rule 139 (Expression -> UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 139 (Expression -> UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 139 (Expression -> UnaryExpr .)
    ASSIGN          reduce using rule 139 (Expression -> UnaryExpr .)
    COLON           reduce using rule 139 (Expression -> UnaryExpr .)
    LEFT_BRACES     reduce using rule 139 (Expression -> UnaryExpr .)


state 118

    (143) UnaryExpr -> PrimaryExpr .
    (123) PrimaryExpr -> PrimaryExpr . Selector
    (125) PrimaryExpr -> PrimaryExpr . Index
    (126) PrimaryExpr -> PrimaryExpr . Slice
    (127) PrimaryExpr -> PrimaryExpr . TypeAssertion
    (128) PrimaryExpr -> PrimaryExpr . Arguments
    (129) Selector -> . DOT IDENTIFIER
    (130) Index -> . LEFT_BRACKET Expression RIGHT_BRACKET
    (131) Slice -> . LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (132) Slice -> . LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (133) TypeAssertion -> . DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (134) Arguments -> . LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS

    LOG_OR          reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    LOG_AND         reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    EQ              reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    NEQ             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    LT              reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    GT              reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    LEQ             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    GEQ             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    OR              reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    XOR             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    DIV             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    MOD             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    LSHIFT          reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    RSHIFT          reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    ADD             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    SUB             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    MULT            reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    AND             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    RIGHT_BRACKET   reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    COMMA           reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    SEMICOLON       reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    INC             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    DEC             reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    PLUS_ASSIGN     reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    MINUS_ASSIGN    reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    MULT_ASSIGN     reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    DIV_ASSIGN      reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    MOD_ASSIGN      reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    AND_ASSIGN      reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    OR_ASSIGN       reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    XOR_ASSIGN      reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    ASSIGN          reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    COLON           reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    LEFT_BRACES     reduce using rule 143 (UnaryExpr -> PrimaryExpr .)
    DOT             shift and go to state 191
    LEFT_BRACKET    shift and go to state 192
    LEFT_PARANTHESIS shift and go to state 193

    Selector                       shift and go to state 186
    Index                          shift and go to state 187
    Slice                          shift and go to state 188
    TypeAssertion                  shift and go to state 189
    Arguments                      shift and go to state 190

state 119

    (144) UnaryExpr -> UnaryOp . UnaryExpr
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    UnaryOp                        shift and go to state 119
    UnaryExpr                      shift and go to state 194
    PrimaryExpr                    shift and go to state 118
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 120

    (145) UnaryExpr -> NOT . UnaryExpr
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    UnaryExpr                      shift and go to state 195
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 121

    (122) PrimaryExpr -> Operand .

    DOT             reduce using rule 122 (PrimaryExpr -> Operand .)
    LEFT_BRACKET    reduce using rule 122 (PrimaryExpr -> Operand .)
    LEFT_PARANTHESIS reduce using rule 122 (PrimaryExpr -> Operand .)
    LOG_OR          reduce using rule 122 (PrimaryExpr -> Operand .)
    LOG_AND         reduce using rule 122 (PrimaryExpr -> Operand .)
    EQ              reduce using rule 122 (PrimaryExpr -> Operand .)
    NEQ             reduce using rule 122 (PrimaryExpr -> Operand .)
    LT              reduce using rule 122 (PrimaryExpr -> Operand .)
    GT              reduce using rule 122 (PrimaryExpr -> Operand .)
    LEQ             reduce using rule 122 (PrimaryExpr -> Operand .)
    GEQ             reduce using rule 122 (PrimaryExpr -> Operand .)
    OR              reduce using rule 122 (PrimaryExpr -> Operand .)
    XOR             reduce using rule 122 (PrimaryExpr -> Operand .)
    DIV             reduce using rule 122 (PrimaryExpr -> Operand .)
    MOD             reduce using rule 122 (PrimaryExpr -> Operand .)
    LSHIFT          reduce using rule 122 (PrimaryExpr -> Operand .)
    RSHIFT          reduce using rule 122 (PrimaryExpr -> Operand .)
    ADD             reduce using rule 122 (PrimaryExpr -> Operand .)
    SUB             reduce using rule 122 (PrimaryExpr -> Operand .)
    MULT            reduce using rule 122 (PrimaryExpr -> Operand .)
    AND             reduce using rule 122 (PrimaryExpr -> Operand .)
    RIGHT_BRACKET   reduce using rule 122 (PrimaryExpr -> Operand .)
    COMMA           reduce using rule 122 (PrimaryExpr -> Operand .)
    SEMICOLON       reduce using rule 122 (PrimaryExpr -> Operand .)
    RIGHT_PARANTHESIS reduce using rule 122 (PrimaryExpr -> Operand .)
    INC             reduce using rule 122 (PrimaryExpr -> Operand .)
    DEC             reduce using rule 122 (PrimaryExpr -> Operand .)
    PLUS_ASSIGN     reduce using rule 122 (PrimaryExpr -> Operand .)
    MINUS_ASSIGN    reduce using rule 122 (PrimaryExpr -> Operand .)
    MULT_ASSIGN     reduce using rule 122 (PrimaryExpr -> Operand .)
    DIV_ASSIGN      reduce using rule 122 (PrimaryExpr -> Operand .)
    MOD_ASSIGN      reduce using rule 122 (PrimaryExpr -> Operand .)
    AND_ASSIGN      reduce using rule 122 (PrimaryExpr -> Operand .)
    OR_ASSIGN       reduce using rule 122 (PrimaryExpr -> Operand .)
    XOR_ASSIGN      reduce using rule 122 (PrimaryExpr -> Operand .)
    LSHIFT_ASSIGN   reduce using rule 122 (PrimaryExpr -> Operand .)
    RSHIFT_ASSIGN   reduce using rule 122 (PrimaryExpr -> Operand .)
    ASSIGN          reduce using rule 122 (PrimaryExpr -> Operand .)
    COLON           reduce using rule 122 (PrimaryExpr -> Operand .)
    LEFT_BRACES     reduce using rule 122 (PrimaryExpr -> Operand .)


state 122

    (124) PrimaryExpr -> Conversion .

    DOT             reduce using rule 124 (PrimaryExpr -> Conversion .)
    LEFT_BRACKET    reduce using rule 124 (PrimaryExpr -> Conversion .)
    LEFT_PARANTHESIS reduce using rule 124 (PrimaryExpr -> Conversion .)
    LOG_OR          reduce using rule 124 (PrimaryExpr -> Conversion .)
    LOG_AND         reduce using rule 124 (PrimaryExpr -> Conversion .)
    EQ              reduce using rule 124 (PrimaryExpr -> Conversion .)
    NEQ             reduce using rule 124 (PrimaryExpr -> Conversion .)
    LT              reduce using rule 124 (PrimaryExpr -> Conversion .)
    GT              reduce using rule 124 (PrimaryExpr -> Conversion .)
    LEQ             reduce using rule 124 (PrimaryExpr -> Conversion .)
    GEQ             reduce using rule 124 (PrimaryExpr -> Conversion .)
    OR              reduce using rule 124 (PrimaryExpr -> Conversion .)
    XOR             reduce using rule 124 (PrimaryExpr -> Conversion .)
    DIV             reduce using rule 124 (PrimaryExpr -> Conversion .)
    MOD             reduce using rule 124 (PrimaryExpr -> Conversion .)
    LSHIFT          reduce using rule 124 (PrimaryExpr -> Conversion .)
    RSHIFT          reduce using rule 124 (PrimaryExpr -> Conversion .)
    ADD             reduce using rule 124 (PrimaryExpr -> Conversion .)
    SUB             reduce using rule 124 (PrimaryExpr -> Conversion .)
    MULT            reduce using rule 124 (PrimaryExpr -> Conversion .)
    AND             reduce using rule 124 (PrimaryExpr -> Conversion .)
    RIGHT_BRACKET   reduce using rule 124 (PrimaryExpr -> Conversion .)
    COMMA           reduce using rule 124 (PrimaryExpr -> Conversion .)
    SEMICOLON       reduce using rule 124 (PrimaryExpr -> Conversion .)
    RIGHT_PARANTHESIS reduce using rule 124 (PrimaryExpr -> Conversion .)
    INC             reduce using rule 124 (PrimaryExpr -> Conversion .)
    DEC             reduce using rule 124 (PrimaryExpr -> Conversion .)
    PLUS_ASSIGN     reduce using rule 124 (PrimaryExpr -> Conversion .)
    MINUS_ASSIGN    reduce using rule 124 (PrimaryExpr -> Conversion .)
    MULT_ASSIGN     reduce using rule 124 (PrimaryExpr -> Conversion .)
    DIV_ASSIGN      reduce using rule 124 (PrimaryExpr -> Conversion .)
    MOD_ASSIGN      reduce using rule 124 (PrimaryExpr -> Conversion .)
    AND_ASSIGN      reduce using rule 124 (PrimaryExpr -> Conversion .)
    OR_ASSIGN       reduce using rule 124 (PrimaryExpr -> Conversion .)
    XOR_ASSIGN      reduce using rule 124 (PrimaryExpr -> Conversion .)
    LSHIFT_ASSIGN   reduce using rule 124 (PrimaryExpr -> Conversion .)
    RSHIFT_ASSIGN   reduce using rule 124 (PrimaryExpr -> Conversion .)
    ASSIGN          reduce using rule 124 (PrimaryExpr -> Conversion .)
    COLON           reduce using rule 124 (PrimaryExpr -> Conversion .)
    LEFT_BRACES     reduce using rule 124 (PrimaryExpr -> Conversion .)


state 123

    (163) UnaryOp -> ADD .

    NOT             reduce using rule 163 (UnaryOp -> ADD .)
    ADD             reduce using rule 163 (UnaryOp -> ADD .)
    SUB             reduce using rule 163 (UnaryOp -> ADD .)
    MULT            reduce using rule 163 (UnaryOp -> ADD .)
    AND             reduce using rule 163 (UnaryOp -> ADD .)
    LEFT_PARANTHESIS reduce using rule 163 (UnaryOp -> ADD .)
    TYPECAST        reduce using rule 163 (UnaryOp -> ADD .)
    IDENTIFIER      reduce using rule 163 (UnaryOp -> ADD .)
    INTEGER         reduce using rule 163 (UnaryOp -> ADD .)
    OCTAL           reduce using rule 163 (UnaryOp -> ADD .)
    HEX             reduce using rule 163 (UnaryOp -> ADD .)
    FLOAT           reduce using rule 163 (UnaryOp -> ADD .)
    IMAGINARY       reduce using rule 163 (UnaryOp -> ADD .)
    RUNE            reduce using rule 163 (UnaryOp -> ADD .)
    STRING          reduce using rule 163 (UnaryOp -> ADD .)


state 124

    (164) UnaryOp -> SUB .

    NOT             reduce using rule 164 (UnaryOp -> SUB .)
    ADD             reduce using rule 164 (UnaryOp -> SUB .)
    SUB             reduce using rule 164 (UnaryOp -> SUB .)
    MULT            reduce using rule 164 (UnaryOp -> SUB .)
    AND             reduce using rule 164 (UnaryOp -> SUB .)
    LEFT_PARANTHESIS reduce using rule 164 (UnaryOp -> SUB .)
    TYPECAST        reduce using rule 164 (UnaryOp -> SUB .)
    IDENTIFIER      reduce using rule 164 (UnaryOp -> SUB .)
    INTEGER         reduce using rule 164 (UnaryOp -> SUB .)
    OCTAL           reduce using rule 164 (UnaryOp -> SUB .)
    HEX             reduce using rule 164 (UnaryOp -> SUB .)
    FLOAT           reduce using rule 164 (UnaryOp -> SUB .)
    IMAGINARY       reduce using rule 164 (UnaryOp -> SUB .)
    RUNE            reduce using rule 164 (UnaryOp -> SUB .)
    STRING          reduce using rule 164 (UnaryOp -> SUB .)


state 125

    (165) UnaryOp -> MULT .

    NOT             reduce using rule 165 (UnaryOp -> MULT .)
    ADD             reduce using rule 165 (UnaryOp -> MULT .)
    SUB             reduce using rule 165 (UnaryOp -> MULT .)
    MULT            reduce using rule 165 (UnaryOp -> MULT .)
    AND             reduce using rule 165 (UnaryOp -> MULT .)
    LEFT_PARANTHESIS reduce using rule 165 (UnaryOp -> MULT .)
    TYPECAST        reduce using rule 165 (UnaryOp -> MULT .)
    IDENTIFIER      reduce using rule 165 (UnaryOp -> MULT .)
    INTEGER         reduce using rule 165 (UnaryOp -> MULT .)
    OCTAL           reduce using rule 165 (UnaryOp -> MULT .)
    HEX             reduce using rule 165 (UnaryOp -> MULT .)
    FLOAT           reduce using rule 165 (UnaryOp -> MULT .)
    IMAGINARY       reduce using rule 165 (UnaryOp -> MULT .)
    RUNE            reduce using rule 165 (UnaryOp -> MULT .)
    STRING          reduce using rule 165 (UnaryOp -> MULT .)


state 126

    (166) UnaryOp -> AND .

    NOT             reduce using rule 166 (UnaryOp -> AND .)
    ADD             reduce using rule 166 (UnaryOp -> AND .)
    SUB             reduce using rule 166 (UnaryOp -> AND .)
    MULT            reduce using rule 166 (UnaryOp -> AND .)
    AND             reduce using rule 166 (UnaryOp -> AND .)
    LEFT_PARANTHESIS reduce using rule 166 (UnaryOp -> AND .)
    TYPECAST        reduce using rule 166 (UnaryOp -> AND .)
    IDENTIFIER      reduce using rule 166 (UnaryOp -> AND .)
    INTEGER         reduce using rule 166 (UnaryOp -> AND .)
    OCTAL           reduce using rule 166 (UnaryOp -> AND .)
    HEX             reduce using rule 166 (UnaryOp -> AND .)
    FLOAT           reduce using rule 166 (UnaryOp -> AND .)
    IMAGINARY       reduce using rule 166 (UnaryOp -> AND .)
    RUNE            reduce using rule 166 (UnaryOp -> AND .)
    STRING          reduce using rule 166 (UnaryOp -> AND .)


state 127

    (91) Operand -> Literal .

    DOT             reduce using rule 91 (Operand -> Literal .)
    LEFT_BRACKET    reduce using rule 91 (Operand -> Literal .)
    LEFT_PARANTHESIS reduce using rule 91 (Operand -> Literal .)
    LOG_OR          reduce using rule 91 (Operand -> Literal .)
    LOG_AND         reduce using rule 91 (Operand -> Literal .)
    EQ              reduce using rule 91 (Operand -> Literal .)
    NEQ             reduce using rule 91 (Operand -> Literal .)
    LT              reduce using rule 91 (Operand -> Literal .)
    GT              reduce using rule 91 (Operand -> Literal .)
    LEQ             reduce using rule 91 (Operand -> Literal .)
    GEQ             reduce using rule 91 (Operand -> Literal .)
    OR              reduce using rule 91 (Operand -> Literal .)
    XOR             reduce using rule 91 (Operand -> Literal .)
    DIV             reduce using rule 91 (Operand -> Literal .)
    MOD             reduce using rule 91 (Operand -> Literal .)
    LSHIFT          reduce using rule 91 (Operand -> Literal .)
    RSHIFT          reduce using rule 91 (Operand -> Literal .)
    ADD             reduce using rule 91 (Operand -> Literal .)
    SUB             reduce using rule 91 (Operand -> Literal .)
    MULT            reduce using rule 91 (Operand -> Literal .)
    AND             reduce using rule 91 (Operand -> Literal .)
    RIGHT_BRACKET   reduce using rule 91 (Operand -> Literal .)
    COMMA           reduce using rule 91 (Operand -> Literal .)
    SEMICOLON       reduce using rule 91 (Operand -> Literal .)
    RIGHT_PARANTHESIS reduce using rule 91 (Operand -> Literal .)
    INC             reduce using rule 91 (Operand -> Literal .)
    DEC             reduce using rule 91 (Operand -> Literal .)
    PLUS_ASSIGN     reduce using rule 91 (Operand -> Literal .)
    MINUS_ASSIGN    reduce using rule 91 (Operand -> Literal .)
    MULT_ASSIGN     reduce using rule 91 (Operand -> Literal .)
    DIV_ASSIGN      reduce using rule 91 (Operand -> Literal .)
    MOD_ASSIGN      reduce using rule 91 (Operand -> Literal .)
    AND_ASSIGN      reduce using rule 91 (Operand -> Literal .)
    OR_ASSIGN       reduce using rule 91 (Operand -> Literal .)
    XOR_ASSIGN      reduce using rule 91 (Operand -> Literal .)
    LSHIFT_ASSIGN   reduce using rule 91 (Operand -> Literal .)
    RSHIFT_ASSIGN   reduce using rule 91 (Operand -> Literal .)
    ASSIGN          reduce using rule 91 (Operand -> Literal .)
    COLON           reduce using rule 91 (Operand -> Literal .)
    LEFT_BRACES     reduce using rule 91 (Operand -> Literal .)


state 128

    (92) Operand -> OperandName .

    DOT             reduce using rule 92 (Operand -> OperandName .)
    LEFT_BRACKET    reduce using rule 92 (Operand -> OperandName .)
    LEFT_PARANTHESIS reduce using rule 92 (Operand -> OperandName .)
    LOG_OR          reduce using rule 92 (Operand -> OperandName .)
    LOG_AND         reduce using rule 92 (Operand -> OperandName .)
    EQ              reduce using rule 92 (Operand -> OperandName .)
    NEQ             reduce using rule 92 (Operand -> OperandName .)
    LT              reduce using rule 92 (Operand -> OperandName .)
    GT              reduce using rule 92 (Operand -> OperandName .)
    LEQ             reduce using rule 92 (Operand -> OperandName .)
    GEQ             reduce using rule 92 (Operand -> OperandName .)
    OR              reduce using rule 92 (Operand -> OperandName .)
    XOR             reduce using rule 92 (Operand -> OperandName .)
    DIV             reduce using rule 92 (Operand -> OperandName .)
    MOD             reduce using rule 92 (Operand -> OperandName .)
    LSHIFT          reduce using rule 92 (Operand -> OperandName .)
    RSHIFT          reduce using rule 92 (Operand -> OperandName .)
    ADD             reduce using rule 92 (Operand -> OperandName .)
    SUB             reduce using rule 92 (Operand -> OperandName .)
    MULT            reduce using rule 92 (Operand -> OperandName .)
    AND             reduce using rule 92 (Operand -> OperandName .)
    RIGHT_BRACKET   reduce using rule 92 (Operand -> OperandName .)
    COMMA           reduce using rule 92 (Operand -> OperandName .)
    SEMICOLON       reduce using rule 92 (Operand -> OperandName .)
    RIGHT_PARANTHESIS reduce using rule 92 (Operand -> OperandName .)
    INC             reduce using rule 92 (Operand -> OperandName .)
    DEC             reduce using rule 92 (Operand -> OperandName .)
    PLUS_ASSIGN     reduce using rule 92 (Operand -> OperandName .)
    MINUS_ASSIGN    reduce using rule 92 (Operand -> OperandName .)
    MULT_ASSIGN     reduce using rule 92 (Operand -> OperandName .)
    DIV_ASSIGN      reduce using rule 92 (Operand -> OperandName .)
    MOD_ASSIGN      reduce using rule 92 (Operand -> OperandName .)
    AND_ASSIGN      reduce using rule 92 (Operand -> OperandName .)
    OR_ASSIGN       reduce using rule 92 (Operand -> OperandName .)
    XOR_ASSIGN      reduce using rule 92 (Operand -> OperandName .)
    LSHIFT_ASSIGN   reduce using rule 92 (Operand -> OperandName .)
    RSHIFT_ASSIGN   reduce using rule 92 (Operand -> OperandName .)
    ASSIGN          reduce using rule 92 (Operand -> OperandName .)
    COLON           reduce using rule 92 (Operand -> OperandName .)
    LEFT_BRACES     reduce using rule 92 (Operand -> OperandName .)


state 129

    (93) Operand -> LEFT_PARANTHESIS . Expression RIGHT_PARANTHESIS
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 196
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 130

    (167) Conversion -> TYPECAST . Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 197
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 131

    (94) Literal -> BasicLit .

    DOT             reduce using rule 94 (Literal -> BasicLit .)
    LEFT_BRACKET    reduce using rule 94 (Literal -> BasicLit .)
    LEFT_PARANTHESIS reduce using rule 94 (Literal -> BasicLit .)
    LOG_OR          reduce using rule 94 (Literal -> BasicLit .)
    LOG_AND         reduce using rule 94 (Literal -> BasicLit .)
    EQ              reduce using rule 94 (Literal -> BasicLit .)
    NEQ             reduce using rule 94 (Literal -> BasicLit .)
    LT              reduce using rule 94 (Literal -> BasicLit .)
    GT              reduce using rule 94 (Literal -> BasicLit .)
    LEQ             reduce using rule 94 (Literal -> BasicLit .)
    GEQ             reduce using rule 94 (Literal -> BasicLit .)
    OR              reduce using rule 94 (Literal -> BasicLit .)
    XOR             reduce using rule 94 (Literal -> BasicLit .)
    DIV             reduce using rule 94 (Literal -> BasicLit .)
    MOD             reduce using rule 94 (Literal -> BasicLit .)
    LSHIFT          reduce using rule 94 (Literal -> BasicLit .)
    RSHIFT          reduce using rule 94 (Literal -> BasicLit .)
    ADD             reduce using rule 94 (Literal -> BasicLit .)
    SUB             reduce using rule 94 (Literal -> BasicLit .)
    MULT            reduce using rule 94 (Literal -> BasicLit .)
    AND             reduce using rule 94 (Literal -> BasicLit .)
    RIGHT_BRACKET   reduce using rule 94 (Literal -> BasicLit .)
    COMMA           reduce using rule 94 (Literal -> BasicLit .)
    SEMICOLON       reduce using rule 94 (Literal -> BasicLit .)
    RIGHT_PARANTHESIS reduce using rule 94 (Literal -> BasicLit .)
    INC             reduce using rule 94 (Literal -> BasicLit .)
    DEC             reduce using rule 94 (Literal -> BasicLit .)
    PLUS_ASSIGN     reduce using rule 94 (Literal -> BasicLit .)
    MINUS_ASSIGN    reduce using rule 94 (Literal -> BasicLit .)
    MULT_ASSIGN     reduce using rule 94 (Literal -> BasicLit .)
    DIV_ASSIGN      reduce using rule 94 (Literal -> BasicLit .)
    MOD_ASSIGN      reduce using rule 94 (Literal -> BasicLit .)
    AND_ASSIGN      reduce using rule 94 (Literal -> BasicLit .)
    OR_ASSIGN       reduce using rule 94 (Literal -> BasicLit .)
    XOR_ASSIGN      reduce using rule 94 (Literal -> BasicLit .)
    LSHIFT_ASSIGN   reduce using rule 94 (Literal -> BasicLit .)
    RSHIFT_ASSIGN   reduce using rule 94 (Literal -> BasicLit .)
    ASSIGN          reduce using rule 94 (Literal -> BasicLit .)
    COLON           reduce using rule 94 (Literal -> BasicLit .)
    LEFT_BRACES     reduce using rule 94 (Literal -> BasicLit .)


state 132

    (102) OperandName -> IDENTIFIER .

    DOT             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 102 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 102 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 102 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 102 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 102 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 102 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 102 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 102 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 102 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 102 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 102 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 102 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 102 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 102 (OperandName -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 102 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 102 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 102 (OperandName -> IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 102 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 102 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 102 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 102 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 102 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 102 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 102 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 102 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 102 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 102 (OperandName -> IDENTIFIER .)
    COLON           reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEFT_BRACES     reduce using rule 102 (OperandName -> IDENTIFIER .)


state 133

    (95) BasicLit -> INTEGER .

    DOT             reduce using rule 95 (BasicLit -> INTEGER .)
    LEFT_BRACKET    reduce using rule 95 (BasicLit -> INTEGER .)
    LEFT_PARANTHESIS reduce using rule 95 (BasicLit -> INTEGER .)
    LOG_OR          reduce using rule 95 (BasicLit -> INTEGER .)
    LOG_AND         reduce using rule 95 (BasicLit -> INTEGER .)
    EQ              reduce using rule 95 (BasicLit -> INTEGER .)
    NEQ             reduce using rule 95 (BasicLit -> INTEGER .)
    LT              reduce using rule 95 (BasicLit -> INTEGER .)
    GT              reduce using rule 95 (BasicLit -> INTEGER .)
    LEQ             reduce using rule 95 (BasicLit -> INTEGER .)
    GEQ             reduce using rule 95 (BasicLit -> INTEGER .)
    OR              reduce using rule 95 (BasicLit -> INTEGER .)
    XOR             reduce using rule 95 (BasicLit -> INTEGER .)
    DIV             reduce using rule 95 (BasicLit -> INTEGER .)
    MOD             reduce using rule 95 (BasicLit -> INTEGER .)
    LSHIFT          reduce using rule 95 (BasicLit -> INTEGER .)
    RSHIFT          reduce using rule 95 (BasicLit -> INTEGER .)
    ADD             reduce using rule 95 (BasicLit -> INTEGER .)
    SUB             reduce using rule 95 (BasicLit -> INTEGER .)
    MULT            reduce using rule 95 (BasicLit -> INTEGER .)
    AND             reduce using rule 95 (BasicLit -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 95 (BasicLit -> INTEGER .)
    COMMA           reduce using rule 95 (BasicLit -> INTEGER .)
    SEMICOLON       reduce using rule 95 (BasicLit -> INTEGER .)
    RIGHT_PARANTHESIS reduce using rule 95 (BasicLit -> INTEGER .)
    INC             reduce using rule 95 (BasicLit -> INTEGER .)
    DEC             reduce using rule 95 (BasicLit -> INTEGER .)
    PLUS_ASSIGN     reduce using rule 95 (BasicLit -> INTEGER .)
    MINUS_ASSIGN    reduce using rule 95 (BasicLit -> INTEGER .)
    MULT_ASSIGN     reduce using rule 95 (BasicLit -> INTEGER .)
    DIV_ASSIGN      reduce using rule 95 (BasicLit -> INTEGER .)
    MOD_ASSIGN      reduce using rule 95 (BasicLit -> INTEGER .)
    AND_ASSIGN      reduce using rule 95 (BasicLit -> INTEGER .)
    OR_ASSIGN       reduce using rule 95 (BasicLit -> INTEGER .)
    XOR_ASSIGN      reduce using rule 95 (BasicLit -> INTEGER .)
    LSHIFT_ASSIGN   reduce using rule 95 (BasicLit -> INTEGER .)
    RSHIFT_ASSIGN   reduce using rule 95 (BasicLit -> INTEGER .)
    ASSIGN          reduce using rule 95 (BasicLit -> INTEGER .)
    COLON           reduce using rule 95 (BasicLit -> INTEGER .)
    LEFT_BRACES     reduce using rule 95 (BasicLit -> INTEGER .)


state 134

    (96) BasicLit -> OCTAL .

    DOT             reduce using rule 96 (BasicLit -> OCTAL .)
    LEFT_BRACKET    reduce using rule 96 (BasicLit -> OCTAL .)
    LEFT_PARANTHESIS reduce using rule 96 (BasicLit -> OCTAL .)
    LOG_OR          reduce using rule 96 (BasicLit -> OCTAL .)
    LOG_AND         reduce using rule 96 (BasicLit -> OCTAL .)
    EQ              reduce using rule 96 (BasicLit -> OCTAL .)
    NEQ             reduce using rule 96 (BasicLit -> OCTAL .)
    LT              reduce using rule 96 (BasicLit -> OCTAL .)
    GT              reduce using rule 96 (BasicLit -> OCTAL .)
    LEQ             reduce using rule 96 (BasicLit -> OCTAL .)
    GEQ             reduce using rule 96 (BasicLit -> OCTAL .)
    OR              reduce using rule 96 (BasicLit -> OCTAL .)
    XOR             reduce using rule 96 (BasicLit -> OCTAL .)
    DIV             reduce using rule 96 (BasicLit -> OCTAL .)
    MOD             reduce using rule 96 (BasicLit -> OCTAL .)
    LSHIFT          reduce using rule 96 (BasicLit -> OCTAL .)
    RSHIFT          reduce using rule 96 (BasicLit -> OCTAL .)
    ADD             reduce using rule 96 (BasicLit -> OCTAL .)
    SUB             reduce using rule 96 (BasicLit -> OCTAL .)
    MULT            reduce using rule 96 (BasicLit -> OCTAL .)
    AND             reduce using rule 96 (BasicLit -> OCTAL .)
    RIGHT_BRACKET   reduce using rule 96 (BasicLit -> OCTAL .)
    COMMA           reduce using rule 96 (BasicLit -> OCTAL .)
    SEMICOLON       reduce using rule 96 (BasicLit -> OCTAL .)
    RIGHT_PARANTHESIS reduce using rule 96 (BasicLit -> OCTAL .)
    INC             reduce using rule 96 (BasicLit -> OCTAL .)
    DEC             reduce using rule 96 (BasicLit -> OCTAL .)
    PLUS_ASSIGN     reduce using rule 96 (BasicLit -> OCTAL .)
    MINUS_ASSIGN    reduce using rule 96 (BasicLit -> OCTAL .)
    MULT_ASSIGN     reduce using rule 96 (BasicLit -> OCTAL .)
    DIV_ASSIGN      reduce using rule 96 (BasicLit -> OCTAL .)
    MOD_ASSIGN      reduce using rule 96 (BasicLit -> OCTAL .)
    AND_ASSIGN      reduce using rule 96 (BasicLit -> OCTAL .)
    OR_ASSIGN       reduce using rule 96 (BasicLit -> OCTAL .)
    XOR_ASSIGN      reduce using rule 96 (BasicLit -> OCTAL .)
    LSHIFT_ASSIGN   reduce using rule 96 (BasicLit -> OCTAL .)
    RSHIFT_ASSIGN   reduce using rule 96 (BasicLit -> OCTAL .)
    ASSIGN          reduce using rule 96 (BasicLit -> OCTAL .)
    COLON           reduce using rule 96 (BasicLit -> OCTAL .)
    LEFT_BRACES     reduce using rule 96 (BasicLit -> OCTAL .)


state 135

    (97) BasicLit -> HEX .

    DOT             reduce using rule 97 (BasicLit -> HEX .)
    LEFT_BRACKET    reduce using rule 97 (BasicLit -> HEX .)
    LEFT_PARANTHESIS reduce using rule 97 (BasicLit -> HEX .)
    LOG_OR          reduce using rule 97 (BasicLit -> HEX .)
    LOG_AND         reduce using rule 97 (BasicLit -> HEX .)
    EQ              reduce using rule 97 (BasicLit -> HEX .)
    NEQ             reduce using rule 97 (BasicLit -> HEX .)
    LT              reduce using rule 97 (BasicLit -> HEX .)
    GT              reduce using rule 97 (BasicLit -> HEX .)
    LEQ             reduce using rule 97 (BasicLit -> HEX .)
    GEQ             reduce using rule 97 (BasicLit -> HEX .)
    OR              reduce using rule 97 (BasicLit -> HEX .)
    XOR             reduce using rule 97 (BasicLit -> HEX .)
    DIV             reduce using rule 97 (BasicLit -> HEX .)
    MOD             reduce using rule 97 (BasicLit -> HEX .)
    LSHIFT          reduce using rule 97 (BasicLit -> HEX .)
    RSHIFT          reduce using rule 97 (BasicLit -> HEX .)
    ADD             reduce using rule 97 (BasicLit -> HEX .)
    SUB             reduce using rule 97 (BasicLit -> HEX .)
    MULT            reduce using rule 97 (BasicLit -> HEX .)
    AND             reduce using rule 97 (BasicLit -> HEX .)
    RIGHT_BRACKET   reduce using rule 97 (BasicLit -> HEX .)
    COMMA           reduce using rule 97 (BasicLit -> HEX .)
    SEMICOLON       reduce using rule 97 (BasicLit -> HEX .)
    RIGHT_PARANTHESIS reduce using rule 97 (BasicLit -> HEX .)
    INC             reduce using rule 97 (BasicLit -> HEX .)
    DEC             reduce using rule 97 (BasicLit -> HEX .)
    PLUS_ASSIGN     reduce using rule 97 (BasicLit -> HEX .)
    MINUS_ASSIGN    reduce using rule 97 (BasicLit -> HEX .)
    MULT_ASSIGN     reduce using rule 97 (BasicLit -> HEX .)
    DIV_ASSIGN      reduce using rule 97 (BasicLit -> HEX .)
    MOD_ASSIGN      reduce using rule 97 (BasicLit -> HEX .)
    AND_ASSIGN      reduce using rule 97 (BasicLit -> HEX .)
    OR_ASSIGN       reduce using rule 97 (BasicLit -> HEX .)
    XOR_ASSIGN      reduce using rule 97 (BasicLit -> HEX .)
    LSHIFT_ASSIGN   reduce using rule 97 (BasicLit -> HEX .)
    RSHIFT_ASSIGN   reduce using rule 97 (BasicLit -> HEX .)
    ASSIGN          reduce using rule 97 (BasicLit -> HEX .)
    COLON           reduce using rule 97 (BasicLit -> HEX .)
    LEFT_BRACES     reduce using rule 97 (BasicLit -> HEX .)


state 136

    (98) BasicLit -> FLOAT .

    DOT             reduce using rule 98 (BasicLit -> FLOAT .)
    LEFT_BRACKET    reduce using rule 98 (BasicLit -> FLOAT .)
    LEFT_PARANTHESIS reduce using rule 98 (BasicLit -> FLOAT .)
    LOG_OR          reduce using rule 98 (BasicLit -> FLOAT .)
    LOG_AND         reduce using rule 98 (BasicLit -> FLOAT .)
    EQ              reduce using rule 98 (BasicLit -> FLOAT .)
    NEQ             reduce using rule 98 (BasicLit -> FLOAT .)
    LT              reduce using rule 98 (BasicLit -> FLOAT .)
    GT              reduce using rule 98 (BasicLit -> FLOAT .)
    LEQ             reduce using rule 98 (BasicLit -> FLOAT .)
    GEQ             reduce using rule 98 (BasicLit -> FLOAT .)
    OR              reduce using rule 98 (BasicLit -> FLOAT .)
    XOR             reduce using rule 98 (BasicLit -> FLOAT .)
    DIV             reduce using rule 98 (BasicLit -> FLOAT .)
    MOD             reduce using rule 98 (BasicLit -> FLOAT .)
    LSHIFT          reduce using rule 98 (BasicLit -> FLOAT .)
    RSHIFT          reduce using rule 98 (BasicLit -> FLOAT .)
    ADD             reduce using rule 98 (BasicLit -> FLOAT .)
    SUB             reduce using rule 98 (BasicLit -> FLOAT .)
    MULT            reduce using rule 98 (BasicLit -> FLOAT .)
    AND             reduce using rule 98 (BasicLit -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 98 (BasicLit -> FLOAT .)
    COMMA           reduce using rule 98 (BasicLit -> FLOAT .)
    SEMICOLON       reduce using rule 98 (BasicLit -> FLOAT .)
    RIGHT_PARANTHESIS reduce using rule 98 (BasicLit -> FLOAT .)
    INC             reduce using rule 98 (BasicLit -> FLOAT .)
    DEC             reduce using rule 98 (BasicLit -> FLOAT .)
    PLUS_ASSIGN     reduce using rule 98 (BasicLit -> FLOAT .)
    MINUS_ASSIGN    reduce using rule 98 (BasicLit -> FLOAT .)
    MULT_ASSIGN     reduce using rule 98 (BasicLit -> FLOAT .)
    DIV_ASSIGN      reduce using rule 98 (BasicLit -> FLOAT .)
    MOD_ASSIGN      reduce using rule 98 (BasicLit -> FLOAT .)
    AND_ASSIGN      reduce using rule 98 (BasicLit -> FLOAT .)
    OR_ASSIGN       reduce using rule 98 (BasicLit -> FLOAT .)
    XOR_ASSIGN      reduce using rule 98 (BasicLit -> FLOAT .)
    LSHIFT_ASSIGN   reduce using rule 98 (BasicLit -> FLOAT .)
    RSHIFT_ASSIGN   reduce using rule 98 (BasicLit -> FLOAT .)
    ASSIGN          reduce using rule 98 (BasicLit -> FLOAT .)
    COLON           reduce using rule 98 (BasicLit -> FLOAT .)
    LEFT_BRACES     reduce using rule 98 (BasicLit -> FLOAT .)


state 137

    (99) BasicLit -> IMAGINARY .

    DOT             reduce using rule 99 (BasicLit -> IMAGINARY .)
    LEFT_BRACKET    reduce using rule 99 (BasicLit -> IMAGINARY .)
    LEFT_PARANTHESIS reduce using rule 99 (BasicLit -> IMAGINARY .)
    LOG_OR          reduce using rule 99 (BasicLit -> IMAGINARY .)
    LOG_AND         reduce using rule 99 (BasicLit -> IMAGINARY .)
    EQ              reduce using rule 99 (BasicLit -> IMAGINARY .)
    NEQ             reduce using rule 99 (BasicLit -> IMAGINARY .)
    LT              reduce using rule 99 (BasicLit -> IMAGINARY .)
    GT              reduce using rule 99 (BasicLit -> IMAGINARY .)
    LEQ             reduce using rule 99 (BasicLit -> IMAGINARY .)
    GEQ             reduce using rule 99 (BasicLit -> IMAGINARY .)
    OR              reduce using rule 99 (BasicLit -> IMAGINARY .)
    XOR             reduce using rule 99 (BasicLit -> IMAGINARY .)
    DIV             reduce using rule 99 (BasicLit -> IMAGINARY .)
    MOD             reduce using rule 99 (BasicLit -> IMAGINARY .)
    LSHIFT          reduce using rule 99 (BasicLit -> IMAGINARY .)
    RSHIFT          reduce using rule 99 (BasicLit -> IMAGINARY .)
    ADD             reduce using rule 99 (BasicLit -> IMAGINARY .)
    SUB             reduce using rule 99 (BasicLit -> IMAGINARY .)
    MULT            reduce using rule 99 (BasicLit -> IMAGINARY .)
    AND             reduce using rule 99 (BasicLit -> IMAGINARY .)
    RIGHT_BRACKET   reduce using rule 99 (BasicLit -> IMAGINARY .)
    COMMA           reduce using rule 99 (BasicLit -> IMAGINARY .)
    SEMICOLON       reduce using rule 99 (BasicLit -> IMAGINARY .)
    RIGHT_PARANTHESIS reduce using rule 99 (BasicLit -> IMAGINARY .)
    INC             reduce using rule 99 (BasicLit -> IMAGINARY .)
    DEC             reduce using rule 99 (BasicLit -> IMAGINARY .)
    PLUS_ASSIGN     reduce using rule 99 (BasicLit -> IMAGINARY .)
    MINUS_ASSIGN    reduce using rule 99 (BasicLit -> IMAGINARY .)
    MULT_ASSIGN     reduce using rule 99 (BasicLit -> IMAGINARY .)
    DIV_ASSIGN      reduce using rule 99 (BasicLit -> IMAGINARY .)
    MOD_ASSIGN      reduce using rule 99 (BasicLit -> IMAGINARY .)
    AND_ASSIGN      reduce using rule 99 (BasicLit -> IMAGINARY .)
    OR_ASSIGN       reduce using rule 99 (BasicLit -> IMAGINARY .)
    XOR_ASSIGN      reduce using rule 99 (BasicLit -> IMAGINARY .)
    LSHIFT_ASSIGN   reduce using rule 99 (BasicLit -> IMAGINARY .)
    RSHIFT_ASSIGN   reduce using rule 99 (BasicLit -> IMAGINARY .)
    ASSIGN          reduce using rule 99 (BasicLit -> IMAGINARY .)
    COLON           reduce using rule 99 (BasicLit -> IMAGINARY .)
    LEFT_BRACES     reduce using rule 99 (BasicLit -> IMAGINARY .)


state 138

    (100) BasicLit -> RUNE .

    DOT             reduce using rule 100 (BasicLit -> RUNE .)
    LEFT_BRACKET    reduce using rule 100 (BasicLit -> RUNE .)
    LEFT_PARANTHESIS reduce using rule 100 (BasicLit -> RUNE .)
    LOG_OR          reduce using rule 100 (BasicLit -> RUNE .)
    LOG_AND         reduce using rule 100 (BasicLit -> RUNE .)
    EQ              reduce using rule 100 (BasicLit -> RUNE .)
    NEQ             reduce using rule 100 (BasicLit -> RUNE .)
    LT              reduce using rule 100 (BasicLit -> RUNE .)
    GT              reduce using rule 100 (BasicLit -> RUNE .)
    LEQ             reduce using rule 100 (BasicLit -> RUNE .)
    GEQ             reduce using rule 100 (BasicLit -> RUNE .)
    OR              reduce using rule 100 (BasicLit -> RUNE .)
    XOR             reduce using rule 100 (BasicLit -> RUNE .)
    DIV             reduce using rule 100 (BasicLit -> RUNE .)
    MOD             reduce using rule 100 (BasicLit -> RUNE .)
    LSHIFT          reduce using rule 100 (BasicLit -> RUNE .)
    RSHIFT          reduce using rule 100 (BasicLit -> RUNE .)
    ADD             reduce using rule 100 (BasicLit -> RUNE .)
    SUB             reduce using rule 100 (BasicLit -> RUNE .)
    MULT            reduce using rule 100 (BasicLit -> RUNE .)
    AND             reduce using rule 100 (BasicLit -> RUNE .)
    RIGHT_BRACKET   reduce using rule 100 (BasicLit -> RUNE .)
    COMMA           reduce using rule 100 (BasicLit -> RUNE .)
    SEMICOLON       reduce using rule 100 (BasicLit -> RUNE .)
    RIGHT_PARANTHESIS reduce using rule 100 (BasicLit -> RUNE .)
    INC             reduce using rule 100 (BasicLit -> RUNE .)
    DEC             reduce using rule 100 (BasicLit -> RUNE .)
    PLUS_ASSIGN     reduce using rule 100 (BasicLit -> RUNE .)
    MINUS_ASSIGN    reduce using rule 100 (BasicLit -> RUNE .)
    MULT_ASSIGN     reduce using rule 100 (BasicLit -> RUNE .)
    DIV_ASSIGN      reduce using rule 100 (BasicLit -> RUNE .)
    MOD_ASSIGN      reduce using rule 100 (BasicLit -> RUNE .)
    AND_ASSIGN      reduce using rule 100 (BasicLit -> RUNE .)
    OR_ASSIGN       reduce using rule 100 (BasicLit -> RUNE .)
    XOR_ASSIGN      reduce using rule 100 (BasicLit -> RUNE .)
    LSHIFT_ASSIGN   reduce using rule 100 (BasicLit -> RUNE .)
    RSHIFT_ASSIGN   reduce using rule 100 (BasicLit -> RUNE .)
    ASSIGN          reduce using rule 100 (BasicLit -> RUNE .)
    COLON           reduce using rule 100 (BasicLit -> RUNE .)
    LEFT_BRACES     reduce using rule 100 (BasicLit -> RUNE .)


state 139

    (101) BasicLit -> STRING .

    DOT             reduce using rule 101 (BasicLit -> STRING .)
    LEFT_BRACKET    reduce using rule 101 (BasicLit -> STRING .)
    LEFT_PARANTHESIS reduce using rule 101 (BasicLit -> STRING .)
    LOG_OR          reduce using rule 101 (BasicLit -> STRING .)
    LOG_AND         reduce using rule 101 (BasicLit -> STRING .)
    EQ              reduce using rule 101 (BasicLit -> STRING .)
    NEQ             reduce using rule 101 (BasicLit -> STRING .)
    LT              reduce using rule 101 (BasicLit -> STRING .)
    GT              reduce using rule 101 (BasicLit -> STRING .)
    LEQ             reduce using rule 101 (BasicLit -> STRING .)
    GEQ             reduce using rule 101 (BasicLit -> STRING .)
    OR              reduce using rule 101 (BasicLit -> STRING .)
    XOR             reduce using rule 101 (BasicLit -> STRING .)
    DIV             reduce using rule 101 (BasicLit -> STRING .)
    MOD             reduce using rule 101 (BasicLit -> STRING .)
    LSHIFT          reduce using rule 101 (BasicLit -> STRING .)
    RSHIFT          reduce using rule 101 (BasicLit -> STRING .)
    ADD             reduce using rule 101 (BasicLit -> STRING .)
    SUB             reduce using rule 101 (BasicLit -> STRING .)
    MULT            reduce using rule 101 (BasicLit -> STRING .)
    AND             reduce using rule 101 (BasicLit -> STRING .)
    RIGHT_BRACKET   reduce using rule 101 (BasicLit -> STRING .)
    COMMA           reduce using rule 101 (BasicLit -> STRING .)
    SEMICOLON       reduce using rule 101 (BasicLit -> STRING .)
    RIGHT_PARANTHESIS reduce using rule 101 (BasicLit -> STRING .)
    INC             reduce using rule 101 (BasicLit -> STRING .)
    DEC             reduce using rule 101 (BasicLit -> STRING .)
    PLUS_ASSIGN     reduce using rule 101 (BasicLit -> STRING .)
    MINUS_ASSIGN    reduce using rule 101 (BasicLit -> STRING .)
    MULT_ASSIGN     reduce using rule 101 (BasicLit -> STRING .)
    DIV_ASSIGN      reduce using rule 101 (BasicLit -> STRING .)
    MOD_ASSIGN      reduce using rule 101 (BasicLit -> STRING .)
    AND_ASSIGN      reduce using rule 101 (BasicLit -> STRING .)
    OR_ASSIGN       reduce using rule 101 (BasicLit -> STRING .)
    XOR_ASSIGN      reduce using rule 101 (BasicLit -> STRING .)
    LSHIFT_ASSIGN   reduce using rule 101 (BasicLit -> STRING .)
    RSHIFT_ASSIGN   reduce using rule 101 (BasicLit -> STRING .)
    ASSIGN          reduce using rule 101 (BasicLit -> STRING .)
    COLON           reduce using rule 101 (BasicLit -> STRING .)
    LEFT_BRACES     reduce using rule 101 (BasicLit -> STRING .)


state 140

    (23) StructType -> STRUCT LEFT_BRACES . FieldDeclRep RIGHT_BRACES
    (24) FieldDeclRep -> . FieldDeclRep FieldDecl SEMICOLON
    (25) FieldDeclRep -> . epsilon
    (265) epsilon -> .

    RIGHT_BRACES    reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)

    FieldDeclRep                   shift and go to state 198
    epsilon                        shift and go to state 199

state 141

    (30) PointerType -> MULT BaseType .

    ASSIGN          reduce using rule 30 (PointerType -> MULT BaseType .)
    SEMICOLON       reduce using rule 30 (PointerType -> MULT BaseType .)
    LEFT_BRACES     reduce using rule 30 (PointerType -> MULT BaseType .)
    RIGHT_PARANTHESIS reduce using rule 30 (PointerType -> MULT BaseType .)
    COMMA           reduce using rule 30 (PointerType -> MULT BaseType .)
    LEFT_PARANTHESIS reduce using rule 30 (PointerType -> MULT BaseType .)
    STRING          reduce using rule 30 (PointerType -> MULT BaseType .)
    COLON           reduce using rule 30 (PointerType -> MULT BaseType .)


state 142

    (31) BaseType -> Type .

    ASSIGN          reduce using rule 31 (BaseType -> Type .)
    SEMICOLON       reduce using rule 31 (BaseType -> Type .)
    LEFT_BRACES     reduce using rule 31 (BaseType -> Type .)
    RIGHT_PARANTHESIS reduce using rule 31 (BaseType -> Type .)
    COMMA           reduce using rule 31 (BaseType -> Type .)
    LEFT_PARANTHESIS reduce using rule 31 (BaseType -> Type .)
    STRING          reduce using rule 31 (BaseType -> Type .)
    COLON           reduce using rule 31 (BaseType -> Type .)


state 143

    (64) IdentifierRep -> IdentifierRep COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 200


state 144

    (70) TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 70 (TypeDecl -> TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS .)


state 145

    (71) TypeSpecRep -> TypeSpecRep TypeSpec . SEMICOLON

    SEMICOLON       shift and go to state 201


state 146

    (75) AliasDecl -> IDENTIFIER ASSIGN Type .

    SEMICOLON       reduce using rule 75 (AliasDecl -> IDENTIFIER ASSIGN Type .)


state 147

    (78) VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS .

    SEMICOLON       reduce using rule 78 (VarDecl -> VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS .)


state 148

    (79) VarSpecRep -> VarSpecRep VarSpec . SEMICOLON

    SEMICOLON       shift and go to state 202


state 149

    (81) VarSpec -> IdentifierList Type ExpressionListOpt .

    SEMICOLON       reduce using rule 81 (VarSpec -> IdentifierList Type ExpressionListOpt .)


state 150

    (83) ExpressionListOpt -> ASSIGN . ExpressionList
    (66) ExpressionList -> . Expression ExpressionRep
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ExpressionList                 shift and go to state 203
    Expression                     shift and go to state 153
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 151

    (84) ExpressionListOpt -> epsilon .

    SEMICOLON       reduce using rule 84 (ExpressionListOpt -> epsilon .)


state 152

    (82) VarSpec -> IdentifierList ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 82 (VarSpec -> IdentifierList ASSIGN ExpressionList .)


state 153

    (66) ExpressionList -> Expression . ExpressionRep
    (140) Expression -> Expression . BinaryOp Expression
    (67) ExpressionRep -> . ExpressionRep COMMA Expression
    (68) ExpressionRep -> . epsilon
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (265) epsilon -> .
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    COMMA           reduce using rule 265 (epsilon -> .)
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    RIGHT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    LEFT_BRACES     reduce using rule 265 (epsilon -> .)
    COLON           reduce using rule 265 (epsilon -> .)
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    ExpressionRep                  shift and go to state 204
    BinaryOp                       shift and go to state 168
    epsilon                        shift and go to state 205
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 154

    (258) ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 258 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    DOT             reduce using rule 258 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 258 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)
    STRING          reduce using rule 258 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON .)


state 155

    (47) Block -> LEFT_BRACES StatementList . RIGHT_BRACES

    RIGHT_BRACES    shift and go to state 206


state 156

    (48) StatementList -> StatementRep .
    (49) StatementRep -> StatementRep . Statement SEMICOLON
    (168) Statement -> . Declaration
    (169) Statement -> . LabeledStmt
    (170) Statement -> . SimpleStmt
    (171) Statement -> . ReturnStmt
    (172) Statement -> . BreakStmt
    (173) Statement -> . ContinueStmt
    (174) Statement -> . GotoStmt
    (175) Statement -> . Block
    (176) Statement -> . IfStmt
    (177) Statement -> . SwitchStmt
    (178) Statement -> . ForStmt
    (51) Declaration -> . ConstDecl
    (52) Declaration -> . TypeDecl
    (53) Declaration -> . VarDecl
    (184) LabeledStmt -> . Label COLON Statement
    (179) SimpleStmt -> . epsilon
    (180) SimpleStmt -> . ExpressionStmt
    (181) SimpleStmt -> . IncDecStmt
    (182) SimpleStmt -> . Assignment
    (183) SimpleStmt -> . ShortVarDecl
    (241) ReturnStmt -> . RETURN ExpressionListPureOpt
    (244) BreakStmt -> . BREAK LabelOpt
    (245) ContinueStmt -> . CONTINUE LabelOpt
    (248) GotoStmt -> . GOTO Label
    (47) Block -> . LEFT_BRACES StatementList RIGHT_BRACES
    (202) IfStmt -> . IF Expression Block ElseOpt
    (208) SwitchStmt -> . ExprSwitchStmt
    (209) SwitchStmt -> . TypeSwitchStmt
    (228) ForStmt -> . FOR ConditionBlockOpt Block
    (56) ConstDecl -> . CONST ConstSpec
    (57) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (69) TypeDecl -> . TYPE TypeSpec
    (70) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (77) VarDecl -> . VAR VarSpec
    (78) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (185) Label -> . IDENTIFIER
    (265) epsilon -> .
    (186) ExpressionStmt -> . Expression
    (187) IncDecStmt -> . Expression INC
    (188) IncDecStmt -> . Expression DEC
    (189) Assignment -> . ExpressionList assign_op ExpressionList
    (85) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (210) ExprSwitchStmt -> . SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (216) TypeSwitchStmt -> . SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (66) ExpressionList -> . Expression ExpressionRep
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    RIGHT_BRACES    reduce using rule 48 (StatementList -> StatementRep .)
    CASE            reduce using rule 48 (StatementList -> StatementRep .)
    DEFAULT         reduce using rule 48 (StatementList -> StatementRep .)
    RETURN          shift and go to state 225
    BREAK           shift and go to state 226
    CONTINUE        shift and go to state 227
    GOTO            shift and go to state 228
    LEFT_BRACES     shift and go to state 94
    IF              shift and go to state 229
    FOR             shift and go to state 233
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23
    IDENTIFIER      shift and go to state 234
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    SWITCH          shift and go to state 236
    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Statement                      shift and go to state 207
    Declaration                    shift and go to state 208
    LabeledStmt                    shift and go to state 209
    SimpleStmt                     shift and go to state 210
    ReturnStmt                     shift and go to state 211
    BreakStmt                      shift and go to state 212
    ContinueStmt                   shift and go to state 213
    GotoStmt                       shift and go to state 214
    Block                          shift and go to state 215
    IfStmt                         shift and go to state 216
    SwitchStmt                     shift and go to state 217
    ForStmt                        shift and go to state 218
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19
    Label                          shift and go to state 219
    epsilon                        shift and go to state 220
    ExpressionStmt                 shift and go to state 221
    IncDecStmt                     shift and go to state 222
    Assignment                     shift and go to state 223
    ShortVarDecl                   shift and go to state 224
    Expression                     shift and go to state 230
    ExprSwitchStmt                 shift and go to state 231
    TypeSwitchStmt                 shift and go to state 232
    ExpressionList                 shift and go to state 235
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 157

    (50) StatementRep -> epsilon .

    RETURN          reduce using rule 50 (StatementRep -> epsilon .)
    BREAK           reduce using rule 50 (StatementRep -> epsilon .)
    CONTINUE        reduce using rule 50 (StatementRep -> epsilon .)
    GOTO            reduce using rule 50 (StatementRep -> epsilon .)
    LEFT_BRACES     reduce using rule 50 (StatementRep -> epsilon .)
    IF              reduce using rule 50 (StatementRep -> epsilon .)
    FOR             reduce using rule 50 (StatementRep -> epsilon .)
    CONST           reduce using rule 50 (StatementRep -> epsilon .)
    TYPE            reduce using rule 50 (StatementRep -> epsilon .)
    VAR             reduce using rule 50 (StatementRep -> epsilon .)
    IDENTIFIER      reduce using rule 50 (StatementRep -> epsilon .)
    SWITCH          reduce using rule 50 (StatementRep -> epsilon .)
    NOT             reduce using rule 50 (StatementRep -> epsilon .)
    ADD             reduce using rule 50 (StatementRep -> epsilon .)
    SUB             reduce using rule 50 (StatementRep -> epsilon .)
    MULT            reduce using rule 50 (StatementRep -> epsilon .)
    AND             reduce using rule 50 (StatementRep -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 50 (StatementRep -> epsilon .)
    TYPECAST        reduce using rule 50 (StatementRep -> epsilon .)
    INTEGER         reduce using rule 50 (StatementRep -> epsilon .)
    OCTAL           reduce using rule 50 (StatementRep -> epsilon .)
    HEX             reduce using rule 50 (StatementRep -> epsilon .)
    FLOAT           reduce using rule 50 (StatementRep -> epsilon .)
    IMAGINARY       reduce using rule 50 (StatementRep -> epsilon .)
    RUNE            reduce using rule 50 (StatementRep -> epsilon .)
    STRING          reduce using rule 50 (StatementRep -> epsilon .)
    SEMICOLON       reduce using rule 50 (StatementRep -> epsilon .)
    RIGHT_BRACES    reduce using rule 50 (StatementRep -> epsilon .)
    CASE            reduce using rule 50 (StatementRep -> epsilon .)
    DEFAULT         reduce using rule 50 (StatementRep -> epsilon .)


state 158

    (4) Type -> LEFT_PARANTHESIS Type . RIGHT_PARANTHESIS
    (40) ParametersList -> Type .
    (46) ParameterDecl -> Type .

  ! shift/reduce conflict for RIGHT_PARANTHESIS resolved as shift
    RIGHT_PARANTHESIS shift and go to state 165
    COMMA           reduce using rule 46 (ParameterDecl -> Type .)

  ! RIGHT_PARANTHESIS [ reduce using rule 40 (ParametersList -> Type .) ]


state 159

    (37) Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .

    LEFT_PARANTHESIS reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    INT_T           reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    FLOAT_T         reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    UINT_T          reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    COMPLEX_T       reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    RUNE_T          reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    BOOL_T          reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    STRING_T        reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    TYPE            reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    IDENTIFIER      reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    LEFT_BRACKET    reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    STRUCT          reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    MULT            reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 37 (Parameters -> LEFT_PARANTHESIS ParameterListOpt RIGHT_PARANTHESIS .)


state 160

    (41) ParametersList -> IdentifierList Type .
    (45) ParameterDecl -> IdentifierList Type .

    RIGHT_PARANTHESIS reduce using rule 41 (ParametersList -> IdentifierList Type .)
    COMMA           reduce using rule 45 (ParameterDecl -> IdentifierList Type .)


state 161

    (43) ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA . ParameterDecl
    (45) ParameterDecl -> . IdentifierList Type
    (46) ParameterDecl -> . Type
    (63) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    IDENTIFIER      shift and go to state 107
    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    ParameterDecl                  shift and go to state 237
    IdentifierList                 shift and go to state 238
    Type                           shift and go to state 239
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 162

    (44) ParameterDeclCommaRep -> ParameterDecl COMMA . ParameterDecl
    (45) ParameterDecl -> . IdentifierList Type
    (46) ParameterDecl -> . Type
    (63) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    IDENTIFIER      shift and go to state 107
    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    ParameterDecl                  shift and go to state 240
    IdentifierList                 shift and go to state 238
    Type                           shift and go to state 239
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 163

    (58) ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 58 (ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 58 (ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON .)


state 164

    (61) TypeExprListOpt -> TypeOpt ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 61 (TypeExprListOpt -> TypeOpt ASSIGN ExpressionList .)


state 165

    (4) Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .

    ASSIGN          reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    STRING          reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COLON           reduce using rule 4 (Type -> LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)


state 166

    (103) QualifiedIdent -> IDENTIFIER DOT TypeName .

    ASSIGN          reduce using rule 103 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    SEMICOLON       reduce using rule 103 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    LEFT_BRACES     reduce using rule 103 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    RIGHT_PARANTHESIS reduce using rule 103 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    COMMA           reduce using rule 103 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    LEFT_PARANTHESIS reduce using rule 103 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    STRING          reduce using rule 103 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    COLON           reduce using rule 103 (QualifiedIdent -> IDENTIFIER DOT TypeName .)


state 167

    (20) ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET . ElementType
    (22) ElementType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    ElementType                    shift and go to state 241
    Type                           shift and go to state 242
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 168

    (140) Expression -> Expression BinaryOp . Expression
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 243
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 169

    (146) BinaryOp -> LOG_OR .

    NOT             reduce using rule 146 (BinaryOp -> LOG_OR .)
    ADD             reduce using rule 146 (BinaryOp -> LOG_OR .)
    SUB             reduce using rule 146 (BinaryOp -> LOG_OR .)
    MULT            reduce using rule 146 (BinaryOp -> LOG_OR .)
    AND             reduce using rule 146 (BinaryOp -> LOG_OR .)
    LEFT_PARANTHESIS reduce using rule 146 (BinaryOp -> LOG_OR .)
    TYPECAST        reduce using rule 146 (BinaryOp -> LOG_OR .)
    IDENTIFIER      reduce using rule 146 (BinaryOp -> LOG_OR .)
    INTEGER         reduce using rule 146 (BinaryOp -> LOG_OR .)
    OCTAL           reduce using rule 146 (BinaryOp -> LOG_OR .)
    HEX             reduce using rule 146 (BinaryOp -> LOG_OR .)
    FLOAT           reduce using rule 146 (BinaryOp -> LOG_OR .)
    IMAGINARY       reduce using rule 146 (BinaryOp -> LOG_OR .)
    RUNE            reduce using rule 146 (BinaryOp -> LOG_OR .)
    STRING          reduce using rule 146 (BinaryOp -> LOG_OR .)


state 170

    (147) BinaryOp -> LOG_AND .

    NOT             reduce using rule 147 (BinaryOp -> LOG_AND .)
    ADD             reduce using rule 147 (BinaryOp -> LOG_AND .)
    SUB             reduce using rule 147 (BinaryOp -> LOG_AND .)
    MULT            reduce using rule 147 (BinaryOp -> LOG_AND .)
    AND             reduce using rule 147 (BinaryOp -> LOG_AND .)
    LEFT_PARANTHESIS reduce using rule 147 (BinaryOp -> LOG_AND .)
    TYPECAST        reduce using rule 147 (BinaryOp -> LOG_AND .)
    IDENTIFIER      reduce using rule 147 (BinaryOp -> LOG_AND .)
    INTEGER         reduce using rule 147 (BinaryOp -> LOG_AND .)
    OCTAL           reduce using rule 147 (BinaryOp -> LOG_AND .)
    HEX             reduce using rule 147 (BinaryOp -> LOG_AND .)
    FLOAT           reduce using rule 147 (BinaryOp -> LOG_AND .)
    IMAGINARY       reduce using rule 147 (BinaryOp -> LOG_AND .)
    RUNE            reduce using rule 147 (BinaryOp -> LOG_AND .)
    STRING          reduce using rule 147 (BinaryOp -> LOG_AND .)


state 171

    (148) BinaryOp -> RelOp .

    NOT             reduce using rule 148 (BinaryOp -> RelOp .)
    ADD             reduce using rule 148 (BinaryOp -> RelOp .)
    SUB             reduce using rule 148 (BinaryOp -> RelOp .)
    MULT            reduce using rule 148 (BinaryOp -> RelOp .)
    AND             reduce using rule 148 (BinaryOp -> RelOp .)
    LEFT_PARANTHESIS reduce using rule 148 (BinaryOp -> RelOp .)
    TYPECAST        reduce using rule 148 (BinaryOp -> RelOp .)
    IDENTIFIER      reduce using rule 148 (BinaryOp -> RelOp .)
    INTEGER         reduce using rule 148 (BinaryOp -> RelOp .)
    OCTAL           reduce using rule 148 (BinaryOp -> RelOp .)
    HEX             reduce using rule 148 (BinaryOp -> RelOp .)
    FLOAT           reduce using rule 148 (BinaryOp -> RelOp .)
    IMAGINARY       reduce using rule 148 (BinaryOp -> RelOp .)
    RUNE            reduce using rule 148 (BinaryOp -> RelOp .)
    STRING          reduce using rule 148 (BinaryOp -> RelOp .)


state 172

    (149) BinaryOp -> AddMulOp .

    NOT             reduce using rule 149 (BinaryOp -> AddMulOp .)
    ADD             reduce using rule 149 (BinaryOp -> AddMulOp .)
    SUB             reduce using rule 149 (BinaryOp -> AddMulOp .)
    MULT            reduce using rule 149 (BinaryOp -> AddMulOp .)
    AND             reduce using rule 149 (BinaryOp -> AddMulOp .)
    LEFT_PARANTHESIS reduce using rule 149 (BinaryOp -> AddMulOp .)
    TYPECAST        reduce using rule 149 (BinaryOp -> AddMulOp .)
    IDENTIFIER      reduce using rule 149 (BinaryOp -> AddMulOp .)
    INTEGER         reduce using rule 149 (BinaryOp -> AddMulOp .)
    OCTAL           reduce using rule 149 (BinaryOp -> AddMulOp .)
    HEX             reduce using rule 149 (BinaryOp -> AddMulOp .)
    FLOAT           reduce using rule 149 (BinaryOp -> AddMulOp .)
    IMAGINARY       reduce using rule 149 (BinaryOp -> AddMulOp .)
    RUNE            reduce using rule 149 (BinaryOp -> AddMulOp .)
    STRING          reduce using rule 149 (BinaryOp -> AddMulOp .)


state 173

    (150) RelOp -> EQ .

    NOT             reduce using rule 150 (RelOp -> EQ .)
    ADD             reduce using rule 150 (RelOp -> EQ .)
    SUB             reduce using rule 150 (RelOp -> EQ .)
    MULT            reduce using rule 150 (RelOp -> EQ .)
    AND             reduce using rule 150 (RelOp -> EQ .)
    LEFT_PARANTHESIS reduce using rule 150 (RelOp -> EQ .)
    TYPECAST        reduce using rule 150 (RelOp -> EQ .)
    IDENTIFIER      reduce using rule 150 (RelOp -> EQ .)
    INTEGER         reduce using rule 150 (RelOp -> EQ .)
    OCTAL           reduce using rule 150 (RelOp -> EQ .)
    HEX             reduce using rule 150 (RelOp -> EQ .)
    FLOAT           reduce using rule 150 (RelOp -> EQ .)
    IMAGINARY       reduce using rule 150 (RelOp -> EQ .)
    RUNE            reduce using rule 150 (RelOp -> EQ .)
    STRING          reduce using rule 150 (RelOp -> EQ .)


state 174

    (151) RelOp -> NEQ .

    NOT             reduce using rule 151 (RelOp -> NEQ .)
    ADD             reduce using rule 151 (RelOp -> NEQ .)
    SUB             reduce using rule 151 (RelOp -> NEQ .)
    MULT            reduce using rule 151 (RelOp -> NEQ .)
    AND             reduce using rule 151 (RelOp -> NEQ .)
    LEFT_PARANTHESIS reduce using rule 151 (RelOp -> NEQ .)
    TYPECAST        reduce using rule 151 (RelOp -> NEQ .)
    IDENTIFIER      reduce using rule 151 (RelOp -> NEQ .)
    INTEGER         reduce using rule 151 (RelOp -> NEQ .)
    OCTAL           reduce using rule 151 (RelOp -> NEQ .)
    HEX             reduce using rule 151 (RelOp -> NEQ .)
    FLOAT           reduce using rule 151 (RelOp -> NEQ .)
    IMAGINARY       reduce using rule 151 (RelOp -> NEQ .)
    RUNE            reduce using rule 151 (RelOp -> NEQ .)
    STRING          reduce using rule 151 (RelOp -> NEQ .)


state 175

    (152) RelOp -> LT .

    NOT             reduce using rule 152 (RelOp -> LT .)
    ADD             reduce using rule 152 (RelOp -> LT .)
    SUB             reduce using rule 152 (RelOp -> LT .)
    MULT            reduce using rule 152 (RelOp -> LT .)
    AND             reduce using rule 152 (RelOp -> LT .)
    LEFT_PARANTHESIS reduce using rule 152 (RelOp -> LT .)
    TYPECAST        reduce using rule 152 (RelOp -> LT .)
    IDENTIFIER      reduce using rule 152 (RelOp -> LT .)
    INTEGER         reduce using rule 152 (RelOp -> LT .)
    OCTAL           reduce using rule 152 (RelOp -> LT .)
    HEX             reduce using rule 152 (RelOp -> LT .)
    FLOAT           reduce using rule 152 (RelOp -> LT .)
    IMAGINARY       reduce using rule 152 (RelOp -> LT .)
    RUNE            reduce using rule 152 (RelOp -> LT .)
    STRING          reduce using rule 152 (RelOp -> LT .)


state 176

    (153) RelOp -> GT .

    NOT             reduce using rule 153 (RelOp -> GT .)
    ADD             reduce using rule 153 (RelOp -> GT .)
    SUB             reduce using rule 153 (RelOp -> GT .)
    MULT            reduce using rule 153 (RelOp -> GT .)
    AND             reduce using rule 153 (RelOp -> GT .)
    LEFT_PARANTHESIS reduce using rule 153 (RelOp -> GT .)
    TYPECAST        reduce using rule 153 (RelOp -> GT .)
    IDENTIFIER      reduce using rule 153 (RelOp -> GT .)
    INTEGER         reduce using rule 153 (RelOp -> GT .)
    OCTAL           reduce using rule 153 (RelOp -> GT .)
    HEX             reduce using rule 153 (RelOp -> GT .)
    FLOAT           reduce using rule 153 (RelOp -> GT .)
    IMAGINARY       reduce using rule 153 (RelOp -> GT .)
    RUNE            reduce using rule 153 (RelOp -> GT .)
    STRING          reduce using rule 153 (RelOp -> GT .)


state 177

    (154) RelOp -> LEQ .

    NOT             reduce using rule 154 (RelOp -> LEQ .)
    ADD             reduce using rule 154 (RelOp -> LEQ .)
    SUB             reduce using rule 154 (RelOp -> LEQ .)
    MULT            reduce using rule 154 (RelOp -> LEQ .)
    AND             reduce using rule 154 (RelOp -> LEQ .)
    LEFT_PARANTHESIS reduce using rule 154 (RelOp -> LEQ .)
    TYPECAST        reduce using rule 154 (RelOp -> LEQ .)
    IDENTIFIER      reduce using rule 154 (RelOp -> LEQ .)
    INTEGER         reduce using rule 154 (RelOp -> LEQ .)
    OCTAL           reduce using rule 154 (RelOp -> LEQ .)
    HEX             reduce using rule 154 (RelOp -> LEQ .)
    FLOAT           reduce using rule 154 (RelOp -> LEQ .)
    IMAGINARY       reduce using rule 154 (RelOp -> LEQ .)
    RUNE            reduce using rule 154 (RelOp -> LEQ .)
    STRING          reduce using rule 154 (RelOp -> LEQ .)


state 178

    (155) RelOp -> GEQ .

    NOT             reduce using rule 155 (RelOp -> GEQ .)
    ADD             reduce using rule 155 (RelOp -> GEQ .)
    SUB             reduce using rule 155 (RelOp -> GEQ .)
    MULT            reduce using rule 155 (RelOp -> GEQ .)
    AND             reduce using rule 155 (RelOp -> GEQ .)
    LEFT_PARANTHESIS reduce using rule 155 (RelOp -> GEQ .)
    TYPECAST        reduce using rule 155 (RelOp -> GEQ .)
    IDENTIFIER      reduce using rule 155 (RelOp -> GEQ .)
    INTEGER         reduce using rule 155 (RelOp -> GEQ .)
    OCTAL           reduce using rule 155 (RelOp -> GEQ .)
    HEX             reduce using rule 155 (RelOp -> GEQ .)
    FLOAT           reduce using rule 155 (RelOp -> GEQ .)
    IMAGINARY       reduce using rule 155 (RelOp -> GEQ .)
    RUNE            reduce using rule 155 (RelOp -> GEQ .)
    STRING          reduce using rule 155 (RelOp -> GEQ .)


state 179

    (156) AddMulOp -> UnaryOp .

    NOT             reduce using rule 156 (AddMulOp -> UnaryOp .)
    ADD             reduce using rule 156 (AddMulOp -> UnaryOp .)
    SUB             reduce using rule 156 (AddMulOp -> UnaryOp .)
    MULT            reduce using rule 156 (AddMulOp -> UnaryOp .)
    AND             reduce using rule 156 (AddMulOp -> UnaryOp .)
    LEFT_PARANTHESIS reduce using rule 156 (AddMulOp -> UnaryOp .)
    TYPECAST        reduce using rule 156 (AddMulOp -> UnaryOp .)
    IDENTIFIER      reduce using rule 156 (AddMulOp -> UnaryOp .)
    INTEGER         reduce using rule 156 (AddMulOp -> UnaryOp .)
    OCTAL           reduce using rule 156 (AddMulOp -> UnaryOp .)
    HEX             reduce using rule 156 (AddMulOp -> UnaryOp .)
    FLOAT           reduce using rule 156 (AddMulOp -> UnaryOp .)
    IMAGINARY       reduce using rule 156 (AddMulOp -> UnaryOp .)
    RUNE            reduce using rule 156 (AddMulOp -> UnaryOp .)
    STRING          reduce using rule 156 (AddMulOp -> UnaryOp .)


state 180

    (157) AddMulOp -> OR .

    NOT             reduce using rule 157 (AddMulOp -> OR .)
    ADD             reduce using rule 157 (AddMulOp -> OR .)
    SUB             reduce using rule 157 (AddMulOp -> OR .)
    MULT            reduce using rule 157 (AddMulOp -> OR .)
    AND             reduce using rule 157 (AddMulOp -> OR .)
    LEFT_PARANTHESIS reduce using rule 157 (AddMulOp -> OR .)
    TYPECAST        reduce using rule 157 (AddMulOp -> OR .)
    IDENTIFIER      reduce using rule 157 (AddMulOp -> OR .)
    INTEGER         reduce using rule 157 (AddMulOp -> OR .)
    OCTAL           reduce using rule 157 (AddMulOp -> OR .)
    HEX             reduce using rule 157 (AddMulOp -> OR .)
    FLOAT           reduce using rule 157 (AddMulOp -> OR .)
    IMAGINARY       reduce using rule 157 (AddMulOp -> OR .)
    RUNE            reduce using rule 157 (AddMulOp -> OR .)
    STRING          reduce using rule 157 (AddMulOp -> OR .)


state 181

    (158) AddMulOp -> XOR .

    NOT             reduce using rule 158 (AddMulOp -> XOR .)
    ADD             reduce using rule 158 (AddMulOp -> XOR .)
    SUB             reduce using rule 158 (AddMulOp -> XOR .)
    MULT            reduce using rule 158 (AddMulOp -> XOR .)
    AND             reduce using rule 158 (AddMulOp -> XOR .)
    LEFT_PARANTHESIS reduce using rule 158 (AddMulOp -> XOR .)
    TYPECAST        reduce using rule 158 (AddMulOp -> XOR .)
    IDENTIFIER      reduce using rule 158 (AddMulOp -> XOR .)
    INTEGER         reduce using rule 158 (AddMulOp -> XOR .)
    OCTAL           reduce using rule 158 (AddMulOp -> XOR .)
    HEX             reduce using rule 158 (AddMulOp -> XOR .)
    FLOAT           reduce using rule 158 (AddMulOp -> XOR .)
    IMAGINARY       reduce using rule 158 (AddMulOp -> XOR .)
    RUNE            reduce using rule 158 (AddMulOp -> XOR .)
    STRING          reduce using rule 158 (AddMulOp -> XOR .)


state 182

    (159) AddMulOp -> DIV .

    NOT             reduce using rule 159 (AddMulOp -> DIV .)
    ADD             reduce using rule 159 (AddMulOp -> DIV .)
    SUB             reduce using rule 159 (AddMulOp -> DIV .)
    MULT            reduce using rule 159 (AddMulOp -> DIV .)
    AND             reduce using rule 159 (AddMulOp -> DIV .)
    LEFT_PARANTHESIS reduce using rule 159 (AddMulOp -> DIV .)
    TYPECAST        reduce using rule 159 (AddMulOp -> DIV .)
    IDENTIFIER      reduce using rule 159 (AddMulOp -> DIV .)
    INTEGER         reduce using rule 159 (AddMulOp -> DIV .)
    OCTAL           reduce using rule 159 (AddMulOp -> DIV .)
    HEX             reduce using rule 159 (AddMulOp -> DIV .)
    FLOAT           reduce using rule 159 (AddMulOp -> DIV .)
    IMAGINARY       reduce using rule 159 (AddMulOp -> DIV .)
    RUNE            reduce using rule 159 (AddMulOp -> DIV .)
    STRING          reduce using rule 159 (AddMulOp -> DIV .)


state 183

    (160) AddMulOp -> MOD .

    NOT             reduce using rule 160 (AddMulOp -> MOD .)
    ADD             reduce using rule 160 (AddMulOp -> MOD .)
    SUB             reduce using rule 160 (AddMulOp -> MOD .)
    MULT            reduce using rule 160 (AddMulOp -> MOD .)
    AND             reduce using rule 160 (AddMulOp -> MOD .)
    LEFT_PARANTHESIS reduce using rule 160 (AddMulOp -> MOD .)
    TYPECAST        reduce using rule 160 (AddMulOp -> MOD .)
    IDENTIFIER      reduce using rule 160 (AddMulOp -> MOD .)
    INTEGER         reduce using rule 160 (AddMulOp -> MOD .)
    OCTAL           reduce using rule 160 (AddMulOp -> MOD .)
    HEX             reduce using rule 160 (AddMulOp -> MOD .)
    FLOAT           reduce using rule 160 (AddMulOp -> MOD .)
    IMAGINARY       reduce using rule 160 (AddMulOp -> MOD .)
    RUNE            reduce using rule 160 (AddMulOp -> MOD .)
    STRING          reduce using rule 160 (AddMulOp -> MOD .)


state 184

    (161) AddMulOp -> LSHIFT .

    NOT             reduce using rule 161 (AddMulOp -> LSHIFT .)
    ADD             reduce using rule 161 (AddMulOp -> LSHIFT .)
    SUB             reduce using rule 161 (AddMulOp -> LSHIFT .)
    MULT            reduce using rule 161 (AddMulOp -> LSHIFT .)
    AND             reduce using rule 161 (AddMulOp -> LSHIFT .)
    LEFT_PARANTHESIS reduce using rule 161 (AddMulOp -> LSHIFT .)
    TYPECAST        reduce using rule 161 (AddMulOp -> LSHIFT .)
    IDENTIFIER      reduce using rule 161 (AddMulOp -> LSHIFT .)
    INTEGER         reduce using rule 161 (AddMulOp -> LSHIFT .)
    OCTAL           reduce using rule 161 (AddMulOp -> LSHIFT .)
    HEX             reduce using rule 161 (AddMulOp -> LSHIFT .)
    FLOAT           reduce using rule 161 (AddMulOp -> LSHIFT .)
    IMAGINARY       reduce using rule 161 (AddMulOp -> LSHIFT .)
    RUNE            reduce using rule 161 (AddMulOp -> LSHIFT .)
    STRING          reduce using rule 161 (AddMulOp -> LSHIFT .)


state 185

    (162) AddMulOp -> RSHIFT .

    NOT             reduce using rule 162 (AddMulOp -> RSHIFT .)
    ADD             reduce using rule 162 (AddMulOp -> RSHIFT .)
    SUB             reduce using rule 162 (AddMulOp -> RSHIFT .)
    MULT            reduce using rule 162 (AddMulOp -> RSHIFT .)
    AND             reduce using rule 162 (AddMulOp -> RSHIFT .)
    LEFT_PARANTHESIS reduce using rule 162 (AddMulOp -> RSHIFT .)
    TYPECAST        reduce using rule 162 (AddMulOp -> RSHIFT .)
    IDENTIFIER      reduce using rule 162 (AddMulOp -> RSHIFT .)
    INTEGER         reduce using rule 162 (AddMulOp -> RSHIFT .)
    OCTAL           reduce using rule 162 (AddMulOp -> RSHIFT .)
    HEX             reduce using rule 162 (AddMulOp -> RSHIFT .)
    FLOAT           reduce using rule 162 (AddMulOp -> RSHIFT .)
    IMAGINARY       reduce using rule 162 (AddMulOp -> RSHIFT .)
    RUNE            reduce using rule 162 (AddMulOp -> RSHIFT .)
    STRING          reduce using rule 162 (AddMulOp -> RSHIFT .)


state 186

    (123) PrimaryExpr -> PrimaryExpr Selector .

    DOT             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LEFT_BRACKET    reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LEFT_PARANTHESIS reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LOG_OR          reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LOG_AND         reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    EQ              reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    NEQ             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LT              reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    GT              reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LEQ             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    GEQ             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    OR              reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    XOR             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    DIV             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT          reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT          reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    ADD             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    SUB             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    MULT            reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    AND             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    RIGHT_BRACKET   reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    COMMA           reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    SEMICOLON       reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    RIGHT_PARANTHESIS reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    INC             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    DEC             reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS_ASSIGN     reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS_ASSIGN    reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    MULT_ASSIGN     reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    DIV_ASSIGN      reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD_ASSIGN      reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    AND_ASSIGN      reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    OR_ASSIGN       reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    XOR_ASSIGN      reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT_ASSIGN   reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT_ASSIGN   reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    ASSIGN          reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    COLON           reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)
    LEFT_BRACES     reduce using rule 123 (PrimaryExpr -> PrimaryExpr Selector .)


state 187

    (125) PrimaryExpr -> PrimaryExpr Index .

    DOT             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LEFT_BRACKET    reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LEFT_PARANTHESIS reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LOG_OR          reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LOG_AND         reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    EQ              reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    NEQ             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LT              reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    GT              reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LEQ             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    GEQ             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    OR              reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    XOR             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    DIV             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    MOD             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LSHIFT          reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    RSHIFT          reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    ADD             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    SUB             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    MULT            reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    AND             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    RIGHT_BRACKET   reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    COMMA           reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    SEMICOLON       reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    RIGHT_PARANTHESIS reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    INC             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    DEC             reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    PLUS_ASSIGN     reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    MINUS_ASSIGN    reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    MULT_ASSIGN     reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    DIV_ASSIGN      reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    MOD_ASSIGN      reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    AND_ASSIGN      reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    OR_ASSIGN       reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    XOR_ASSIGN      reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LSHIFT_ASSIGN   reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    RSHIFT_ASSIGN   reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    ASSIGN          reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    COLON           reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)
    LEFT_BRACES     reduce using rule 125 (PrimaryExpr -> PrimaryExpr Index .)


state 188

    (126) PrimaryExpr -> PrimaryExpr Slice .

    DOT             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LEFT_BRACKET    reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LEFT_PARANTHESIS reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LOG_OR          reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LOG_AND         reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    EQ              reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    NEQ             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LT              reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    GT              reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LEQ             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    GEQ             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    OR              reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    XOR             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    DIV             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    MOD             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LSHIFT          reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    RSHIFT          reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    ADD             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    SUB             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    MULT            reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    AND             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    RIGHT_BRACKET   reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    COMMA           reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    SEMICOLON       reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    RIGHT_PARANTHESIS reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    INC             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    DEC             reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    PLUS_ASSIGN     reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    MINUS_ASSIGN    reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    MULT_ASSIGN     reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    DIV_ASSIGN      reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    MOD_ASSIGN      reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    AND_ASSIGN      reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    OR_ASSIGN       reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    XOR_ASSIGN      reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LSHIFT_ASSIGN   reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    RSHIFT_ASSIGN   reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    ASSIGN          reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    COLON           reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)
    LEFT_BRACES     reduce using rule 126 (PrimaryExpr -> PrimaryExpr Slice .)


state 189

    (127) PrimaryExpr -> PrimaryExpr TypeAssertion .

    DOT             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEFT_BRACKET    reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEFT_PARANTHESIS reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LOG_OR          reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LOG_AND         reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    EQ              reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    NEQ             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LT              reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GT              reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEQ             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GEQ             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OR              reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    XOR             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DIV             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MOD             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LSHIFT          reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RSHIFT          reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    ADD             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    SUB             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MULT            reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AND             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RIGHT_BRACKET   reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    COMMA           reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    SEMICOLON       reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RIGHT_PARANTHESIS reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    INC             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DEC             reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    PLUS_ASSIGN     reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MINUS_ASSIGN    reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MULT_ASSIGN     reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DIV_ASSIGN      reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MOD_ASSIGN      reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AND_ASSIGN      reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OR_ASSIGN       reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    XOR_ASSIGN      reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LSHIFT_ASSIGN   reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RSHIFT_ASSIGN   reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    ASSIGN          reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    COLON           reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEFT_BRACES     reduce using rule 127 (PrimaryExpr -> PrimaryExpr TypeAssertion .)


state 190

    (128) PrimaryExpr -> PrimaryExpr Arguments .

    DOT             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LEFT_BRACKET    reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LEFT_PARANTHESIS reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LOG_OR          reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LOG_AND         reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    EQ              reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    NEQ             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LT              reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    GT              reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LEQ             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    GEQ             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR              reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    XOR             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIV             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    MOD             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LSHIFT          reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSHIFT          reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    ADD             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    SUB             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    MULT            reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    AND             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    RIGHT_BRACKET   reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    COMMA           reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    SEMICOLON       reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    RIGHT_PARANTHESIS reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    INC             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    DEC             reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS_ASSIGN     reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS_ASSIGN    reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    MULT_ASSIGN     reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIV_ASSIGN      reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    MOD_ASSIGN      reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    AND_ASSIGN      reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR_ASSIGN       reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    XOR_ASSIGN      reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LSHIFT_ASSIGN   reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSHIFT_ASSIGN   reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    ASSIGN          reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    COLON           reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)
    LEFT_BRACES     reduce using rule 128 (PrimaryExpr -> PrimaryExpr Arguments .)


state 191

    (129) Selector -> DOT . IDENTIFIER
    (133) TypeAssertion -> DOT . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    IDENTIFIER      shift and go to state 244
    LEFT_PARANTHESIS shift and go to state 245


state 192

    (130) Index -> LEFT_BRACKET . Expression RIGHT_BRACKET
    (131) Slice -> LEFT_BRACKET . ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (132) Slice -> LEFT_BRACKET . ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (141) ExpressionOpt -> . Expression
    (142) ExpressionOpt -> . epsilon
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (265) epsilon -> .
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    COLON           reduce using rule 265 (epsilon -> .)
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 246
    ExpressionOpt                  shift and go to state 247
    UnaryExpr                      shift and go to state 117
    epsilon                        shift and go to state 248
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 193

    (134) Arguments -> LEFT_PARANTHESIS . ExpressionListTypeOpt RIGHT_PARANTHESIS
    (135) ExpressionListTypeOpt -> . ExpressionList
    (136) ExpressionListTypeOpt -> . epsilon
    (66) ExpressionList -> . Expression ExpressionRep
    (265) epsilon -> .
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    RIGHT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ExpressionListTypeOpt          shift and go to state 249
    ExpressionList                 shift and go to state 250
    epsilon                        shift and go to state 251
    Expression                     shift and go to state 153
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 194

    (144) UnaryExpr -> UnaryOp UnaryExpr .

    LOG_OR          reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    LOG_AND         reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    EQ              reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    NEQ             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    LT              reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    GT              reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    LEQ             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    GEQ             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR              reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    XOR             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIV             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    LSHIFT          reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSHIFT          reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    ADD             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    SUB             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    MULT            reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    AND             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    COMMA           reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    SEMICOLON       reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    INC             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    DEC             reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    MULT_ASSIGN     reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIV_ASSIGN      reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD_ASSIGN      reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    AND_ASSIGN      reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR_ASSIGN       reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    XOR_ASSIGN      reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    ASSIGN          reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    COLON           reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)
    LEFT_BRACES     reduce using rule 144 (UnaryExpr -> UnaryOp UnaryExpr .)


state 195

    (145) UnaryExpr -> NOT UnaryExpr .

    LOG_OR          reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    LOG_AND         reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    EQ              reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    NEQ             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    LT              reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    GT              reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    LEQ             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    GEQ             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    OR              reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    XOR             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    DIV             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    MOD             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    LSHIFT          reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    RSHIFT          reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    ADD             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    SUB             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    MULT            reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    AND             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    RIGHT_BRACKET   reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    COMMA           reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    SEMICOLON       reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    RIGHT_PARANTHESIS reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    INC             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    DEC             reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    PLUS_ASSIGN     reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    MINUS_ASSIGN    reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    MULT_ASSIGN     reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    DIV_ASSIGN      reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    MOD_ASSIGN      reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    AND_ASSIGN      reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    OR_ASSIGN       reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    XOR_ASSIGN      reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    LSHIFT_ASSIGN   reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    RSHIFT_ASSIGN   reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    ASSIGN          reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    COLON           reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)
    LEFT_BRACES     reduce using rule 145 (UnaryExpr -> NOT UnaryExpr .)


state 196

    (93) Operand -> LEFT_PARANTHESIS Expression . RIGHT_PARANTHESIS
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    RIGHT_PARANTHESIS shift and go to state 252
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 197

    (167) Conversion -> TYPECAST Type . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 253


state 198

    (23) StructType -> STRUCT LEFT_BRACES FieldDeclRep . RIGHT_BRACES
    (24) FieldDeclRep -> FieldDeclRep . FieldDecl SEMICOLON
    (26) FieldDecl -> . IdentifierList Type TagOpt
    (63) IdentifierList -> . IDENTIFIER IdentifierRep

    RIGHT_BRACES    shift and go to state 254
    IDENTIFIER      shift and go to state 37

    FieldDecl                      shift and go to state 255
    IdentifierList                 shift and go to state 256

state 199

    (25) FieldDeclRep -> epsilon .

    RIGHT_BRACES    reduce using rule 25 (FieldDeclRep -> epsilon .)
    IDENTIFIER      reduce using rule 25 (FieldDeclRep -> epsilon .)


state 200

    (64) IdentifierRep -> IdentifierRep COMMA IDENTIFIER .

    COMMA           reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    INT_T           reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    FLOAT_T         reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    UINT_T          reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    COMPLEX_T       reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    RUNE_T          reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    BOOL_T          reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    STRING_T        reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    TYPE            reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    STRUCT          reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    MULT            reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    ASSIGN          reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    SEMICOLON       reduce using rule 64 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)


state 201

    (71) TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 71 (TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 71 (TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON .)


state 202

    (79) VarSpecRep -> VarSpecRep VarSpec SEMICOLON .

    RIGHT_PARANTHESIS reduce using rule 79 (VarSpecRep -> VarSpecRep VarSpec SEMICOLON .)
    IDENTIFIER      reduce using rule 79 (VarSpecRep -> VarSpecRep VarSpec SEMICOLON .)


state 203

    (83) ExpressionListOpt -> ASSIGN ExpressionList .

    SEMICOLON       reduce using rule 83 (ExpressionListOpt -> ASSIGN ExpressionList .)


state 204

    (66) ExpressionList -> Expression ExpressionRep .
    (67) ExpressionRep -> ExpressionRep . COMMA Expression

    SEMICOLON       reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    PLUS_ASSIGN     reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    MINUS_ASSIGN    reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    MULT_ASSIGN     reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    DIV_ASSIGN      reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    MOD_ASSIGN      reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    AND_ASSIGN      reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    OR_ASSIGN       reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    XOR_ASSIGN      reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    LSHIFT_ASSIGN   reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    RSHIFT_ASSIGN   reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    ASSIGN          reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    RIGHT_PARANTHESIS reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    LEFT_BRACES     reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    COLON           reduce using rule 66 (ExpressionList -> Expression ExpressionRep .)
    COMMA           shift and go to state 257


state 205

    (68) ExpressionRep -> epsilon .

    COMMA           reduce using rule 68 (ExpressionRep -> epsilon .)
    SEMICOLON       reduce using rule 68 (ExpressionRep -> epsilon .)
    RIGHT_PARANTHESIS reduce using rule 68 (ExpressionRep -> epsilon .)
    LEFT_BRACES     reduce using rule 68 (ExpressionRep -> epsilon .)
    COLON           reduce using rule 68 (ExpressionRep -> epsilon .)
    PLUS_ASSIGN     reduce using rule 68 (ExpressionRep -> epsilon .)
    MINUS_ASSIGN    reduce using rule 68 (ExpressionRep -> epsilon .)
    MULT_ASSIGN     reduce using rule 68 (ExpressionRep -> epsilon .)
    DIV_ASSIGN      reduce using rule 68 (ExpressionRep -> epsilon .)
    MOD_ASSIGN      reduce using rule 68 (ExpressionRep -> epsilon .)
    AND_ASSIGN      reduce using rule 68 (ExpressionRep -> epsilon .)
    OR_ASSIGN       reduce using rule 68 (ExpressionRep -> epsilon .)
    XOR_ASSIGN      reduce using rule 68 (ExpressionRep -> epsilon .)
    LSHIFT_ASSIGN   reduce using rule 68 (ExpressionRep -> epsilon .)
    RSHIFT_ASSIGN   reduce using rule 68 (ExpressionRep -> epsilon .)
    ASSIGN          reduce using rule 68 (ExpressionRep -> epsilon .)


state 206

    (47) Block -> LEFT_BRACES StatementList RIGHT_BRACES .

    SEMICOLON       reduce using rule 47 (Block -> LEFT_BRACES StatementList RIGHT_BRACES .)
    ELSE            reduce using rule 47 (Block -> LEFT_BRACES StatementList RIGHT_BRACES .)


state 207

    (49) StatementRep -> StatementRep Statement . SEMICOLON

    SEMICOLON       shift and go to state 258


state 208

    (168) Statement -> Declaration .

    SEMICOLON       reduce using rule 168 (Statement -> Declaration .)


state 209

    (169) Statement -> LabeledStmt .

    SEMICOLON       reduce using rule 169 (Statement -> LabeledStmt .)


state 210

    (170) Statement -> SimpleStmt .

    SEMICOLON       reduce using rule 170 (Statement -> SimpleStmt .)


state 211

    (171) Statement -> ReturnStmt .

    SEMICOLON       reduce using rule 171 (Statement -> ReturnStmt .)


state 212

    (172) Statement -> BreakStmt .

    SEMICOLON       reduce using rule 172 (Statement -> BreakStmt .)


state 213

    (173) Statement -> ContinueStmt .

    SEMICOLON       reduce using rule 173 (Statement -> ContinueStmt .)


state 214

    (174) Statement -> GotoStmt .

    SEMICOLON       reduce using rule 174 (Statement -> GotoStmt .)


state 215

    (175) Statement -> Block .

    SEMICOLON       reduce using rule 175 (Statement -> Block .)


state 216

    (176) Statement -> IfStmt .

    SEMICOLON       reduce using rule 176 (Statement -> IfStmt .)


state 217

    (177) Statement -> SwitchStmt .

    SEMICOLON       reduce using rule 177 (Statement -> SwitchStmt .)


state 218

    (178) Statement -> ForStmt .

    SEMICOLON       reduce using rule 178 (Statement -> ForStmt .)


state 219

    (184) LabeledStmt -> Label . COLON Statement

    COLON           shift and go to state 259


state 220

    (179) SimpleStmt -> epsilon .

    SEMICOLON       reduce using rule 179 (SimpleStmt -> epsilon .)
    LEFT_BRACES     reduce using rule 179 (SimpleStmt -> epsilon .)


state 221

    (180) SimpleStmt -> ExpressionStmt .

    SEMICOLON       reduce using rule 180 (SimpleStmt -> ExpressionStmt .)
    LEFT_BRACES     reduce using rule 180 (SimpleStmt -> ExpressionStmt .)


state 222

    (181) SimpleStmt -> IncDecStmt .

    SEMICOLON       reduce using rule 181 (SimpleStmt -> IncDecStmt .)
    LEFT_BRACES     reduce using rule 181 (SimpleStmt -> IncDecStmt .)


state 223

    (182) SimpleStmt -> Assignment .

    SEMICOLON       reduce using rule 182 (SimpleStmt -> Assignment .)
    LEFT_BRACES     reduce using rule 182 (SimpleStmt -> Assignment .)


state 224

    (183) SimpleStmt -> ShortVarDecl .

    SEMICOLON       reduce using rule 183 (SimpleStmt -> ShortVarDecl .)
    LEFT_BRACES     reduce using rule 183 (SimpleStmt -> ShortVarDecl .)


state 225

    (241) ReturnStmt -> RETURN . ExpressionListPureOpt
    (242) ExpressionListPureOpt -> . ExpressionList
    (243) ExpressionListPureOpt -> . epsilon
    (66) ExpressionList -> . Expression ExpressionRep
    (265) epsilon -> .
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    SEMICOLON       reduce using rule 265 (epsilon -> .)
    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ExpressionListPureOpt          shift and go to state 260
    ExpressionList                 shift and go to state 261
    epsilon                        shift and go to state 262
    Expression                     shift and go to state 153
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 226

    (244) BreakStmt -> BREAK . LabelOpt
    (246) LabelOpt -> . Label
    (247) LabelOpt -> . epsilon
    (185) Label -> . IDENTIFIER
    (265) epsilon -> .

    IDENTIFIER      shift and go to state 266
    SEMICOLON       reduce using rule 265 (epsilon -> .)

    LabelOpt                       shift and go to state 263
    Label                          shift and go to state 264
    epsilon                        shift and go to state 265

state 227

    (245) ContinueStmt -> CONTINUE . LabelOpt
    (246) LabelOpt -> . Label
    (247) LabelOpt -> . epsilon
    (185) Label -> . IDENTIFIER
    (265) epsilon -> .

    IDENTIFIER      shift and go to state 266
    SEMICOLON       reduce using rule 265 (epsilon -> .)

    LabelOpt                       shift and go to state 267
    Label                          shift and go to state 264
    epsilon                        shift and go to state 265

state 228

    (248) GotoStmt -> GOTO . Label
    (185) Label -> . IDENTIFIER

    IDENTIFIER      shift and go to state 266

    Label                          shift and go to state 268

state 229

    (202) IfStmt -> IF . Expression Block ElseOpt
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 269
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 230

    (186) ExpressionStmt -> Expression .
    (187) IncDecStmt -> Expression . INC
    (188) IncDecStmt -> Expression . DEC
    (140) Expression -> Expression . BinaryOp Expression
    (66) ExpressionList -> Expression . ExpressionRep
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (67) ExpressionRep -> . ExpressionRep COMMA Expression
    (68) ExpressionRep -> . epsilon
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (265) epsilon -> .
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    SEMICOLON       reduce using rule 186 (ExpressionStmt -> Expression .)
    LEFT_BRACES     reduce using rule 186 (ExpressionStmt -> Expression .)
    INC             shift and go to state 270
    DEC             shift and go to state 271
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    COMMA           reduce using rule 265 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 265 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 265 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 265 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 265 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 265 (epsilon -> .)
    AND_ASSIGN      reduce using rule 265 (epsilon -> .)
    OR_ASSIGN       reduce using rule 265 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 265 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 265 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 265 (epsilon -> .)
    ASSIGN          reduce using rule 265 (epsilon -> .)
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    ExpressionRep                  shift and go to state 204
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    epsilon                        shift and go to state 205
    UnaryOp                        shift and go to state 179

state 231

    (208) SwitchStmt -> ExprSwitchStmt .

    SEMICOLON       reduce using rule 208 (SwitchStmt -> ExprSwitchStmt .)


state 232

    (209) SwitchStmt -> TypeSwitchStmt .

    SEMICOLON       reduce using rule 209 (SwitchStmt -> TypeSwitchStmt .)


state 233

    (228) ForStmt -> FOR . ConditionBlockOpt Block
    (229) ConditionBlockOpt -> . epsilon
    (230) ConditionBlockOpt -> . Condition
    (231) ConditionBlockOpt -> . ForClause
    (232) ConditionBlockOpt -> . RangeClause
    (265) epsilon -> .
    (233) Condition -> . Expression
    (234) ForClause -> . SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt
    (237) RangeClause -> . ExpressionIdentListOpt RANGE Expression
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (179) SimpleStmt -> . epsilon
    (180) SimpleStmt -> . ExpressionStmt
    (181) SimpleStmt -> . IncDecStmt
    (182) SimpleStmt -> . Assignment
    (183) SimpleStmt -> . ShortVarDecl
    (238) ExpressionIdentListOpt -> . epsilon
    (239) ExpressionIdentListOpt -> . ExpressionIdentifier
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (186) ExpressionStmt -> . Expression
    (187) IncDecStmt -> . Expression INC
    (188) IncDecStmt -> . Expression DEC
    (189) Assignment -> . ExpressionList assign_op ExpressionList
    (85) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (240) ExpressionIdentifier -> . ExpressionList ASSIGN
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (66) ExpressionList -> . Expression ExpressionRep
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    LEFT_BRACES     reduce using rule 265 (epsilon -> .)
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    RANGE           reduce using rule 265 (epsilon -> .)
    NOT             shift and go to state 120
    IDENTIFIER      shift and go to state 282
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ConditionBlockOpt              shift and go to state 272
    epsilon                        shift and go to state 273
    Condition                      shift and go to state 274
    ForClause                      shift and go to state 275
    RangeClause                    shift and go to state 276
    Expression                     shift and go to state 277
    SimpleStmt                     shift and go to state 278
    ExpressionIdentListOpt         shift and go to state 279
    UnaryExpr                      shift and go to state 117
    ExpressionStmt                 shift and go to state 221
    IncDecStmt                     shift and go to state 222
    Assignment                     shift and go to state 223
    ShortVarDecl                   shift and go to state 224
    ExpressionIdentifier           shift and go to state 280
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    ExpressionList                 shift and go to state 281
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 234

    (185) Label -> IDENTIFIER .
    (85) ShortVarDecl -> IDENTIFIER . QUICK_ASSIGN Expression
    (102) OperandName -> IDENTIFIER .

    COLON           reduce using rule 185 (Label -> IDENTIFIER .)
    QUICK_ASSIGN    shift and go to state 283
    DOT             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 102 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 102 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 102 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 102 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 102 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 102 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 102 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 102 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 102 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 102 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 102 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 102 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 102 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 102 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 102 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 102 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 102 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 102 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 102 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 102 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 102 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 102 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 102 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 102 (OperandName -> IDENTIFIER .)


state 235

    (189) Assignment -> ExpressionList . assign_op ExpressionList
    (190) assign_op -> . AssignOp
    (191) AssignOp -> . PLUS_ASSIGN
    (192) AssignOp -> . MINUS_ASSIGN
    (193) AssignOp -> . MULT_ASSIGN
    (194) AssignOp -> . DIV_ASSIGN
    (195) AssignOp -> . MOD_ASSIGN
    (196) AssignOp -> . AND_ASSIGN
    (197) AssignOp -> . OR_ASSIGN
    (198) AssignOp -> . XOR_ASSIGN
    (199) AssignOp -> . LSHIFT_ASSIGN
    (200) AssignOp -> . RSHIFT_ASSIGN
    (201) AssignOp -> . ASSIGN

    PLUS_ASSIGN     shift and go to state 286
    MINUS_ASSIGN    shift and go to state 287
    MULT_ASSIGN     shift and go to state 288
    DIV_ASSIGN      shift and go to state 289
    MOD_ASSIGN      shift and go to state 290
    AND_ASSIGN      shift and go to state 291
    OR_ASSIGN       shift and go to state 292
    XOR_ASSIGN      shift and go to state 293
    LSHIFT_ASSIGN   shift and go to state 294
    RSHIFT_ASSIGN   shift and go to state 295
    ASSIGN          shift and go to state 296

    assign_op                      shift and go to state 284
    AssignOp                       shift and go to state 285

state 236

    (210) ExprSwitchStmt -> SWITCH . ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (216) TypeSwitchStmt -> SWITCH . SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (141) ExpressionOpt -> . Expression
    (142) ExpressionOpt -> . epsilon
    (203) SimpleStmtOpt -> . SimpleStmt SEMICOLON
    (204) SimpleStmtOpt -> . epsilon
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (265) epsilon -> .
    (179) SimpleStmt -> . epsilon
    (180) SimpleStmt -> . ExpressionStmt
    (181) SimpleStmt -> . IncDecStmt
    (182) SimpleStmt -> . Assignment
    (183) SimpleStmt -> . ShortVarDecl
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (186) ExpressionStmt -> . Expression
    (187) IncDecStmt -> . Expression INC
    (188) IncDecStmt -> . Expression DEC
    (189) Assignment -> . ExpressionList assign_op ExpressionList
    (85) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (66) ExpressionList -> . Expression ExpressionRep
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LEFT_PARANTHESIS resolved as shift
  ! shift/reduce conflict for TYPECAST resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for OCTAL resolved as shift
  ! shift/reduce conflict for HEX resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IMAGINARY resolved as shift
  ! shift/reduce conflict for RUNE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    LEFT_BRACES     reduce using rule 265 (epsilon -> .)
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    NOT             shift and go to state 120
    IDENTIFIER      shift and go to state 282
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

  ! IDENTIFIER      [ reduce using rule 265 (epsilon -> .) ]
  ! LEFT_PARANTHESIS [ reduce using rule 265 (epsilon -> .) ]
  ! TYPECAST        [ reduce using rule 265 (epsilon -> .) ]
  ! INTEGER         [ reduce using rule 265 (epsilon -> .) ]
  ! OCTAL           [ reduce using rule 265 (epsilon -> .) ]
  ! HEX             [ reduce using rule 265 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 265 (epsilon -> .) ]
  ! IMAGINARY       [ reduce using rule 265 (epsilon -> .) ]
  ! RUNE            [ reduce using rule 265 (epsilon -> .) ]
  ! STRING          [ reduce using rule 265 (epsilon -> .) ]

    ExpressionOpt                  shift and go to state 297
    SimpleStmtOpt                  shift and go to state 298
    Expression                     shift and go to state 299
    epsilon                        shift and go to state 300
    SimpleStmt                     shift and go to state 301
    UnaryExpr                      shift and go to state 117
    ExpressionStmt                 shift and go to state 221
    IncDecStmt                     shift and go to state 222
    Assignment                     shift and go to state 223
    ShortVarDecl                   shift and go to state 224
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    ExpressionList                 shift and go to state 235
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 237

    (43) ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .

    COMMA           reduce using rule 43 (ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .)
    RIGHT_PARANTHESIS reduce using rule 43 (ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .)


state 238

    (45) ParameterDecl -> IdentifierList . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 302
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 239

    (46) ParameterDecl -> Type .

    COMMA           reduce using rule 46 (ParameterDecl -> Type .)
    RIGHT_PARANTHESIS reduce using rule 46 (ParameterDecl -> Type .)


state 240

    (44) ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .

    COMMA           reduce using rule 44 (ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .)
    RIGHT_PARANTHESIS reduce using rule 44 (ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .)


state 241

    (20) ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .

    ASSIGN          reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    SEMICOLON       reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    LEFT_BRACES     reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    RIGHT_PARANTHESIS reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    COMMA           reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    LEFT_PARANTHESIS reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    STRING          reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)
    COLON           reduce using rule 20 (ArrayType -> LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType .)


state 242

    (22) ElementType -> Type .

    ASSIGN          reduce using rule 22 (ElementType -> Type .)
    SEMICOLON       reduce using rule 22 (ElementType -> Type .)
    LEFT_BRACES     reduce using rule 22 (ElementType -> Type .)
    RIGHT_PARANTHESIS reduce using rule 22 (ElementType -> Type .)
    COMMA           reduce using rule 22 (ElementType -> Type .)
    LEFT_PARANTHESIS reduce using rule 22 (ElementType -> Type .)
    STRING          reduce using rule 22 (ElementType -> Type .)
    COLON           reduce using rule 22 (ElementType -> Type .)


state 243

    (140) Expression -> Expression BinaryOp Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

  ! shift/reduce conflict for LOG_OR resolved as shift
  ! shift/reduce conflict for LOG_AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    RIGHT_BRACKET   reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    COMMA           reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    SEMICOLON       reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    RIGHT_PARANTHESIS reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    INC             reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    DEC             reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    PLUS_ASSIGN     reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    MINUS_ASSIGN    reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    MULT_ASSIGN     reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    DIV_ASSIGN      reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    MOD_ASSIGN      reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    AND_ASSIGN      reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    OR_ASSIGN       reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    XOR_ASSIGN      reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    LSHIFT_ASSIGN   reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    RSHIFT_ASSIGN   reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    ASSIGN          reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    COLON           reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    LEFT_BRACES     reduce using rule 140 (Expression -> Expression BinaryOp Expression .)
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

  ! LOG_OR          [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! LOG_AND         [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! EQ              [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! NEQ             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! LT              [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! GT              [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! LEQ             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! GEQ             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! OR              [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! XOR             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! DIV             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! MOD             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! LSHIFT          [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! RSHIFT          [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! ADD             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! SUB             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! MULT            [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]
  ! AND             [ reduce using rule 140 (Expression -> Expression BinaryOp Expression .) ]

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 244

    (129) Selector -> DOT IDENTIFIER .

    DOT             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LOG_OR          reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LOG_AND         reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    EQ              reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    NEQ             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LT              reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    GT              reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LEQ             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    GEQ             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    OR              reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    XOR             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    DIV             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    MOD             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LSHIFT          reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    RSHIFT          reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    ADD             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    SUB             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    MULT            reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    AND             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    COMMA           reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    RIGHT_PARANTHESIS reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    INC             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    DEC             reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    ASSIGN          reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    COLON           reduce using rule 129 (Selector -> DOT IDENTIFIER .)
    LEFT_BRACES     reduce using rule 129 (Selector -> DOT IDENTIFIER .)


state 245

    (133) TypeAssertion -> DOT LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 303
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 246

    (130) Index -> LEFT_BRACKET Expression . RIGHT_BRACKET
    (140) Expression -> Expression . BinaryOp Expression
    (141) ExpressionOpt -> Expression .
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    RIGHT_BRACKET   shift and go to state 304
    COLON           reduce using rule 141 (ExpressionOpt -> Expression .)
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 247

    (131) Slice -> LEFT_BRACKET ExpressionOpt . COLON ExpressionOpt RIGHT_BRACKET
    (132) Slice -> LEFT_BRACKET ExpressionOpt . COLON Expression COLON Expression RIGHT_BRACKET

    COLON           shift and go to state 305


state 248

    (142) ExpressionOpt -> epsilon .

    COLON           reduce using rule 142 (ExpressionOpt -> epsilon .)
    RIGHT_BRACKET   reduce using rule 142 (ExpressionOpt -> epsilon .)


state 249

    (134) Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 306


state 250

    (135) ExpressionListTypeOpt -> ExpressionList .

    RIGHT_PARANTHESIS reduce using rule 135 (ExpressionListTypeOpt -> ExpressionList .)


state 251

    (136) ExpressionListTypeOpt -> epsilon .

    RIGHT_PARANTHESIS reduce using rule 136 (ExpressionListTypeOpt -> epsilon .)


state 252

    (93) Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .

    DOT             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_BRACKET    reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    EQ              reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LT              reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GT              reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR              reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ADD             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SUB             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT            reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    INC             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DEC             reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COLON           reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 93 (Operand -> LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)


state 253

    (167) Conversion -> TYPECAST Type LEFT_PARANTHESIS . Expression RIGHT_PARANTHESIS
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 307
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 254

    (23) StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .

    ASSIGN          reduce using rule 23 (StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .)
    SEMICOLON       reduce using rule 23 (StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .)
    LEFT_BRACES     reduce using rule 23 (StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .)
    RIGHT_PARANTHESIS reduce using rule 23 (StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .)
    COMMA           reduce using rule 23 (StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .)
    LEFT_PARANTHESIS reduce using rule 23 (StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .)
    STRING          reduce using rule 23 (StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .)
    COLON           reduce using rule 23 (StructType -> STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES .)


state 255

    (24) FieldDeclRep -> FieldDeclRep FieldDecl . SEMICOLON

    SEMICOLON       shift and go to state 308


state 256

    (26) FieldDecl -> IdentifierList . Type TagOpt
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 309
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 257

    (67) ExpressionRep -> ExpressionRep COMMA . Expression
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 310
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 258

    (49) StatementRep -> StatementRep Statement SEMICOLON .

    RETURN          reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    BREAK           reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    CONTINUE        reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    GOTO            reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    LEFT_BRACES     reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    IF              reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    FOR             reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    CONST           reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    TYPE            reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    VAR             reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    IDENTIFIER      reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    SWITCH          reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    NOT             reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    ADD             reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    SUB             reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    MULT            reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    AND             reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    LEFT_PARANTHESIS reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    TYPECAST        reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    INTEGER         reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    OCTAL           reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    HEX             reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    FLOAT           reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    IMAGINARY       reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    RUNE            reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    STRING          reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    SEMICOLON       reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    RIGHT_BRACES    reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    CASE            reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)
    DEFAULT         reduce using rule 49 (StatementRep -> StatementRep Statement SEMICOLON .)


state 259

    (184) LabeledStmt -> Label COLON . Statement
    (168) Statement -> . Declaration
    (169) Statement -> . LabeledStmt
    (170) Statement -> . SimpleStmt
    (171) Statement -> . ReturnStmt
    (172) Statement -> . BreakStmt
    (173) Statement -> . ContinueStmt
    (174) Statement -> . GotoStmt
    (175) Statement -> . Block
    (176) Statement -> . IfStmt
    (177) Statement -> . SwitchStmt
    (178) Statement -> . ForStmt
    (51) Declaration -> . ConstDecl
    (52) Declaration -> . TypeDecl
    (53) Declaration -> . VarDecl
    (184) LabeledStmt -> . Label COLON Statement
    (179) SimpleStmt -> . epsilon
    (180) SimpleStmt -> . ExpressionStmt
    (181) SimpleStmt -> . IncDecStmt
    (182) SimpleStmt -> . Assignment
    (183) SimpleStmt -> . ShortVarDecl
    (241) ReturnStmt -> . RETURN ExpressionListPureOpt
    (244) BreakStmt -> . BREAK LabelOpt
    (245) ContinueStmt -> . CONTINUE LabelOpt
    (248) GotoStmt -> . GOTO Label
    (47) Block -> . LEFT_BRACES StatementList RIGHT_BRACES
    (202) IfStmt -> . IF Expression Block ElseOpt
    (208) SwitchStmt -> . ExprSwitchStmt
    (209) SwitchStmt -> . TypeSwitchStmt
    (228) ForStmt -> . FOR ConditionBlockOpt Block
    (56) ConstDecl -> . CONST ConstSpec
    (57) ConstDecl -> . CONST LEFT_PARANTHESIS ConstSpecRep RIGHT_PARANTHESIS
    (69) TypeDecl -> . TYPE TypeSpec
    (70) TypeDecl -> . TYPE LEFT_PARANTHESIS TypeSpecRep RIGHT_PARANTHESIS
    (77) VarDecl -> . VAR VarSpec
    (78) VarDecl -> . VAR LEFT_PARANTHESIS VarSpecRep RIGHT_PARANTHESIS
    (185) Label -> . IDENTIFIER
    (265) epsilon -> .
    (186) ExpressionStmt -> . Expression
    (187) IncDecStmt -> . Expression INC
    (188) IncDecStmt -> . Expression DEC
    (189) Assignment -> . ExpressionList assign_op ExpressionList
    (85) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (210) ExprSwitchStmt -> . SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES
    (216) TypeSwitchStmt -> . SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (66) ExpressionList -> . Expression ExpressionRep
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    RETURN          shift and go to state 225
    BREAK           shift and go to state 226
    CONTINUE        shift and go to state 227
    GOTO            shift and go to state 228
    LEFT_BRACES     shift and go to state 94
    IF              shift and go to state 229
    FOR             shift and go to state 233
    CONST           shift and go to state 21
    TYPE            shift and go to state 22
    VAR             shift and go to state 23
    IDENTIFIER      shift and go to state 234
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    SWITCH          shift and go to state 236
    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Label                          shift and go to state 219
    Statement                      shift and go to state 311
    Declaration                    shift and go to state 208
    LabeledStmt                    shift and go to state 209
    SimpleStmt                     shift and go to state 210
    ReturnStmt                     shift and go to state 211
    BreakStmt                      shift and go to state 212
    ContinueStmt                   shift and go to state 213
    GotoStmt                       shift and go to state 214
    Block                          shift and go to state 215
    IfStmt                         shift and go to state 216
    SwitchStmt                     shift and go to state 217
    ForStmt                        shift and go to state 218
    ConstDecl                      shift and go to state 17
    TypeDecl                       shift and go to state 18
    VarDecl                        shift and go to state 19
    epsilon                        shift and go to state 220
    ExpressionStmt                 shift and go to state 221
    IncDecStmt                     shift and go to state 222
    Assignment                     shift and go to state 223
    ShortVarDecl                   shift and go to state 224
    Expression                     shift and go to state 230
    ExprSwitchStmt                 shift and go to state 231
    TypeSwitchStmt                 shift and go to state 232
    ExpressionList                 shift and go to state 235
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 260

    (241) ReturnStmt -> RETURN ExpressionListPureOpt .

    SEMICOLON       reduce using rule 241 (ReturnStmt -> RETURN ExpressionListPureOpt .)


state 261

    (242) ExpressionListPureOpt -> ExpressionList .

    SEMICOLON       reduce using rule 242 (ExpressionListPureOpt -> ExpressionList .)


state 262

    (243) ExpressionListPureOpt -> epsilon .

    SEMICOLON       reduce using rule 243 (ExpressionListPureOpt -> epsilon .)


state 263

    (244) BreakStmt -> BREAK LabelOpt .

    SEMICOLON       reduce using rule 244 (BreakStmt -> BREAK LabelOpt .)


state 264

    (246) LabelOpt -> Label .

    SEMICOLON       reduce using rule 246 (LabelOpt -> Label .)


state 265

    (247) LabelOpt -> epsilon .

    SEMICOLON       reduce using rule 247 (LabelOpt -> epsilon .)


state 266

    (185) Label -> IDENTIFIER .

    SEMICOLON       reduce using rule 185 (Label -> IDENTIFIER .)


state 267

    (245) ContinueStmt -> CONTINUE LabelOpt .

    SEMICOLON       reduce using rule 245 (ContinueStmt -> CONTINUE LabelOpt .)


state 268

    (248) GotoStmt -> GOTO Label .

    SEMICOLON       reduce using rule 248 (GotoStmt -> GOTO Label .)


state 269

    (202) IfStmt -> IF Expression . Block ElseOpt
    (140) Expression -> Expression . BinaryOp Expression
    (47) Block -> . LEFT_BRACES StatementList RIGHT_BRACES
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    LEFT_BRACES     shift and go to state 94
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    Block                          shift and go to state 312
    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 270

    (187) IncDecStmt -> Expression INC .

    SEMICOLON       reduce using rule 187 (IncDecStmt -> Expression INC .)
    LEFT_BRACES     reduce using rule 187 (IncDecStmt -> Expression INC .)


state 271

    (188) IncDecStmt -> Expression DEC .

    SEMICOLON       reduce using rule 188 (IncDecStmt -> Expression DEC .)
    LEFT_BRACES     reduce using rule 188 (IncDecStmt -> Expression DEC .)


state 272

    (228) ForStmt -> FOR ConditionBlockOpt . Block
    (47) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    LEFT_BRACES     shift and go to state 94

    Block                          shift and go to state 313

state 273

    (229) ConditionBlockOpt -> epsilon .
    (179) SimpleStmt -> epsilon .
    (238) ExpressionIdentListOpt -> epsilon .

    LEFT_BRACES     reduce using rule 229 (ConditionBlockOpt -> epsilon .)
    SEMICOLON       reduce using rule 179 (SimpleStmt -> epsilon .)
    RANGE           reduce using rule 238 (ExpressionIdentListOpt -> epsilon .)


state 274

    (230) ConditionBlockOpt -> Condition .

    LEFT_BRACES     reduce using rule 230 (ConditionBlockOpt -> Condition .)


state 275

    (231) ConditionBlockOpt -> ForClause .

    LEFT_BRACES     reduce using rule 231 (ConditionBlockOpt -> ForClause .)


state 276

    (232) ConditionBlockOpt -> RangeClause .

    LEFT_BRACES     reduce using rule 232 (ConditionBlockOpt -> RangeClause .)


state 277

    (233) Condition -> Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (186) ExpressionStmt -> Expression .
    (187) IncDecStmt -> Expression . INC
    (188) IncDecStmt -> Expression . DEC
    (66) ExpressionList -> Expression . ExpressionRep
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (67) ExpressionRep -> . ExpressionRep COMMA Expression
    (68) ExpressionRep -> . epsilon
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (265) epsilon -> .
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 233 (Condition -> Expression .)
    SEMICOLON       reduce using rule 186 (ExpressionStmt -> Expression .)
    INC             shift and go to state 270
    DEC             shift and go to state 271
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    COMMA           reduce using rule 265 (epsilon -> .)
    ASSIGN          reduce using rule 265 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 265 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 265 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 265 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 265 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 265 (epsilon -> .)
    AND_ASSIGN      reduce using rule 265 (epsilon -> .)
    OR_ASSIGN       reduce using rule 265 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 265 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 265 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 265 (epsilon -> .)
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    ExpressionRep                  shift and go to state 204
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    epsilon                        shift and go to state 205
    UnaryOp                        shift and go to state 179

state 278

    (234) ForClause -> SimpleStmt . SEMICOLON ConditionOpt SEMICOLON SimpleStmt

    SEMICOLON       shift and go to state 314


state 279

    (237) RangeClause -> ExpressionIdentListOpt . RANGE Expression

    RANGE           shift and go to state 315


state 280

    (239) ExpressionIdentListOpt -> ExpressionIdentifier .

    RANGE           reduce using rule 239 (ExpressionIdentListOpt -> ExpressionIdentifier .)


state 281

    (189) Assignment -> ExpressionList . assign_op ExpressionList
    (240) ExpressionIdentifier -> ExpressionList . ASSIGN
    (190) assign_op -> . AssignOp
    (191) AssignOp -> . PLUS_ASSIGN
    (192) AssignOp -> . MINUS_ASSIGN
    (193) AssignOp -> . MULT_ASSIGN
    (194) AssignOp -> . DIV_ASSIGN
    (195) AssignOp -> . MOD_ASSIGN
    (196) AssignOp -> . AND_ASSIGN
    (197) AssignOp -> . OR_ASSIGN
    (198) AssignOp -> . XOR_ASSIGN
    (199) AssignOp -> . LSHIFT_ASSIGN
    (200) AssignOp -> . RSHIFT_ASSIGN
    (201) AssignOp -> . ASSIGN

    ASSIGN          shift and go to state 316
    PLUS_ASSIGN     shift and go to state 286
    MINUS_ASSIGN    shift and go to state 287
    MULT_ASSIGN     shift and go to state 288
    DIV_ASSIGN      shift and go to state 289
    MOD_ASSIGN      shift and go to state 290
    AND_ASSIGN      shift and go to state 291
    OR_ASSIGN       shift and go to state 292
    XOR_ASSIGN      shift and go to state 293
    LSHIFT_ASSIGN   shift and go to state 294
    RSHIFT_ASSIGN   shift and go to state 295

    assign_op                      shift and go to state 284
    AssignOp                       shift and go to state 285

state 282

    (85) ShortVarDecl -> IDENTIFIER . QUICK_ASSIGN Expression
    (102) OperandName -> IDENTIFIER .

    QUICK_ASSIGN    shift and go to state 283
    DOT             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEFT_PARANTHESIS reduce using rule 102 (OperandName -> IDENTIFIER .)
    INC             reduce using rule 102 (OperandName -> IDENTIFIER .)
    DEC             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LOG_OR          reduce using rule 102 (OperandName -> IDENTIFIER .)
    LOG_AND         reduce using rule 102 (OperandName -> IDENTIFIER .)
    EQ              reduce using rule 102 (OperandName -> IDENTIFIER .)
    NEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LT              reduce using rule 102 (OperandName -> IDENTIFIER .)
    GT              reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 102 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 102 (OperandName -> IDENTIFIER .)
    XOR             reduce using rule 102 (OperandName -> IDENTIFIER .)
    DIV             reduce using rule 102 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 102 (OperandName -> IDENTIFIER .)
    LSHIFT          reduce using rule 102 (OperandName -> IDENTIFIER .)
    RSHIFT          reduce using rule 102 (OperandName -> IDENTIFIER .)
    ADD             reduce using rule 102 (OperandName -> IDENTIFIER .)
    SUB             reduce using rule 102 (OperandName -> IDENTIFIER .)
    MULT            reduce using rule 102 (OperandName -> IDENTIFIER .)
    AND             reduce using rule 102 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 102 (OperandName -> IDENTIFIER .)
    LEFT_BRACES     reduce using rule 102 (OperandName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 102 (OperandName -> IDENTIFIER .)
    ASSIGN          reduce using rule 102 (OperandName -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 102 (OperandName -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 102 (OperandName -> IDENTIFIER .)
    MULT_ASSIGN     reduce using rule 102 (OperandName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 102 (OperandName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 102 (OperandName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 102 (OperandName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 102 (OperandName -> IDENTIFIER .)


state 283

    (85) ShortVarDecl -> IDENTIFIER QUICK_ASSIGN . Expression
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 317
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 284

    (189) Assignment -> ExpressionList assign_op . ExpressionList
    (66) ExpressionList -> . Expression ExpressionRep
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ExpressionList                 shift and go to state 318
    Expression                     shift and go to state 153
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 285

    (190) assign_op -> AssignOp .

    NOT             reduce using rule 190 (assign_op -> AssignOp .)
    ADD             reduce using rule 190 (assign_op -> AssignOp .)
    SUB             reduce using rule 190 (assign_op -> AssignOp .)
    MULT            reduce using rule 190 (assign_op -> AssignOp .)
    AND             reduce using rule 190 (assign_op -> AssignOp .)
    LEFT_PARANTHESIS reduce using rule 190 (assign_op -> AssignOp .)
    TYPECAST        reduce using rule 190 (assign_op -> AssignOp .)
    IDENTIFIER      reduce using rule 190 (assign_op -> AssignOp .)
    INTEGER         reduce using rule 190 (assign_op -> AssignOp .)
    OCTAL           reduce using rule 190 (assign_op -> AssignOp .)
    HEX             reduce using rule 190 (assign_op -> AssignOp .)
    FLOAT           reduce using rule 190 (assign_op -> AssignOp .)
    IMAGINARY       reduce using rule 190 (assign_op -> AssignOp .)
    RUNE            reduce using rule 190 (assign_op -> AssignOp .)
    STRING          reduce using rule 190 (assign_op -> AssignOp .)


state 286

    (191) AssignOp -> PLUS_ASSIGN .

    NOT             reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    ADD             reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    SUB             reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    MULT            reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    AND             reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    TYPECAST        reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    INTEGER         reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    OCTAL           reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    HEX             reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    FLOAT           reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    IMAGINARY       reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    RUNE            reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)
    STRING          reduce using rule 191 (AssignOp -> PLUS_ASSIGN .)


state 287

    (192) AssignOp -> MINUS_ASSIGN .

    NOT             reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    ADD             reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    SUB             reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    MULT            reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    AND             reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    TYPECAST        reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    INTEGER         reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    OCTAL           reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    HEX             reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    FLOAT           reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    IMAGINARY       reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    RUNE            reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)
    STRING          reduce using rule 192 (AssignOp -> MINUS_ASSIGN .)


state 288

    (193) AssignOp -> MULT_ASSIGN .

    NOT             reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    ADD             reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    SUB             reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    MULT            reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    AND             reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    TYPECAST        reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    IDENTIFIER      reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    INTEGER         reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    OCTAL           reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    HEX             reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    FLOAT           reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    IMAGINARY       reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    RUNE            reduce using rule 193 (AssignOp -> MULT_ASSIGN .)
    STRING          reduce using rule 193 (AssignOp -> MULT_ASSIGN .)


state 289

    (194) AssignOp -> DIV_ASSIGN .

    NOT             reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    ADD             reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    SUB             reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    MULT            reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    AND             reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    TYPECAST        reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    INTEGER         reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    OCTAL           reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    HEX             reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    FLOAT           reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    IMAGINARY       reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    RUNE            reduce using rule 194 (AssignOp -> DIV_ASSIGN .)
    STRING          reduce using rule 194 (AssignOp -> DIV_ASSIGN .)


state 290

    (195) AssignOp -> MOD_ASSIGN .

    NOT             reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    ADD             reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    SUB             reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    MULT            reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    AND             reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    TYPECAST        reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    INTEGER         reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    OCTAL           reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    HEX             reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    FLOAT           reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    IMAGINARY       reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    RUNE            reduce using rule 195 (AssignOp -> MOD_ASSIGN .)
    STRING          reduce using rule 195 (AssignOp -> MOD_ASSIGN .)


state 291

    (196) AssignOp -> AND_ASSIGN .

    NOT             reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    ADD             reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    SUB             reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    MULT            reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    AND             reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    TYPECAST        reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    INTEGER         reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    OCTAL           reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    HEX             reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    FLOAT           reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    IMAGINARY       reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    RUNE            reduce using rule 196 (AssignOp -> AND_ASSIGN .)
    STRING          reduce using rule 196 (AssignOp -> AND_ASSIGN .)


state 292

    (197) AssignOp -> OR_ASSIGN .

    NOT             reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    ADD             reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    SUB             reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    MULT            reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    AND             reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    TYPECAST        reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    INTEGER         reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    OCTAL           reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    HEX             reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    FLOAT           reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    IMAGINARY       reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    RUNE            reduce using rule 197 (AssignOp -> OR_ASSIGN .)
    STRING          reduce using rule 197 (AssignOp -> OR_ASSIGN .)


state 293

    (198) AssignOp -> XOR_ASSIGN .

    NOT             reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    ADD             reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    SUB             reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    MULT            reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    AND             reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    TYPECAST        reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    INTEGER         reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    OCTAL           reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    HEX             reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    FLOAT           reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    IMAGINARY       reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    RUNE            reduce using rule 198 (AssignOp -> XOR_ASSIGN .)
    STRING          reduce using rule 198 (AssignOp -> XOR_ASSIGN .)


state 294

    (199) AssignOp -> LSHIFT_ASSIGN .

    NOT             reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    ADD             reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    SUB             reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    MULT            reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    AND             reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    TYPECAST        reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    INTEGER         reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    OCTAL           reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    HEX             reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    FLOAT           reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    IMAGINARY       reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    RUNE            reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)
    STRING          reduce using rule 199 (AssignOp -> LSHIFT_ASSIGN .)


state 295

    (200) AssignOp -> RSHIFT_ASSIGN .

    NOT             reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    ADD             reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    SUB             reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    MULT            reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    AND             reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    TYPECAST        reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    INTEGER         reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    OCTAL           reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    HEX             reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    FLOAT           reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    IMAGINARY       reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    RUNE            reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)
    STRING          reduce using rule 200 (AssignOp -> RSHIFT_ASSIGN .)


state 296

    (201) AssignOp -> ASSIGN .

    NOT             reduce using rule 201 (AssignOp -> ASSIGN .)
    ADD             reduce using rule 201 (AssignOp -> ASSIGN .)
    SUB             reduce using rule 201 (AssignOp -> ASSIGN .)
    MULT            reduce using rule 201 (AssignOp -> ASSIGN .)
    AND             reduce using rule 201 (AssignOp -> ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 201 (AssignOp -> ASSIGN .)
    TYPECAST        reduce using rule 201 (AssignOp -> ASSIGN .)
    IDENTIFIER      reduce using rule 201 (AssignOp -> ASSIGN .)
    INTEGER         reduce using rule 201 (AssignOp -> ASSIGN .)
    OCTAL           reduce using rule 201 (AssignOp -> ASSIGN .)
    HEX             reduce using rule 201 (AssignOp -> ASSIGN .)
    FLOAT           reduce using rule 201 (AssignOp -> ASSIGN .)
    IMAGINARY       reduce using rule 201 (AssignOp -> ASSIGN .)
    RUNE            reduce using rule 201 (AssignOp -> ASSIGN .)
    STRING          reduce using rule 201 (AssignOp -> ASSIGN .)


state 297

    (210) ExprSwitchStmt -> SWITCH ExpressionOpt . LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES

    LEFT_BRACES     shift and go to state 319


state 298

    (216) TypeSwitchStmt -> SWITCH SimpleStmtOpt . TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES
    (217) TypeSwitchGuard -> . IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (218) IdentifierOpt -> . IDENTIFIER QUICK_ASSIGN
    (219) IdentifierOpt -> . epsilon
    (265) epsilon -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 322
    LEFT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    TYPECAST        reduce using rule 265 (epsilon -> .)
    INTEGER         reduce using rule 265 (epsilon -> .)
    OCTAL           reduce using rule 265 (epsilon -> .)
    HEX             reduce using rule 265 (epsilon -> .)
    FLOAT           reduce using rule 265 (epsilon -> .)
    IMAGINARY       reduce using rule 265 (epsilon -> .)
    RUNE            reduce using rule 265 (epsilon -> .)
    STRING          reduce using rule 265 (epsilon -> .)

  ! IDENTIFIER      [ reduce using rule 265 (epsilon -> .) ]

    TypeSwitchGuard                shift and go to state 320
    IdentifierOpt                  shift and go to state 321
    epsilon                        shift and go to state 323

state 299

    (141) ExpressionOpt -> Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (186) ExpressionStmt -> Expression .
    (187) IncDecStmt -> Expression . INC
    (188) IncDecStmt -> Expression . DEC
    (66) ExpressionList -> Expression . ExpressionRep
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (67) ExpressionRep -> . ExpressionRep COMMA Expression
    (68) ExpressionRep -> . epsilon
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (265) epsilon -> .
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 141 (ExpressionOpt -> Expression .)
    SEMICOLON       reduce using rule 186 (ExpressionStmt -> Expression .)
    INC             shift and go to state 270
    DEC             shift and go to state 271
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    COMMA           reduce using rule 265 (epsilon -> .)
    PLUS_ASSIGN     reduce using rule 265 (epsilon -> .)
    MINUS_ASSIGN    reduce using rule 265 (epsilon -> .)
    MULT_ASSIGN     reduce using rule 265 (epsilon -> .)
    DIV_ASSIGN      reduce using rule 265 (epsilon -> .)
    MOD_ASSIGN      reduce using rule 265 (epsilon -> .)
    AND_ASSIGN      reduce using rule 265 (epsilon -> .)
    OR_ASSIGN       reduce using rule 265 (epsilon -> .)
    XOR_ASSIGN      reduce using rule 265 (epsilon -> .)
    LSHIFT_ASSIGN   reduce using rule 265 (epsilon -> .)
    RSHIFT_ASSIGN   reduce using rule 265 (epsilon -> .)
    ASSIGN          reduce using rule 265 (epsilon -> .)
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    ExpressionRep                  shift and go to state 204
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    epsilon                        shift and go to state 205
    UnaryOp                        shift and go to state 179

state 300

    (142) ExpressionOpt -> epsilon .
    (204) SimpleStmtOpt -> epsilon .
    (179) SimpleStmt -> epsilon .

    LEFT_BRACES     reduce using rule 142 (ExpressionOpt -> epsilon .)
    IDENTIFIER      reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    LEFT_PARANTHESIS reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    TYPECAST        reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    INTEGER         reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    OCTAL           reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    HEX             reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    FLOAT           reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    IMAGINARY       reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    RUNE            reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    STRING          reduce using rule 204 (SimpleStmtOpt -> epsilon .)
    SEMICOLON       reduce using rule 179 (SimpleStmt -> epsilon .)


state 301

    (203) SimpleStmtOpt -> SimpleStmt . SEMICOLON

    SEMICOLON       shift and go to state 324


state 302

    (45) ParameterDecl -> IdentifierList Type .

    COMMA           reduce using rule 45 (ParameterDecl -> IdentifierList Type .)
    RIGHT_PARANTHESIS reduce using rule 45 (ParameterDecl -> IdentifierList Type .)


state 303

    (133) TypeAssertion -> DOT LEFT_PARANTHESIS Type . RIGHT_PARANTHESIS

    RIGHT_PARANTHESIS shift and go to state 325


state 304

    (130) Index -> LEFT_BRACKET Expression RIGHT_BRACKET .

    DOT             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LOG_OR          reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LOG_AND         reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    EQ              reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    NEQ             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LT              reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    GT              reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEQ             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    GEQ             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    OR              reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    XOR             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    DIV             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    MOD             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LSHIFT          reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    RSHIFT          reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    ADD             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    SUB             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    MULT            reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    AND             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    COMMA           reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    INC             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    DEC             reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    ASSIGN          reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    COLON           reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 130 (Index -> LEFT_BRACKET Expression RIGHT_BRACKET .)


state 305

    (131) Slice -> LEFT_BRACKET ExpressionOpt COLON . ExpressionOpt RIGHT_BRACKET
    (132) Slice -> LEFT_BRACKET ExpressionOpt COLON . Expression COLON Expression RIGHT_BRACKET
    (141) ExpressionOpt -> . Expression
    (142) ExpressionOpt -> . epsilon
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (265) epsilon -> .
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    RIGHT_BRACKET   reduce using rule 265 (epsilon -> .)
    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ExpressionOpt                  shift and go to state 326
    Expression                     shift and go to state 327
    epsilon                        shift and go to state 248
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 306

    (134) Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .

    DOT             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEFT_BRACKET    reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    EQ              reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LT              reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    GT              reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    OR              reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    XOR             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DIV             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MOD             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    ADD             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    SUB             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MULT            reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    AND             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    INC             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DEC             reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    COLON           reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 134 (Arguments -> LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS .)


state 307

    (167) Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression . RIGHT_PARANTHESIS
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    RIGHT_PARANTHESIS shift and go to state 328
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 308

    (24) FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .

    RIGHT_BRACES    reduce using rule 24 (FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON .)


state 309

    (26) FieldDecl -> IdentifierList Type . TagOpt
    (27) TagOpt -> . Tag
    (28) TagOpt -> . epsilon
    (29) Tag -> . STRING
    (265) epsilon -> .

    STRING          shift and go to state 332
    SEMICOLON       reduce using rule 265 (epsilon -> .)

    TagOpt                         shift and go to state 329
    Tag                            shift and go to state 330
    epsilon                        shift and go to state 331

state 310

    (67) ExpressionRep -> ExpressionRep COMMA Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    COMMA           reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    SEMICOLON       reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    RIGHT_PARANTHESIS reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LEFT_BRACES     reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    COLON           reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    PLUS_ASSIGN     reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MINUS_ASSIGN    reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MULT_ASSIGN     reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    DIV_ASSIGN      reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MOD_ASSIGN      reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    AND_ASSIGN      reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    OR_ASSIGN       reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    XOR_ASSIGN      reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LSHIFT_ASSIGN   reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    RSHIFT_ASSIGN   reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    ASSIGN          reduce using rule 67 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 311

    (184) LabeledStmt -> Label COLON Statement .

    SEMICOLON       reduce using rule 184 (LabeledStmt -> Label COLON Statement .)


state 312

    (202) IfStmt -> IF Expression Block . ElseOpt
    (205) ElseOpt -> . ELSE IfStmt
    (206) ElseOpt -> . ELSE Block
    (207) ElseOpt -> . epsilon
    (265) epsilon -> .

    ELSE            shift and go to state 334
    SEMICOLON       reduce using rule 265 (epsilon -> .)

    ElseOpt                        shift and go to state 333
    epsilon                        shift and go to state 335

state 313

    (228) ForStmt -> FOR ConditionBlockOpt Block .

    SEMICOLON       reduce using rule 228 (ForStmt -> FOR ConditionBlockOpt Block .)


state 314

    (234) ForClause -> SimpleStmt SEMICOLON . ConditionOpt SEMICOLON SimpleStmt
    (235) ConditionOpt -> . epsilon
    (236) ConditionOpt -> . Condition
    (265) epsilon -> .
    (233) Condition -> . Expression
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    SEMICOLON       reduce using rule 265 (epsilon -> .)
    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ConditionOpt                   shift and go to state 336
    epsilon                        shift and go to state 337
    Condition                      shift and go to state 338
    Expression                     shift and go to state 339
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 315

    (237) RangeClause -> ExpressionIdentListOpt RANGE . Expression
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 340
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 316

    (240) ExpressionIdentifier -> ExpressionList ASSIGN .
    (201) AssignOp -> ASSIGN .

    RANGE           reduce using rule 240 (ExpressionIdentifier -> ExpressionList ASSIGN .)
    NOT             reduce using rule 201 (AssignOp -> ASSIGN .)
    ADD             reduce using rule 201 (AssignOp -> ASSIGN .)
    SUB             reduce using rule 201 (AssignOp -> ASSIGN .)
    MULT            reduce using rule 201 (AssignOp -> ASSIGN .)
    AND             reduce using rule 201 (AssignOp -> ASSIGN .)
    LEFT_PARANTHESIS reduce using rule 201 (AssignOp -> ASSIGN .)
    TYPECAST        reduce using rule 201 (AssignOp -> ASSIGN .)
    IDENTIFIER      reduce using rule 201 (AssignOp -> ASSIGN .)
    INTEGER         reduce using rule 201 (AssignOp -> ASSIGN .)
    OCTAL           reduce using rule 201 (AssignOp -> ASSIGN .)
    HEX             reduce using rule 201 (AssignOp -> ASSIGN .)
    FLOAT           reduce using rule 201 (AssignOp -> ASSIGN .)
    IMAGINARY       reduce using rule 201 (AssignOp -> ASSIGN .)
    RUNE            reduce using rule 201 (AssignOp -> ASSIGN .)
    STRING          reduce using rule 201 (AssignOp -> ASSIGN .)


state 317

    (85) ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    SEMICOLON       reduce using rule 85 (ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .)
    LEFT_BRACES     reduce using rule 85 (ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression .)
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 318

    (189) Assignment -> ExpressionList assign_op ExpressionList .

    SEMICOLON       reduce using rule 189 (Assignment -> ExpressionList assign_op ExpressionList .)
    LEFT_BRACES     reduce using rule 189 (Assignment -> ExpressionList assign_op ExpressionList .)


state 319

    (210) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES . ExprCaseClauseRep RIGHT_BRACES
    (211) ExprCaseClauseRep -> . ExprCaseClauseRep ExprCaseClause
    (212) ExprCaseClauseRep -> . epsilon
    (265) epsilon -> .

    RIGHT_BRACES    reduce using rule 265 (epsilon -> .)
    CASE            reduce using rule 265 (epsilon -> .)
    DEFAULT         reduce using rule 265 (epsilon -> .)

    ExprCaseClauseRep              shift and go to state 341
    epsilon                        shift and go to state 342

state 320

    (216) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard . LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES

    LEFT_BRACES     shift and go to state 343


state 321

    (217) TypeSwitchGuard -> IdentifierOpt . PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    PrimaryExpr                    shift and go to state 344
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 322

    (218) IdentifierOpt -> IDENTIFIER . QUICK_ASSIGN

    QUICK_ASSIGN    shift and go to state 345


state 323

    (219) IdentifierOpt -> epsilon .

    LEFT_PARANTHESIS reduce using rule 219 (IdentifierOpt -> epsilon .)
    TYPECAST        reduce using rule 219 (IdentifierOpt -> epsilon .)
    IDENTIFIER      reduce using rule 219 (IdentifierOpt -> epsilon .)
    INTEGER         reduce using rule 219 (IdentifierOpt -> epsilon .)
    OCTAL           reduce using rule 219 (IdentifierOpt -> epsilon .)
    HEX             reduce using rule 219 (IdentifierOpt -> epsilon .)
    FLOAT           reduce using rule 219 (IdentifierOpt -> epsilon .)
    IMAGINARY       reduce using rule 219 (IdentifierOpt -> epsilon .)
    RUNE            reduce using rule 219 (IdentifierOpt -> epsilon .)
    STRING          reduce using rule 219 (IdentifierOpt -> epsilon .)


state 324

    (203) SimpleStmtOpt -> SimpleStmt SEMICOLON .

    IDENTIFIER      reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    LEFT_PARANTHESIS reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    TYPECAST        reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    INTEGER         reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    OCTAL           reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    HEX             reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    FLOAT           reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    IMAGINARY       reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    RUNE            reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)
    STRING          reduce using rule 203 (SimpleStmtOpt -> SimpleStmt SEMICOLON .)


state 325

    (133) TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .

    DOT             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_BRACKET    reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    EQ              reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LT              reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    GT              reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    OR              reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    XOR             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DIV             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MOD             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    ADD             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SUB             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MULT            reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    AND             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    INC             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DEC             reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    COLON           reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 133 (TypeAssertion -> DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS .)


state 326

    (131) Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 346


state 327

    (132) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression . COLON Expression RIGHT_BRACKET
    (141) ExpressionOpt -> Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    COLON           shift and go to state 347
    RIGHT_BRACKET   reduce using rule 141 (ExpressionOpt -> Expression .)
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 328

    (167) Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .

    DOT             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_BRACKET    reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_PARANTHESIS reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_OR          reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LOG_AND         reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    EQ              reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    NEQ             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LT              reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GT              reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEQ             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    GEQ             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR              reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT          reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT          reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ADD             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SUB             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT            reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_BRACKET   reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COMMA           reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    SEMICOLON       reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RIGHT_PARANTHESIS reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    INC             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DEC             reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    PLUS_ASSIGN     reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MINUS_ASSIGN    reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MULT_ASSIGN     reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    DIV_ASSIGN      reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    MOD_ASSIGN      reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    AND_ASSIGN      reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    OR_ASSIGN       reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    XOR_ASSIGN      reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LSHIFT_ASSIGN   reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    RSHIFT_ASSIGN   reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    ASSIGN          reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    COLON           reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)
    LEFT_BRACES     reduce using rule 167 (Conversion -> TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS .)


state 329

    (26) FieldDecl -> IdentifierList Type TagOpt .

    SEMICOLON       reduce using rule 26 (FieldDecl -> IdentifierList Type TagOpt .)


state 330

    (27) TagOpt -> Tag .

    SEMICOLON       reduce using rule 27 (TagOpt -> Tag .)


state 331

    (28) TagOpt -> epsilon .

    SEMICOLON       reduce using rule 28 (TagOpt -> epsilon .)


state 332

    (29) Tag -> STRING .

    SEMICOLON       reduce using rule 29 (Tag -> STRING .)


state 333

    (202) IfStmt -> IF Expression Block ElseOpt .

    SEMICOLON       reduce using rule 202 (IfStmt -> IF Expression Block ElseOpt .)


state 334

    (205) ElseOpt -> ELSE . IfStmt
    (206) ElseOpt -> ELSE . Block
    (202) IfStmt -> . IF Expression Block ElseOpt
    (47) Block -> . LEFT_BRACES StatementList RIGHT_BRACES

    IF              shift and go to state 229
    LEFT_BRACES     shift and go to state 94

    IfStmt                         shift and go to state 348
    Block                          shift and go to state 349

state 335

    (207) ElseOpt -> epsilon .

    SEMICOLON       reduce using rule 207 (ElseOpt -> epsilon .)


state 336

    (234) ForClause -> SimpleStmt SEMICOLON ConditionOpt . SEMICOLON SimpleStmt

    SEMICOLON       shift and go to state 350


state 337

    (235) ConditionOpt -> epsilon .

    SEMICOLON       reduce using rule 235 (ConditionOpt -> epsilon .)


state 338

    (236) ConditionOpt -> Condition .

    SEMICOLON       reduce using rule 236 (ConditionOpt -> Condition .)


state 339

    (233) Condition -> Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    SEMICOLON       reduce using rule 233 (Condition -> Expression .)
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 340

    (237) RangeClause -> ExpressionIdentListOpt RANGE Expression .
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    LEFT_BRACES     reduce using rule 237 (RangeClause -> ExpressionIdentListOpt RANGE Expression .)
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 341

    (210) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep . RIGHT_BRACES
    (211) ExprCaseClauseRep -> ExprCaseClauseRep . ExprCaseClause
    (213) ExprCaseClause -> . ExprSwitchCase COLON StatementList
    (214) ExprSwitchCase -> . CASE ExpressionList
    (215) ExprSwitchCase -> . DEFAULT

    RIGHT_BRACES    shift and go to state 351
    CASE            shift and go to state 354
    DEFAULT         shift and go to state 355

    ExprCaseClause                 shift and go to state 352
    ExprSwitchCase                 shift and go to state 353

state 342

    (212) ExprCaseClauseRep -> epsilon .

    RIGHT_BRACES    reduce using rule 212 (ExprCaseClauseRep -> epsilon .)
    CASE            reduce using rule 212 (ExprCaseClauseRep -> epsilon .)
    DEFAULT         reduce using rule 212 (ExprCaseClauseRep -> epsilon .)


state 343

    (216) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES . TypeCaseClauseOpt RIGHT_BRACES
    (220) TypeCaseClauseOpt -> . TypeCaseClauseOpt TypeCaseClause
    (221) TypeCaseClauseOpt -> . epsilon
    (265) epsilon -> .

    RIGHT_BRACES    reduce using rule 265 (epsilon -> .)
    CASE            reduce using rule 265 (epsilon -> .)
    DEFAULT         reduce using rule 265 (epsilon -> .)

    TypeCaseClauseOpt              shift and go to state 356
    epsilon                        shift and go to state 357

state 344

    (217) TypeSwitchGuard -> IdentifierOpt PrimaryExpr . DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (123) PrimaryExpr -> PrimaryExpr . Selector
    (125) PrimaryExpr -> PrimaryExpr . Index
    (126) PrimaryExpr -> PrimaryExpr . Slice
    (127) PrimaryExpr -> PrimaryExpr . TypeAssertion
    (128) PrimaryExpr -> PrimaryExpr . Arguments
    (129) Selector -> . DOT IDENTIFIER
    (130) Index -> . LEFT_BRACKET Expression RIGHT_BRACKET
    (131) Slice -> . LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET
    (132) Slice -> . LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET
    (133) TypeAssertion -> . DOT LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (134) Arguments -> . LEFT_PARANTHESIS ExpressionListTypeOpt RIGHT_PARANTHESIS

    DOT             shift and go to state 358
    LEFT_BRACKET    shift and go to state 192
    LEFT_PARANTHESIS shift and go to state 193

    Selector                       shift and go to state 186
    Index                          shift and go to state 187
    Slice                          shift and go to state 188
    TypeAssertion                  shift and go to state 189
    Arguments                      shift and go to state 190

state 345

    (218) IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .

    LEFT_PARANTHESIS reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    TYPECAST        reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    IDENTIFIER      reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    INTEGER         reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    OCTAL           reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    HEX             reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    FLOAT           reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    IMAGINARY       reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    RUNE            reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)
    STRING          reduce using rule 218 (IdentifierOpt -> IDENTIFIER QUICK_ASSIGN .)


state 346

    (131) Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .

    DOT             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LOG_OR          reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LOG_AND         reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    EQ              reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    NEQ             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LT              reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    GT              reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEQ             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    GEQ             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    OR              reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    XOR             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DIV             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MOD             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LSHIFT          reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RSHIFT          reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    ADD             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    SUB             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MULT            reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    AND             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    COMMA           reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    INC             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DEC             reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    ASSIGN          reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    COLON           reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 131 (Slice -> LEFT_BRACKET ExpressionOpt COLON ExpressionOpt RIGHT_BRACKET .)


state 347

    (132) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON . Expression RIGHT_BRACKET
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    Expression                     shift and go to state 359
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 348

    (205) ElseOpt -> ELSE IfStmt .

    SEMICOLON       reduce using rule 205 (ElseOpt -> ELSE IfStmt .)


state 349

    (206) ElseOpt -> ELSE Block .

    SEMICOLON       reduce using rule 206 (ElseOpt -> ELSE Block .)


state 350

    (234) ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON . SimpleStmt
    (179) SimpleStmt -> . epsilon
    (180) SimpleStmt -> . ExpressionStmt
    (181) SimpleStmt -> . IncDecStmt
    (182) SimpleStmt -> . Assignment
    (183) SimpleStmt -> . ShortVarDecl
    (265) epsilon -> .
    (186) ExpressionStmt -> . Expression
    (187) IncDecStmt -> . Expression INC
    (188) IncDecStmt -> . Expression DEC
    (189) Assignment -> . ExpressionList assign_op ExpressionList
    (85) ShortVarDecl -> . IDENTIFIER QUICK_ASSIGN Expression
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (66) ExpressionList -> . Expression ExpressionRep
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    LEFT_BRACES     reduce using rule 265 (epsilon -> .)
    IDENTIFIER      shift and go to state 282
    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    SimpleStmt                     shift and go to state 360
    epsilon                        shift and go to state 220
    ExpressionStmt                 shift and go to state 221
    IncDecStmt                     shift and go to state 222
    Assignment                     shift and go to state 223
    ShortVarDecl                   shift and go to state 224
    Expression                     shift and go to state 230
    ExpressionList                 shift and go to state 235
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 351

    (210) ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES .

    SEMICOLON       reduce using rule 210 (ExprSwitchStmt -> SWITCH ExpressionOpt LEFT_BRACES ExprCaseClauseRep RIGHT_BRACES .)


state 352

    (211) ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .

    RIGHT_BRACES    reduce using rule 211 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)
    CASE            reduce using rule 211 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)
    DEFAULT         reduce using rule 211 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)


state 353

    (213) ExprCaseClause -> ExprSwitchCase . COLON StatementList

    COLON           shift and go to state 361


state 354

    (214) ExprSwitchCase -> CASE . ExpressionList
    (66) ExpressionList -> . Expression ExpressionRep
    (139) Expression -> . UnaryExpr
    (140) Expression -> . Expression BinaryOp Expression
    (143) UnaryExpr -> . PrimaryExpr
    (144) UnaryExpr -> . UnaryOp UnaryExpr
    (145) UnaryExpr -> . NOT UnaryExpr
    (122) PrimaryExpr -> . Operand
    (123) PrimaryExpr -> . PrimaryExpr Selector
    (124) PrimaryExpr -> . Conversion
    (125) PrimaryExpr -> . PrimaryExpr Index
    (126) PrimaryExpr -> . PrimaryExpr Slice
    (127) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (128) PrimaryExpr -> . PrimaryExpr Arguments
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND
    (91) Operand -> . Literal
    (92) Operand -> . OperandName
    (93) Operand -> . LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (167) Conversion -> . TYPECAST Type LEFT_PARANTHESIS Expression RIGHT_PARANTHESIS
    (94) Literal -> . BasicLit
    (102) OperandName -> . IDENTIFIER
    (95) BasicLit -> . INTEGER
    (96) BasicLit -> . OCTAL
    (97) BasicLit -> . HEX
    (98) BasicLit -> . FLOAT
    (99) BasicLit -> . IMAGINARY
    (100) BasicLit -> . RUNE
    (101) BasicLit -> . STRING

    NOT             shift and go to state 120
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126
    LEFT_PARANTHESIS shift and go to state 129
    TYPECAST        shift and go to state 130
    IDENTIFIER      shift and go to state 132
    INTEGER         shift and go to state 133
    OCTAL           shift and go to state 134
    HEX             shift and go to state 135
    FLOAT           shift and go to state 136
    IMAGINARY       shift and go to state 137
    RUNE            shift and go to state 138
    STRING          shift and go to state 139

    ExpressionList                 shift and go to state 362
    Expression                     shift and go to state 153
    UnaryExpr                      shift and go to state 117
    PrimaryExpr                    shift and go to state 118
    UnaryOp                        shift and go to state 119
    Operand                        shift and go to state 121
    Conversion                     shift and go to state 122
    Literal                        shift and go to state 127
    OperandName                    shift and go to state 128
    BasicLit                       shift and go to state 131

state 355

    (215) ExprSwitchCase -> DEFAULT .

    COLON           reduce using rule 215 (ExprSwitchCase -> DEFAULT .)


state 356

    (216) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt . RIGHT_BRACES
    (220) TypeCaseClauseOpt -> TypeCaseClauseOpt . TypeCaseClause
    (222) TypeCaseClause -> . TypeSwitchCase COLON StatementList
    (223) TypeSwitchCase -> . CASE TypeList
    (224) TypeSwitchCase -> . DEFAULT

    RIGHT_BRACES    shift and go to state 363
    CASE            shift and go to state 366
    DEFAULT         shift and go to state 367

    TypeCaseClause                 shift and go to state 364
    TypeSwitchCase                 shift and go to state 365

state 357

    (221) TypeCaseClauseOpt -> epsilon .

    RIGHT_BRACES    reduce using rule 221 (TypeCaseClauseOpt -> epsilon .)
    CASE            reduce using rule 221 (TypeCaseClauseOpt -> epsilon .)
    DEFAULT         reduce using rule 221 (TypeCaseClauseOpt -> epsilon .)


state 358

    (217) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT . LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS
    (129) Selector -> DOT . IDENTIFIER
    (133) TypeAssertion -> DOT . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS

    LEFT_PARANTHESIS shift and go to state 368
    IDENTIFIER      shift and go to state 244


state 359

    (132) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression . RIGHT_BRACKET
    (140) Expression -> Expression . BinaryOp Expression
    (146) BinaryOp -> . LOG_OR
    (147) BinaryOp -> . LOG_AND
    (148) BinaryOp -> . RelOp
    (149) BinaryOp -> . AddMulOp
    (150) RelOp -> . EQ
    (151) RelOp -> . NEQ
    (152) RelOp -> . LT
    (153) RelOp -> . GT
    (154) RelOp -> . LEQ
    (155) RelOp -> . GEQ
    (156) AddMulOp -> . UnaryOp
    (157) AddMulOp -> . OR
    (158) AddMulOp -> . XOR
    (159) AddMulOp -> . DIV
    (160) AddMulOp -> . MOD
    (161) AddMulOp -> . LSHIFT
    (162) AddMulOp -> . RSHIFT
    (163) UnaryOp -> . ADD
    (164) UnaryOp -> . SUB
    (165) UnaryOp -> . MULT
    (166) UnaryOp -> . AND

    RIGHT_BRACKET   shift and go to state 369
    LOG_OR          shift and go to state 169
    LOG_AND         shift and go to state 170
    EQ              shift and go to state 173
    NEQ             shift and go to state 174
    LT              shift and go to state 175
    GT              shift and go to state 176
    LEQ             shift and go to state 177
    GEQ             shift and go to state 178
    OR              shift and go to state 180
    XOR             shift and go to state 181
    DIV             shift and go to state 182
    MOD             shift and go to state 183
    LSHIFT          shift and go to state 184
    RSHIFT          shift and go to state 185
    ADD             shift and go to state 123
    SUB             shift and go to state 124
    MULT            shift and go to state 125
    AND             shift and go to state 126

    BinaryOp                       shift and go to state 168
    RelOp                          shift and go to state 171
    AddMulOp                       shift and go to state 172
    UnaryOp                        shift and go to state 179

state 360

    (234) ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt .

    LEFT_BRACES     reduce using rule 234 (ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt .)


state 361

    (213) ExprCaseClause -> ExprSwitchCase COLON . StatementList
    (48) StatementList -> . StatementRep
    (49) StatementRep -> . StatementRep Statement SEMICOLON
    (50) StatementRep -> . epsilon
    (265) epsilon -> .

    RETURN          reduce using rule 265 (epsilon -> .)
    BREAK           reduce using rule 265 (epsilon -> .)
    CONTINUE        reduce using rule 265 (epsilon -> .)
    GOTO            reduce using rule 265 (epsilon -> .)
    LEFT_BRACES     reduce using rule 265 (epsilon -> .)
    IF              reduce using rule 265 (epsilon -> .)
    FOR             reduce using rule 265 (epsilon -> .)
    CONST           reduce using rule 265 (epsilon -> .)
    TYPE            reduce using rule 265 (epsilon -> .)
    VAR             reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)
    SWITCH          reduce using rule 265 (epsilon -> .)
    NOT             reduce using rule 265 (epsilon -> .)
    ADD             reduce using rule 265 (epsilon -> .)
    SUB             reduce using rule 265 (epsilon -> .)
    MULT            reduce using rule 265 (epsilon -> .)
    AND             reduce using rule 265 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    TYPECAST        reduce using rule 265 (epsilon -> .)
    INTEGER         reduce using rule 265 (epsilon -> .)
    OCTAL           reduce using rule 265 (epsilon -> .)
    HEX             reduce using rule 265 (epsilon -> .)
    FLOAT           reduce using rule 265 (epsilon -> .)
    IMAGINARY       reduce using rule 265 (epsilon -> .)
    RUNE            reduce using rule 265 (epsilon -> .)
    STRING          reduce using rule 265 (epsilon -> .)
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 265 (epsilon -> .)
    CASE            reduce using rule 265 (epsilon -> .)
    DEFAULT         reduce using rule 265 (epsilon -> .)

    StatementList                  shift and go to state 370
    StatementRep                   shift and go to state 156
    epsilon                        shift and go to state 157

state 362

    (214) ExprSwitchCase -> CASE ExpressionList .

    COLON           reduce using rule 214 (ExprSwitchCase -> CASE ExpressionList .)


state 363

    (216) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES .

    SEMICOLON       reduce using rule 216 (TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LEFT_BRACES TypeCaseClauseOpt RIGHT_BRACES .)


state 364

    (220) TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .

    RIGHT_BRACES    reduce using rule 220 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)
    CASE            reduce using rule 220 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)
    DEFAULT         reduce using rule 220 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)


state 365

    (222) TypeCaseClause -> TypeSwitchCase . COLON StatementList

    COLON           shift and go to state 371


state 366

    (223) TypeSwitchCase -> CASE . TypeList
    (225) TypeList -> . Type TypeRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    TypeList                       shift and go to state 372
    Type                           shift and go to state 373
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 367

    (224) TypeSwitchCase -> DEFAULT .

    COLON           reduce using rule 224 (TypeSwitchCase -> DEFAULT .)


state 368

    (217) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS . TYPE RIGHT_PARANTHESIS
    (133) TypeAssertion -> DOT LEFT_PARANTHESIS . Type RIGHT_PARANTHESIS
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    TYPE            shift and go to state 374
    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 303
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 369

    (132) Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .

    DOT             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEFT_PARANTHESIS reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LOG_OR          reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LOG_AND         reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    EQ              reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    NEQ             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LT              reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    GT              reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEQ             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    GEQ             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    OR              reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    XOR             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DIV             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MOD             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LSHIFT          reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RSHIFT          reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    ADD             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    SUB             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MULT            reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    AND             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    COMMA           reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RIGHT_PARANTHESIS reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    INC             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DEC             reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    PLUS_ASSIGN     reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MINUS_ASSIGN    reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MULT_ASSIGN     reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LSHIFT_ASSIGN   reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    RSHIFT_ASSIGN   reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    ASSIGN          reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    COLON           reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)
    LEFT_BRACES     reduce using rule 132 (Slice -> LEFT_BRACKET ExpressionOpt COLON Expression COLON Expression RIGHT_BRACKET .)


state 370

    (213) ExprCaseClause -> ExprSwitchCase COLON StatementList .

    RIGHT_BRACES    reduce using rule 213 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    CASE            reduce using rule 213 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 213 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)


state 371

    (222) TypeCaseClause -> TypeSwitchCase COLON . StatementList
    (48) StatementList -> . StatementRep
    (49) StatementRep -> . StatementRep Statement SEMICOLON
    (50) StatementRep -> . epsilon
    (265) epsilon -> .

    RETURN          reduce using rule 265 (epsilon -> .)
    BREAK           reduce using rule 265 (epsilon -> .)
    CONTINUE        reduce using rule 265 (epsilon -> .)
    GOTO            reduce using rule 265 (epsilon -> .)
    LEFT_BRACES     reduce using rule 265 (epsilon -> .)
    IF              reduce using rule 265 (epsilon -> .)
    FOR             reduce using rule 265 (epsilon -> .)
    CONST           reduce using rule 265 (epsilon -> .)
    TYPE            reduce using rule 265 (epsilon -> .)
    VAR             reduce using rule 265 (epsilon -> .)
    IDENTIFIER      reduce using rule 265 (epsilon -> .)
    SWITCH          reduce using rule 265 (epsilon -> .)
    NOT             reduce using rule 265 (epsilon -> .)
    ADD             reduce using rule 265 (epsilon -> .)
    SUB             reduce using rule 265 (epsilon -> .)
    MULT            reduce using rule 265 (epsilon -> .)
    AND             reduce using rule 265 (epsilon -> .)
    LEFT_PARANTHESIS reduce using rule 265 (epsilon -> .)
    TYPECAST        reduce using rule 265 (epsilon -> .)
    INTEGER         reduce using rule 265 (epsilon -> .)
    OCTAL           reduce using rule 265 (epsilon -> .)
    HEX             reduce using rule 265 (epsilon -> .)
    FLOAT           reduce using rule 265 (epsilon -> .)
    IMAGINARY       reduce using rule 265 (epsilon -> .)
    RUNE            reduce using rule 265 (epsilon -> .)
    STRING          reduce using rule 265 (epsilon -> .)
    SEMICOLON       reduce using rule 265 (epsilon -> .)
    RIGHT_BRACES    reduce using rule 265 (epsilon -> .)
    CASE            reduce using rule 265 (epsilon -> .)
    DEFAULT         reduce using rule 265 (epsilon -> .)

    StatementList                  shift and go to state 375
    StatementRep                   shift and go to state 156
    epsilon                        shift and go to state 157

state 372

    (223) TypeSwitchCase -> CASE TypeList .

    COLON           reduce using rule 223 (TypeSwitchCase -> CASE TypeList .)


state 373

    (225) TypeList -> Type . TypeRep
    (226) TypeRep -> . TypeRep COMMA Type
    (227) TypeRep -> . epsilon
    (265) epsilon -> .

    COMMA           reduce using rule 265 (epsilon -> .)
    COLON           reduce using rule 265 (epsilon -> .)

    TypeRep                        shift and go to state 376
    epsilon                        shift and go to state 377

state 374

    (217) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE . RIGHT_PARANTHESIS
    (14) TypeToken -> TYPE . IDENTIFIER

    RIGHT_PARANTHESIS shift and go to state 378
    IDENTIFIER      shift and go to state 113


state 375

    (222) TypeCaseClause -> TypeSwitchCase COLON StatementList .

    RIGHT_BRACES    reduce using rule 222 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)
    CASE            reduce using rule 222 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 222 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)


state 376

    (225) TypeList -> Type TypeRep .
    (226) TypeRep -> TypeRep . COMMA Type

    COLON           reduce using rule 225 (TypeList -> Type TypeRep .)
    COMMA           shift and go to state 379


state 377

    (227) TypeRep -> epsilon .

    COMMA           reduce using rule 227 (TypeRep -> epsilon .)
    COLON           reduce using rule 227 (TypeRep -> epsilon .)


state 378

    (217) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS .

    LEFT_BRACES     reduce using rule 217 (TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LEFT_PARANTHESIS TYPE RIGHT_PARANTHESIS .)


state 379

    (226) TypeRep -> TypeRep COMMA . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LEFT_PARANTHESIS Type RIGHT_PARANTHESIS
    (5) TypeName -> . TypeToken
    (6) TypeName -> . QualifiedIdent
    (15) TypeLit -> . ArrayType
    (16) TypeLit -> . StructType
    (17) TypeLit -> . PointerType
    (7) TypeToken -> . INT_T
    (8) TypeToken -> . FLOAT_T
    (9) TypeToken -> . UINT_T
    (10) TypeToken -> . COMPLEX_T
    (11) TypeToken -> . RUNE_T
    (12) TypeToken -> . BOOL_T
    (13) TypeToken -> . STRING_T
    (14) TypeToken -> . TYPE IDENTIFIER
    (103) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (20) ArrayType -> . LEFT_BRACKET ArrayLength RIGHT_BRACKET ElementType
    (23) StructType -> . STRUCT LEFT_BRACES FieldDeclRep RIGHT_BRACES
    (30) PointerType -> . MULT BaseType

    LEFT_PARANTHESIS shift and go to state 62
    INT_T           shift and go to state 68
    FLOAT_T         shift and go to state 69
    UINT_T          shift and go to state 70
    COMPLEX_T       shift and go to state 71
    RUNE_T          shift and go to state 72
    BOOL_T          shift and go to state 73
    STRING_T        shift and go to state 74
    TYPE            shift and go to state 75
    IDENTIFIER      shift and go to state 76
    LEFT_BRACKET    shift and go to state 77
    STRUCT          shift and go to state 78
    MULT            shift and go to state 79

    Type                           shift and go to state 380
    TypeName                       shift and go to state 60
    TypeLit                        shift and go to state 61
    TypeToken                      shift and go to state 63
    QualifiedIdent                 shift and go to state 64
    ArrayType                      shift and go to state 65
    StructType                     shift and go to state 66
    PointerType                    shift and go to state 67

state 380

    (226) TypeRep -> TypeRep COMMA Type .

    COMMA           reduce using rule 226 (TypeRep -> TypeRep COMMA Type .)
    COLON           reduce using rule 226 (TypeRep -> TypeRep COMMA Type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RIGHT_PARANTHESIS in state 158 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 236 resolved as shift
WARNING: shift/reduce conflict for LEFT_PARANTHESIS in state 236 resolved as shift
WARNING: shift/reduce conflict for TYPECAST in state 236 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 236 resolved as shift
WARNING: shift/reduce conflict for OCTAL in state 236 resolved as shift
WARNING: shift/reduce conflict for HEX in state 236 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 236 resolved as shift
WARNING: shift/reduce conflict for IMAGINARY in state 236 resolved as shift
WARNING: shift/reduce conflict for RUNE in state 236 resolved as shift
WARNING: shift/reduce conflict for STRING in state 236 resolved as shift
WARNING: shift/reduce conflict for LOG_OR in state 243 resolved as shift
WARNING: shift/reduce conflict for LOG_AND in state 243 resolved as shift
WARNING: shift/reduce conflict for EQ in state 243 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 243 resolved as shift
WARNING: shift/reduce conflict for LT in state 243 resolved as shift
WARNING: shift/reduce conflict for GT in state 243 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 243 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 243 resolved as shift
WARNING: shift/reduce conflict for OR in state 243 resolved as shift
WARNING: shift/reduce conflict for XOR in state 243 resolved as shift
WARNING: shift/reduce conflict for DIV in state 243 resolved as shift
WARNING: shift/reduce conflict for MOD in state 243 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 243 resolved as shift
WARNING: shift/reduce conflict for ADD in state 243 resolved as shift
WARNING: shift/reduce conflict for SUB in state 243 resolved as shift
WARNING: shift/reduce conflict for MULT in state 243 resolved as shift
WARNING: shift/reduce conflict for AND in state 243 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 298 resolved as shift
